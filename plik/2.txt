import { Switch, Route } from "wouter";
import { QueryClientProvider } from "@tanstack/react-query";
import { HelmetProvider } from "react-helmet-async";
import { Suspense } from "react";

import { queryClient } from "./lib/queryClient";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { ThemeProvider } from "@/components/theme-provider";
import { Layout } from "@/components/layout";
import "./lib/i18n";
import Home from "@/pages/home";
import NotFound from "@/pages/not-found";
import Terms from "@/pages/terms";
import Privacy from "@/pages/privacy";

function Router() {
  return (
    <Switch>
      <Route path="/" component={Home} />
      <Route path="/terms" component={Terms} />
      <Route path="/privacy" component={Privacy} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <HelmetProvider>
      <QueryClientProvider client={queryClient}>
        <ThemeProvider defaultTheme="system" storageKey="ai-genesis-theme">
          <TooltipProvider>
            <Suspense fallback={<div>Loading...</div>}>
              <Layout>
                <Toaster />
                <Router />
              </Layout>
            </Suspense>
          </TooltipProvider>
        </ThemeProvider>
      </QueryClientProvider>
    </HelmetProvider>
  );
}

export default App;


-------------------------------

import { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { useTheme } from "@/components/theme-provider";
import { cn } from "@/lib/utils";
import i18n from "@/lib/i18n";
import { Link } from "wouter";
import { RemoveScroll } from "react-remove-scroll";

export function ControlHub() {
  const { t } = useTranslation();
  const { theme, setTheme } = useTheme();
  const [isExpanded, setIsExpanded] = useState(false);
  const [activePhase, setActivePhase] = useState("phase-0");
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showScrollToTop, setShowScrollToTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      const sections = [
        "phase-0",
        "phase-1",
        "phase-2",
        "phase-3",
        "phase-4",
        "phase-5",
        "contact",
      ];
      const currentSection = sections.find((section) => {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          return rect.top <= 100 && rect.bottom >= 100;
        }
        return false;
      });

      if (currentSection && currentSection !== activePhase) {
        setActivePhase(currentSection);
      }

      if (window.scrollY > 300) {
        setShowScrollToTop(true);
      } else {
        setShowScrollToTop(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [activePhase]);

  const phases = [
    { id: "phase-0", icon: "üí°", label: t("nav.iskra") },
    { id: "phase-1", icon: "üèóÔ∏è", label: t("nav.fundamenty") },
    { id: "phase-2", icon: "üé®", label: t("nav.innowacja") },
    { id: "phase-3", icon: "‚öôÔ∏è", label: t("nav.development") },
    { id: "phase-4", icon: "üåç", label: t("nav.zasieg") },
    { id: "phase-5", icon: "üöÄ", label: t("nav.deployment") },
    { id: "contact", icon: "üìß", label: t("nav.contact") },
  ];

  const legalLinks = [
    { href: "/terms", icon: "üìÑ", label: t("legalNav.terms") },
    { href: "/privacy", icon: "üõ°Ô∏è", label: t("legalNav.privacy") },
  ];

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: "smooth" });
      setActivePhase(sectionId);
      setIsMobileMenuOpen(false);
    }
  };

  const changeLanguage = (lng: string) => {
    i18n.changeLanguage(lng);
  };

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  return (
    <>
      <div
        className={`hidden lg:grid grid-rows-[auto_1fr_auto] fixed left-4 top-1/2 transform -translate-y-1/2 z-50 transition-all duration-300 ${
          isExpanded ? "control-hub-expanded" : "control-hub-collapsed"
        } bg-card border border-border rounded-lg shadow-lg hover:shadow-xl max-h-[90vh]`}
        onMouseEnter={() => setIsExpanded(true)}
        onMouseLeave={() => setIsExpanded(false)}
        data-testid="control-hub"
      >
        <div className="p-3 lg:p-4 border-b border-border">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 gradient-gold rounded-lg flex items-center justify-center text-white font-bold text-sm">
              AI
            </div>
            <span
              className={cn(
                "font-playfair font-semibold text-lg transition-opacity duration-300 whitespace-nowrap",
                isExpanded ? "opacity-100" : "opacity-0"
              )}
            >
              Genesis
            </span>
          </div>
        </div>

        <RemoveScroll
          enabled={isExpanded}
          className="overflow-y-auto no-scrollbar"
        >
          <nav className="py-3 lg:py-4">
            <div className="space-y-1 lg:space-y-2 px-1 lg:px-2">
              {phases.map((phase) => (
                <button
                  key={phase.id}
                  data-testid={`nav-${phase.id}`}
                  onClick={() => scrollToSection(phase.id)}
                  className={cn(
                    "nav-item flex items-center space-x-3 p-2 lg:p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 group/item relative w-full text-left",
                    activePhase === phase.id
                      ? "bg-accent text-accent-foreground"
                      : ""
                  )}
                  title={phase.label}
                >
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    {phase.icon}
                  </div>
                  <span
                    className={cn(
                      "nav-text transition-opacity duration-300 whitespace-nowrap",
                      isExpanded ? "opacity-100" : "opacity-0"
                    )}
                  >
                    {phase.label}
                  </span>
                  {!isExpanded && (
                    <div className="absolute left-full ml-2 px-2 py-1 bg-primary text-primary-foreground text-xs rounded opacity-0 group-hover/item:opacity-100 transition-opacity duration-200 pointer-events-none">
                      {phase.label}
                    </div>
                  )}
                </button>
              ))}
            </div>
          </nav>

          <div className="border-t border-border p-4 space-y-3">
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                üåê
              </div>
              <select
                data-testid="language-selector"
                value={i18n.language}
                onChange={(e) => changeLanguage(e.target.value)}
                className={cn(
                  "bg-background border border-border rounded px-2 py-1 text-sm transition-opacity duration-300 text-foreground",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                <option value="pl">Polski</option>
                <option value="en">English</option>
                <option value="ja">Êó•Êú¨Ë™û</option>
              </select>
            </div>

            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                {theme === "dark" ? "üåô" : "‚òÄÔ∏è"}
              </div>
              <button
                data-testid="theme-toggle"
                onClick={toggleTheme}
                className={cn(
                  "text-sm transition-opacity duration-300 whitespace-nowrap",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                {theme === "dark" ? "Light Mode" : "Dark Mode"}
              </button>
            </div>

            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                ‚ôø
              </div>
              <button
                data-testid="accessibility-toggle"
                className={cn(
                  "text-sm transition-opacity duration-300 whitespace-nowrap",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                Accessibility
              </button>
            </div>
          </div>

          <div className="border-t border-border px-1 lg:px-2 py-3 lg:py-4">
            <div className="space-y-1 lg:space-y-2">
              {legalLinks.map((link) => (
                <Link
                  key={link.href}
                  href={link.href}
                  className="nav-item flex items-center space-x-3 p-2 lg:p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 group/item relative w-full text-left"
                  title={link.label}
                >
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    {link.icon}
                  </div>
                  <span
                    className={cn(
                      "nav-text transition-opacity duration-300 whitespace-nowrap",
                      isExpanded ? "opacity-100" : "opacity-0"
                    )}
                  >
                    {link.label}
                  </span>
                  {!isExpanded && (
                    <div className="absolute left-full ml-2 px-2 py-1 bg-primary text-primary-foreground text-xs rounded opacity-0 group-hover/item:opacity-100 transition-opacity duration-200 pointer-events-none">
                      {link.label}
                    </div>
                  )}
                </Link>
              ))}
            </div>
          </div>
        </RemoveScroll>

        <div className="border-t border-border p-4">
          <div
            className={cn(
              "flex space-x-3 transition-all duration-300",
              isExpanded ? "justify-start" : "justify-center"
            )}
          >
            <a
              href="#"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="GitHub"
            >
              <div className="w-5 h-5 text-lg">üìÇ</div>
            </a>
            <a
              href="#"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="Twitter"
            >
              <div className="w-5 h-5 text-lg">üê¶</div>
            </a>
            <a
              href="#"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="LinkedIn"
            >
              <div className="w-5 h-5 text-lg">üíº</div>
            </a>
          </div>
        </div>
      </div>

      <button
        data-testid="mobile-menu-toggle"
        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
        className="lg:hidden fixed top-4 right-4 z-50 p-3 rounded-lg bg-card/90 backdrop-blur-sm border border-border text-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:bg-accent hover:text-accent-foreground"
      >
        {isMobileMenuOpen ? "‚úï" : "‚ò∞"}
      </button>

      {isMobileMenuOpen && (
        <RemoveScroll>
          <div
            className="lg:hidden fixed inset-0 z-40 bg-black/20 backdrop-blur-sm"
            onClick={() => setIsMobileMenuOpen(false)}
          >
            <div
              className="fixed left-0 top-0 h-full w-72 bg-background/95 backdrop-blur-md border-r border-border shadow-2xl p-4 grid grid-rows-[auto_1fr] animate-slide-in"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="p-3 border-b border-border">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 gradient-gold rounded-lg flex items-center justify-center text-white font-bold text-sm">
                    AI
                  </div>
                  <span className="font-playfair font-semibold text-lg">
                    Genesis
                  </span>
                </div>
              </div>
              <div className="overflow-y-auto no-scrollbar">
                <nav className="py-4">
                  <div className="space-y-2 px-2">
                    {phases.map((phase) => (
                      <button
                        key={phase.id}
                        data-testid={`mobile-nav-${phase.id}`}
                        onClick={() => scrollToSection(phase.id)}
                        className={cn(
                          "nav-item flex items-center space-x-3 p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 w-full text-left",
                          activePhase === phase.id
                            ? "bg-accent text-accent-foreground"
                            : ""
                        )}
                        title={phase.label}
                      >
                        <div className="w-6 h-6 flex items-center justify-center text-xl">
                          {phase.icon}
                        </div>
                        <span className="nav-text">{phase.label}</span>
                      </button>
                    ))}
                  </div>
                </nav>
                <div className="border-t border-border p-4 space-y-3">
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 flex items-center justify-center text-xl">
                      üåê
                    </div>
                    <select
                      data-testid="mobile-language-selector"
                      value={i18n.language}
                      onChange={(e) => changeLanguage(e.target.value)}
                      className="bg-background border border-border rounded px-2 py-1 text-sm text-foreground w-full"
                    >
                      <option value="pl">Polski</option>
                      <option value="en">English</option>
                      <option value="ja">Êó•Êú¨Ë™û</option>
                    </select>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 flex items-center justify-center text-xl">
                      {theme === "dark" ? "üåô" : "‚òÄÔ∏è"}
                    </div>
                    <button
                      data-testid="mobile-theme-toggle"
                      onClick={toggleTheme}
                      className="text-sm w-full text-left"
                    >
                      {theme === "dark" ? "Light Mode" : "Dark Mode"}
                    </button>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 flex items-center justify-center text-xl">
                      ‚ôø
                    </div>
                    <button
                      data-testid="mobile-accessibility-toggle"
                      className="text-sm w-full text-left"
                    >
                      Accessibility
                    </button>
                  </div>
                </div>
                <div className="border-t border-border py-4">
                  <div className="space-y-2 px-2">
                    {legalLinks.map((link) => (
                      <Link
                        key={link.href}
                        href={link.href}
                        onClick={() => setIsMobileMenuOpen(false)}
                        className="nav-item flex items-center space-x-3 p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 w-full text-left"
                        title={link.label}
                      >
                        <div className="w-6 h-6 flex items-center justify-center text-xl">
                          {link.icon}
                        </div>
                        <span className="nav-text">{link.label}</span>
                      </Link>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </RemoveScroll>
      )}

      {showScrollToTop && (
        <button
          data-testid="scroll-to-top"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg"
          aria-label="Przewi≈Ñ na g√≥rƒô"
        >
          ‚Üë
        </button>
      )}
    </>
  );
}

------------------------------------

/* @import url("https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Inter:wght@400;500;600&family=JetBrains+Mono:wght@400&display=swap"); */
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=JetBrains+Mono:wght@400&family=Poppins:wght@600;700&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: hsl(0 0% 100%);
    --foreground: hsl(0 0% 10.2%);
    --card: hsl(0 0% 100%);
    --card-foreground: hsl(0 0% 10.2%);
    --popover: hsl(0 0% 100%);
    --popover-foreground: hsl(0 0% 10.2%);
    --primary: hsl(0 0% 10.2%);
    --primary-foreground: hsl(0 0% 100%);
    --secondary: hsl(0 0% 95.1%); /* Lepszy kontrast */
    --secondary-foreground: hsl(0 0% 10.2%);
    --muted: hsl(0 0% 95.1%);
    --muted-foreground: hsl(0 0% 45.1%);
    --accent: hsl(38 48% 56%);
    --accent-light: hsl(38 55% 65%);
    --accent-foreground: hsl(0 0% 100%);
    --destructive: hsl(0 84.2% 60.2%);
    --destructive-foreground: hsl(0 0% 100%);
    --border: hsl(0 0% 89.8%); /* Lepszy kontrast */
    --input: hsl(0 0% 89.8%);
    --ring: hsl(38 48% 56%);
    --radius: 0.5rem;
  }

  .dark {
    --background: hsl(0 0% 10.2%);
    --foreground: hsl(0 0% 98%);
    --card: hsl(0 0% 10.2%);
    --card-foreground: hsl(0 0% 98%);
    --popover: hsl(0 0% 10.2%);
    --popover-foreground: hsl(0 0% 98%);
    --primary: hsl(0 0% 98%);
    --primary-foreground: hsl(0 0% 10.2%);
    --secondary: hsl(0 0% 16.5%);
    --secondary-foreground: hsl(0 0% 98%);
    --muted: hsl(0 0% 16.5%);
    --muted-foreground: hsl(0 0% 62.9%);
    --accent: hsl(38 48% 56%);
    --accent-light: hsl(38 55% 65%);
    --accent-foreground: hsl(
      0 0% 10.2%
    ); /* Zmienione dla lepszego kontrastu na z≈Çotym tle */
    --destructive: hsl(0 62.8% 30.6%);
    --destructive-foreground: hsl(0 0% 98%);
    --border: hsl(0 0% 20.5%); /* Lepszy kontrast */
    --input: hsl(0 0% 20.5%);
    --ring: hsl(38 48% 56%);
  }
}

@layer base {
  * {
    @apply border-border;
    box-sizing: border-box;
  }

  html {
    scroll-behavior: smooth;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    overflow-x: hidden;
  }

  body {
    @apply bg-background text-foreground font-inter;
    min-height: 100vh;
    overflow-x: hidden;
  }
}

@layer components {
  .gradient-gold {
    background: linear-gradient(135deg, hsl(38 48% 56%), hsl(38 55% 65%));
  }

  .code-block {
    background: linear-gradient(135deg, hsl(0 0% 10.2%), hsl(0 0% 16.5%));
  }

  .control-hub-collapsed {
    width: 4rem;
  }

  .control-hub-expanded {
    width: 17.5rem; /* Zmieni≈Çem 17.5rem - bardziej standardowa warto≈õƒá */
  }
}

@layer utilities {
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .animate-fade-in {
    animation: fadeIn 0.6s ease-in-out forwards;
  }

  .animate-slide-in {
    animation: slideIn 0.8s ease-out forwards;
  }

  .animate-bounce-subtle {
    animation: bounceSubtle 3s infinite ease-in-out;
  }

  .animate-glow {
    animation: glow 2.5s ease-in-out infinite alternate;
  }
}

/* Keyframes (bez zmian, ale zoptymalizowane) */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes bounceSubtle {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-8px);
  }
}

@keyframes glow {
  from {
    box-shadow: 0 0 15px -5px hsl(38 48% 56% / 0.5);
  }
  to {
    box-shadow: 0 0 25px 0px hsl(38 48% 56% / 0.7);
  }
}

--------------------------------------------

@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=JetBrains+Mono:wght@400&family=Poppins:wght@600;700&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: hsl(0 0% 100%);
    --foreground: hsl(0 0% 10.2%);
    --card: hsl(0 0% 100%);
    --card-foreground: hsl(0 0% 10.2%);
    --popover: hsl(0 0% 100%);
    --popover-foreground: hsl(0 0% 10.2%);
    --primary: hsl(0 0% 10.2%);
    --primary-foreground: hsl(0 0% 100%);
    --secondary: hsl(0 0% 95.1%);
    --secondary-foreground: hsl(0 0% 10.2%);
    --muted: hsl(0 0% 95.1%);
    --muted-foreground: hsl(0 0% 45.1%);
    --accent: hsl(38 48% 56%);
    --accent-light: hsl(38 55% 65%);
    --accent-foreground: hsl(0 0% 100%);
    --destructive: hsl(0 84.2% 60.2%);
    --destructive-foreground: hsl(0 0% 100%);
    --border: hsl(0 0% 89.8%);
    --input: hsl(0 0% 89.8%);
    --ring: hsl(38 48% 56%);
    --radius: 0.5rem;
  }

  .dark {
    --background: hsl(0 0% 10.2%);
    --foreground: hsl(0 0% 98%);
    --card: hsl(0 0% 10.2%);
    --card-foreground: hsl(0 0% 98%);
    --popover: hsl(0 0% 10.2%);
    --popover-foreground: hsl(0 0% 98%);
    --primary: hsl(0 0% 98%);
    --primary-foreground: hsl(0 0% 10.2%);
    --secondary: hsl(0 0% 16.5%);
    --secondary-foreground: hsl(0 0% 98%);
    --muted: hsl(0 0% 16.5%);
    --muted-foreground: hsl(0 0% 62.9%);
    --accent: hsl(38 48% 56%);
    --accent-light: hsl(38 55% 65%);
    --accent-foreground: hsl(0 0% 10.2%);
    --destructive: hsl(0 62.8% 30.6%);
    --destructive-foreground: hsl(0 0% 98%);
    --border: hsl(0 0% 20.5%);
    --input: hsl(0 0% 20.5%);
    --ring: hsl(38 48% 56%);
  }
}

@layer base {
  * {
    @apply border-border;
    box-sizing: border-box;
  }

  html {
    scroll-behavior: smooth;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    overflow-x: hidden;
  }

  body {
    @apply bg-background text-foreground font-inter;
    min-height: 100vh;
    overflow-x: hidden;
  }
}

@layer components {
  .gradient-gold {
    background: linear-gradient(135deg, hsl(38 48% 56%), hsl(38 55% 65%));
  }

  .code-block {
    background: linear-gradient(135deg, hsl(0 0% 10.2%), hsl(0 0% 16.5%));
  }

  .control-hub-collapsed {
    width: 4rem;
  }

  .control-hub-expanded {
    width: 17.5rem;
  }
}

@layer utilities {
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .animate-fade-in {
    animation: fadeIn 0.6s ease-in-out forwards;
  }

  .animate-slide-in {
    animation: slideIn 0.8s ease-out forwards;
  }

  .animate-bounce-subtle {
    animation: bounceSubtle 3s infinite ease-in-out;
  }

  .animate-glow {
    animation: glow 2.5s ease-in-out infinite alternate;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes bounceSubtle {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-8px);
  }
}

@keyframes glow {
  from {
    box-shadow: 0 0 15px -5px hsl(38 48% 56% / 0.5);
  }
  to {
    box-shadow: 0 0 25px 0px hsl(38 48% 56% / 0.7);
  }
}

html.accessibility-mode {
  font-size: 110%;
}

html.accessibility-mode body {
  background-color: #000000 !important;
  color: #ffffff !important;
}

html.accessibility-mode .bg-card,
html.accessibility-mode .bg-background,
html.accessibility-mode .bg-background\/95 {
  background-color: #111 !important;
}

html.accessibility-mode * {
  transition: none !important;
  animation: none !important;
}

html.accessibility-mode *:focus {
  outline: 3px solid #fafa00 !important;
  outline-offset: 2px;
}

html.accessibility-mode a {
  color: #00aaff !important;
  text-decoration: underline !important;
}


---------------------------------

import { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { useTheme } from "@/components/theme-provider";
import { cn } from "@/lib/utils";
import i18n from "@/lib/i18n";
import { Link } from "wouter";
import { RemoveScroll } from "react-remove-scroll";

export function ControlHub() {
  const { t } = useTranslation();
  const { theme, setTheme } = useTheme();
  const [isExpanded, setIsExpanded] = useState(false);
  const [activePhase, setActivePhase] = useState("phase-0");
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showScrollToTop, setShowScrollToTop] = useState(false);
  const [isAccessibilityOn, setIsAccessibilityOn] = useState(false);

  useEffect(() => {
    const rootElement = document.documentElement;
    if (isAccessibilityOn) {
      rootElement.classList.add("accessibility-mode");
    } else {
      rootElement.classList.remove("accessibility-mode");
    }
  }, [isAccessibilityOn]);

  useEffect(() => {
    const handleScroll = () => {
      const sections = [
        "phase-0",
        "phase-1",
        "phase-2",
        "phase-3",
        "phase-4",
        "phase-5",
        "contact",
      ];
      const currentSection = sections.find((section) => {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          return rect.top <= 100 && rect.bottom >= 100;
        }
        return false;
      });

      if (currentSection && currentSection !== activePhase) {
        setActivePhase(currentSection);
      }

      if (window.scrollY > 300) {
        setShowScrollToTop(true);
      } else {
        setShowScrollToTop(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [activePhase]);

  const phases = [
    { id: "phase-0", icon: "üí°", label: t("nav.iskra") },
    { id: "phase-1", icon: "üèóÔ∏è", label: t("nav.fundamenty") },
    { id: "phase-2", icon: "üé®", label: t("nav.innowacja") },
    { id: "phase-3", icon: "‚öôÔ∏è", label: t("nav.development") },
    { id: "phase-4", icon: "üåç", label: t("nav.zasieg") },
    { id: "phase-5", icon: "üöÄ", label: t("nav.deployment") },
    { id: "contact", icon: "üìß", label: t("nav.contact") },
  ];

  const legalLinks = [
    { href: "/terms", icon: "üìÑ", label: t("legalNav.terms") },
    { href: "/privacy", icon: "üõ°Ô∏è", label: t("legalNav.privacy") },
  ];

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: "smooth" });
      setActivePhase(sectionId);
      setIsMobileMenuOpen(false);
    }
  };

  const changeLanguage = (lng: string) => {
    i18n.changeLanguage(lng);
  };

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };

  const toggleAccessibility = () => {
    setIsAccessibilityOn(!isAccessibilityOn);
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  return (
    <>
      <div
        className={`hidden lg:grid grid-rows-[auto_1fr_auto] fixed left-4 top-1/2 transform -translate-y-1/2 z-50 transition-all duration-300 ${
          isExpanded ? "control-hub-expanded" : "control-hub-collapsed"
        } bg-card border border-border rounded-lg shadow-lg hover:shadow-xl max-h-[90vh]`}
        onMouseEnter={() => setIsExpanded(true)}
        onMouseLeave={() => setIsExpanded(false)}
        data-testid="control-hub"
      >
        <div className="p-3 lg:p-4 border-b border-border">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 gradient-gold rounded-lg flex items-center justify-center text-white font-bold text-sm">
              AI
            </div>
            <span
              className={cn(
                "font-playfair font-semibold text-lg transition-opacity duration-300 whitespace-nowrap",
                isExpanded ? "opacity-100" : "opacity-0"
              )}
            >
              Genesis
            </span>
          </div>
        </div>

        <RemoveScroll
          enabled={isExpanded}
          className="overflow-y-auto no-scrollbar"
        >
          <nav className="py-3 lg:py-4">
            <div className="space-y-1 lg:space-y-2 px-1 lg:px-2">
              {phases.map((phase) => (
                <button
                  key={phase.id}
                  data-testid={`nav-${phase.id}`}
                  onClick={() => scrollToSection(phase.id)}
                  className={cn(
                    "nav-item flex items-center space-x-3 p-2 lg:p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 group/item relative w-full text-left",
                    activePhase === phase.id
                      ? "bg-accent text-accent-foreground"
                      : ""
                  )}
                  title={phase.label}
                >
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    {phase.icon}
                  </div>
                  <span
                    className={cn(
                      "nav-text transition-opacity duration-300 whitespace-nowrap",
                      isExpanded ? "opacity-100" : "opacity-0"
                    )}
                  >
                    {phase.label}
                  </span>
                  {!isExpanded && (
                    <div className="absolute left-full ml-2 px-2 py-1 bg-primary text-primary-foreground text-xs rounded opacity-0 group-hover/item:opacity-100 transition-opacity duration-200 pointer-events-none">
                      {phase.label}
                    </div>
                  )}
                </button>
              ))}
            </div>
          </nav>

          <div className="border-t border-border p-4 space-y-3">
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                üåê
              </div>
              <select
                data-testid="language-selector"
                value={i18n.language}
                onChange={(e) => changeLanguage(e.target.value)}
                className={cn(
                  "bg-background border border-border rounded px-2 py-1 text-sm transition-opacity duration-300 text-foreground",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                <option value="pl">Polski</option>
                <option value="en">English</option>
                <option value="ja">Êó•Êú¨Ë™û</option>
              </select>
            </div>

            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                {theme === "dark" ? "üåô" : "‚òÄÔ∏è"}
              </div>
              <button
                data-testid="theme-toggle"
                onClick={toggleTheme}
                className={cn(
                  "text-sm transition-opacity duration-300 whitespace-nowrap",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                {theme === "dark" ? "Light Mode" : "Dark Mode"}
              </button>
            </div>

            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                ‚ôø
              </div>
              <button
                onClick={toggleAccessibility}
                data-testid="accessibility-toggle"
                className={cn(
                  "text-sm transition-opacity duration-300 whitespace-nowrap",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                {isAccessibilityOn ? "Normalny widok" : "U≈Çatwienia dostƒôpu"}
              </button>
            </div>
          </div>

          <div className="border-t border-border px-1 lg:px-2 py-3 lg:py-4">
            <div className="space-y-1 lg:space-y-2">
              {legalLinks.map((link) => (
                <Link
                  key={link.href}
                  href={link.href}
                  className="nav-item flex items-center space-x-3 p-2 lg:p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 group/item relative w-full text-left"
                  title={link.label}
                >
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    {link.icon}
                  </div>
                  <span
                    className={cn(
                      "nav-text transition-opacity duration-300 whitespace-nowrap",
                      isExpanded ? "opacity-100" : "opacity-0"
                    )}
                  >
                    {link.label}
                  </span>
                  {!isExpanded && (
                    <div className="absolute left-full ml-2 px-2 py-1 bg-primary text-primary-foreground text-xs rounded opacity-0 group-hover/item:opacity-100 transition-opacity duration-200 pointer-events-none">
                      {link.label}
                    </div>
                  )}
                </Link>
              ))}
            </div>
          </div>
        </RemoveScroll>

        <div className="border-t border-border p-4">
          <div
            className={cn(
              "flex space-x-3 transition-all duration-300",
              isExpanded ? "justify-start" : "justify-center"
            )}
          >
            <a
              href="#"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="GitHub"
            >
              <div className="w-5 h-5 text-lg">üìÇ</div>
            </a>
            <a
              href="#"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="Twitter"
            >
              <div className="w-5 h-5 text-lg">üê¶</div>
            </a>
            <a
              href="#"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="LinkedIn"
            >
              <div className="w-5 h-5 text-lg">üíº</div>
            </a>
          </div>
        </div>
      </div>

      <button
        data-testid="mobile-menu-toggle"
        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
        className="lg:hidden fixed top-4 right-4 z-50 p-3 rounded-lg bg-card/90 backdrop-blur-sm border border-border text-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:bg-accent hover:text-accent-foreground"
      >
        {isMobileMenuOpen ? "‚úï" : "‚ò∞"}
      </button>

      {isMobileMenuOpen && (
        <RemoveScroll>
          <div
            className="lg:hidden fixed inset-0 z-40 bg-black/20 backdrop-blur-sm"
            onClick={() => setIsMobileMenuOpen(false)}
          >
            <div
              className="fixed left-0 top-0 h-full w-72 bg-background/95 backdrop-blur-md border-r border-border shadow-2xl p-4 grid grid-rows-[auto_1fr] animate-slide-in"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="p-3 border-b border-border">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 gradient-gold rounded-lg flex items-center justify-center text-white font-bold text-sm">
                    AI
                  </div>
                  <span className="font-playfair font-semibold text-lg">
                    Genesis
                  </span>
                </div>
              </div>
              <div className="overflow-y-auto no-scrollbar">
                <nav className="py-4">
                  <div className="space-y-2 px-2">
                    {phases.map((phase) => (
                      <button
                        key={phase.id}
                        data-testid={`mobile-nav-${phase.id}`}
                        onClick={() => scrollToSection(phase.id)}
                        className={cn(
                          "nav-item flex items-center space-x-3 p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 w-full text-left",
                          activePhase === phase.id
                            ? "bg-accent text-accent-foreground"
                            : ""
                        )}
                        title={phase.label}
                      >
                        <div className="w-6 h-6 flex items-center justify-center text-xl">
                          {phase.icon}
                        </div>
                        <span className="nav-text">{phase.label}</span>
                      </button>
                    ))}
                  </div>
                </nav>
                <div className="border-t border-border p-4 space-y-3">
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 flex items-center justify-center text-xl">
                      üåê
                    </div>
                    <select
                      data-testid="mobile-language-selector"
                      value={i18n.language}
                      onChange={(e) => changeLanguage(e.target.value)}
                      className="bg-background border border-border rounded px-2 py-1 text-sm text-foreground w-full"
                    >
                      <option value="pl">Polski</option>
                      <option value="en">English</option>
                      <option value="ja">Êó•Êú¨Ë™û</option>
                    </select>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 flex items-center justify-center text-xl">
                      {theme === "dark" ? "üåô" : "‚òÄÔ∏è"}
                    </div>
                    <button
                      data-testid="mobile-theme-toggle"
                      onClick={toggleTheme}
                      className="text-sm w-full text-left"
                    >
                      {theme === "dark" ? "Light Mode" : "Dark Mode"}
                    </button>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 flex items-center justify-center text-xl">
                      ‚ôø
                    </div>
                    <button
                      onClick={toggleAccessibility}
                      data-testid="mobile-accessibility-toggle"
                      className="text-sm w-full text-left"
                    >
                      {isAccessibilityOn
                        ? "Normalny widok"
                        : "U≈Çatwienia dostƒôpu"}
                    </button>
                  </div>
                </div>
                <div className="border-t border-border py-4">
                  <div className="space-y-2 px-2">
                    {legalLinks.map((link) => (
                      <Link
                        key={link.href}
                        href={link.href}
                        onClick={() => setIsMobileMenuOpen(false)}
                        className="nav-item flex items-center space-x-3 p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 w-full text-left"
                        title={link.label}
                      >
                        <div className="w-6 h-6 flex items-center justify-center text-xl">
                          {link.icon}
                        </div>
                        <span className="nav-text">{link.label}</span>
                      </Link>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </RemoveScroll>
      )}

      {showScrollToTop && (
        <button
          data-testid="scroll-to-top"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg"
          aria-label="Przewi≈Ñ na g√≥rƒô"
        >
          ‚Üë
        </button>
      )}
    </>
  );
}

-------------------------------------

{
  "hero": {
    "title": "AI Genesis",
    "subtitle": "Interaktywny Meta-Tutorial Stworzenia Strony w Replit",
    "description": "Prze≈Çomowa, interaktywna strona pokazujƒÖca symbiotycznƒÖ relacjƒô miƒôdzy ludzkƒÖ kreatywno≈õciƒÖ a sztucznƒÖ inteligencjƒÖ w procesie tworzenia aplikacji webowych.",
    "cta": "Rozpocznij podr√≥≈º"
  },
  "nav": {
    "iskra": "Iskra",
    "fundamenty": "Fundamenty",
    "innowacja": "Innowacja UI",
    "development": "Development",
    "zasieg": "Zasiƒôg",
    "deployment": "Deployment",
    "contact": "Kontakt"
  },
  "legalNav": {
    "terms": "Regulamin",
    "privacy": "Polityka Prywatno≈õci",
    "backToHome": "Wr√≥ƒá do strony g≈Ç√≥wnej"
  },
  "phases": {
    "phaseCount": "6 faz rozwoju projektu",
    "phase0": {
      "title": "Faza 0: Iskra",
      "subtitle": "Pomys≈Ç i Brief dla AI",
      "rawIdeaTitle": "Surowy Pomys≈Ç U≈ºytkownika",
      "noteComment": "// Notatka na serwetce",
      "userNote": "Chcƒô stronƒô, kt√≥ra pokazuje jak AI pomaga tworzyƒá strony... meta! Niech bƒôdzie interaktywna, z przyk≈Çadami kodu, mo≈ºe jakie≈õ animacje? I ≈ºeby by≈Ço widaƒá ca≈Çy proces - od pomys≈Çu do deployment.",
      "aiInterpretation": "Interpretacja AI",
      "aiDescription": "Z tego prostego opisu AI wygenerowa≈Ço kompletnƒÖ specyfikacjƒô technicznƒÖ obejmujƒÖcƒÖ: interaktywnƒÖ narracjƒô, innowacyjny Control Hub, warsztat debugowania, modu≈Ç t≈Çumacze≈Ñ i pe≈ÇnƒÖ implementacjƒô z testami.",
      "terminalTitle": "AI Processing Terminal",
      "analyzing": "Analyzing user request...",
      "generating": "Generating technical specification...",
      "planning": "Planning component architecture...",
      "designing": "Designing interaction patterns...",
      "complete": "‚úì Specification complete!"
    },
    "phase1": {
      "title": "Faza 1: Fundamenty",
      "subtitle": "Setup i Architektura",
      "projectStructure": "Struktura Projektu",
      "techStack": "Stack Technologiczny",
      "typeScriptDesc": "Nowoczesny stack zapewniajƒÖcy type safety, szybki development i optymalne bundling.",
      "tailwindDesc": "Utility-first CSS z p≈Çynnymi animacjami dla nowoczesnego UX.",
      "netlifyDesc": "Serverless backend z Vitest i React Testing Library dla QA.",
      "aiJustification": "Uzasadnienie AI",
      "stackReasoning": "Wybra≈Çem ten stack, poniewa≈º TypeScript zapewnia bezpiecze≈Ñstwo typ√≥w w dynamicznym ≈õrodowisku, Vite oferuje najszybszy hot reload, a TailwindCSS pozwala na rapid prototyping bez kompromis√≥w w designie."
    },
    "phase2": {
      "title": "Faza 2: Innowacja UI",
      "subtitle": "Narodziny Control Hub",
      "designDecision": "Decyzja Projektowa",
      "designReasoning": "Tradycyjny navbar jest nieefektywny dla narracyjnych stron. Boczny 'Control Hub' utrzymuje kontekst i narzƒôdzia zawsze pod rƒôkƒÖ, nie zas≈ÇaniajƒÖc tre≈õci. Inspirowany interfejsami IDE i narzƒôdzi deweloperskich.",
      "hubFeatures": "Funkcjonalno≈õci Control Hub",
      "navFeature": "Nawigacja z Smooth Scroll",
      "navDesc": "P≈Çynne przewijanie z tooltipami po najechaniu na ikony.",
      "langFeature": "Prze≈ÇƒÖcznik Jƒôzyka (PL/EN/JP)",
      "langDesc": "Dynamiczna zmiana jƒôzyka z react-i18next.",
      "themeFeature": "Dark/Light Mode",
      "themeDesc": "P≈Çynne przej≈õcia miƒôdzy motywami z localStorage.",
      "a11yFeature": "Opcje Dostƒôpno≈õci",
      "a11yDesc": "Wysoki kontrast, focus management, ARIA labels.",
      "demoTitle": "Interaktywna Demonstracja",
      "mainContent": "G≈Ç√≥wna zawarto≈õƒá strony",
      "hubDescription": "Control Hub nie zas≈Çania tre≈õci, pozostajƒÖc zawsze dostƒôpny..."
    },
    "phase3": {
      "title": "Faza 3: Development",
      "subtitle": "Interaktywne Warsztaty Debugowania",
      "workshopTitle": "üîß Warsztat Debugowania na ≈ªywo",
      "galleryDemo": "Galeria Zdjƒôƒá - Demonstracja",
      "componentCode": "Kod Komponentu",
      "aiDialogue": "ü§ñ Przyk≈Çad Dialogu z AI",
      "userRequest": "Wygeneruj komponent ImageModal.tsx. Musi przyjmowaƒá src i alt jako propsy. Zaimplementuj zamykanie po klikniƒôciu na t≈Ço oraz klawisz Escape. U≈ºyj React Portals do renderowania go w body.",
      "aiResponse": "Gotowe. Komponent zaimplementowany z u≈ºyciem React Portals. Doda≈Çem obs≈Çugƒô zdarze≈Ñ i pu≈Çapkƒô fokusu (focus trap) dla poprawy dostƒôpno≈õci. Kod jest w",
      "generatedComment": "// ImageModal.tsx - Generated by AI"
    },
    "phase4": {
      "title": "Faza 4: Globalny Zasiƒôg",
      "subtitle": "SEO i Wielojƒôzyczno≈õƒá",
      "translationModule": "üîÑ Modu≈Ç T≈Çumacze≈Ñ na ≈ªywo",
      "testTranslations": "Testuj klucze t≈Çumacze≈Ñ",
      "seoImplementation": "üîç Implementacja SEO",
      "metaTags": "Dynamiczne Meta Tagi",
      "jsonLD": "JSON-LD Schema",
      "metaComment": "// react-helmet-async implementation",
      "jsonComment": "// Structured data for search engines"
    },
    "phase5": {
      "title": "Faza 6: Wielki Fina≈Ç",
      "subtitle": "Deployment i Dow√≥d Jako≈õci",
      "qualityAssurance": "üß™ Gwarancja Jako≈õci",
      "testingDesc": "Projekt wykorzystuje Vitest i React Testing Library dla zapewnienia najwy≈ºszej jako≈õci kodu. Ka≈ºdy komponent jest testowany pod kƒÖtem funkcjonalno≈õci i dostƒôpno≈õci.",
      "lighthouse": "üìä Wyniki Lighthouse",
      "lighthouseDesc": "Strona osiƒÖga doskona≈Çe wyniki we wszystkich kategoriach Lighthouse, potwierdzajƒÖc wysokƒÖ jako≈õƒá technicznƒÖ.",
      "deploymentTitle": "üöÄ Deployment na Netlify",
      "deploymentDesc": "Automatyczny deployment z GitHub, optymalizacja zasob√≥w, CDN i SSL. Pe≈Çna integracja CI/CD.",
      "finalThoughts": "üí≠ Podsumowanie",
      "conclusion": "AI Genesis to wiƒôcej ni≈º strona internetowa - to ≈ºywy dow√≥d na potƒôgƒô wsp√≥≈Çpracy miƒôdzy cz≈Çowiekiem a sztucznƒÖ inteligencjƒÖ. Ka≈ºda linijka kodu, ka≈ºdy element designu zosta≈Ç przemy≈õlanie stworzony, aby pokazaƒá pe≈Çen potencja≈Ç nowoczesnego web developmentu.",
      "deploymentProcess": "Proces Deploymentu",
      "gitPush": "Kod wypchany do repozytorium",
      "netlifyBuild": "Vite build + optimizacja",
      "functionsDeploy": "Serverless backend",
      "cdnDistribution": "Globalne udostƒôpnienie",
      "liveAt": "Live at: ai-genesis-tutorial.netlify.app",
      "lighthouseReport": "Lighthouse Report",
      "auditResults": "Wyniki Audytu Jako≈õci",
      "auditSubtitle": "Ostateczny dow√≥d mistrzostwa technicznego",
      "perfectScore": "üèÜ Perfect Score!",
      "perfectDesc": "Aplikacja spe≈Çnia najwy≈ºsze standardy jako≈õci w ka≈ºdej kategorii",
      "keyMetrics": "üöÄ Kluczowe Metryki",
      "missionComplete": "üéØ Misja Zako≈Ñczona",
      "finalDescription": "Projekt AI Genesis demonstruje pe≈Çen potencja≈Ç wsp√≥≈Çpracy cz≈Çowiek-AI w tworzeniu nowoczesnych aplikacji webowych. Od pierwszego pomys≈Çu po produkcyjny deployment - to jest przysz≈Ço≈õƒá developmentu.",
      "contactCta": "üí¨ Skontaktuj siƒô",
      "restartCta": "üîÑ Rozpocznij ponownie"
    }
  },
  "workshop": {
    "title": "Warsztat Debugowania na ≈ªywo",
    "galleryDemo": "Galeria Zdjƒôƒá - Demonstracja",
    "componentCode": "Kod Komponentu",
    "simulateBug": "üêõ Symuluj B≈ÇƒÖd!",
    "fixBug": "‚úÖ Napraw!",
    "copyCode": "Skopiuj kod",
    "codeCopied": "Kod skopiowany!",
    "codeDescription": "Kod zosta≈Ç skopiowany do schowka.",
    "error": "B≈ÇƒÖd",
    "copyError": "Nie uda≈Ço siƒô skopiowaƒá kodu.",
    "mountainAlt": "G√≥rski krajobraz o wschodzie s≈Ço≈Ñca",
    "oceanAlt": "Fale oceaniczne podczas z≈Çotej godziny"
  },
  "translationDemo": {
    "title": "Modu≈Ç T≈Çumacze≈Ñ na ≈ªywo",
    "testKeys": "Testuj klucze t≈Çumacze≈Ñ"
  },
  "performance": {
    "title": "Optymalizacje Wydajno≈õci",
    "lazyLoading": "Lazy Loading",
    "lazyLoadingDesc": "Obrazy i komponenty",
    "imageOptimization": "Image Optimization",
    "imageOptDesc": ".avif + .webp formaty",
    "codeSplitting": "Code Splitting",
    "codeSplittingDesc": "React.lazy + Suspense",
    "bundleAnalysis": "Bundle Analysis",
    "bundleAnalysisDesc": "Vite bundle analyzer"
  },
  "testing": {
    "phaseTitle": "Faza 5: Gwarancja Jako≈õci",
    "phaseSubtitle": "Profesjonalne Testowanie",
    "unitTestExample": "Przyk≈Çad Testu Jednostkowego",
    "testResults": "Wyniki Test√≥w",
    "testResultsVitest": "Test Results - Vitest",
    "testingStack": "Stack Testowy",
    "testRunner": "Test Runner:",
    "testingLibrary": "Testing Library:",
    "coverage": "Coverage:",
    "e2eTests": "E2E Tests:",
    "e2eTestsValue": "Playwright (coming soon)",
    "firstContentfulPaint": "First Contentful Paint",
    "largestContentfulPaint": "Largest Contentful Paint",
    "cumulativeLayoutShift": "Cumulative Layout Shift",
    "timeToInteractive": "Time to Interactive"
  },
  "translation": {
    "testKey": "Wprowad≈∫ klucz t≈Çumaczenia:",
    "inputPlaceholder": "Wprowad≈∫ klucz t≈Çumaczenia:",
    "languages": {
      "pl": "Polski",
      "en": "English",
      "ja": "Êó•Êú¨Ë™û"
    }
  },
  "creator": {
    "sectionTitle": "Tw√≥rca Projektu",
    "sectionSubtitle": "Developer z PasjƒÖ",
    "name": "Full Stack Overflow Developer",
    "description": "Pasjonat technologii, kt√≥ry ≈ÇƒÖczy kreatywno≈õƒá z technicznƒÖ precyzjƒÖ. Ten projekt AI Genesis to przyk≈Çad symbioty miƒôdzy ludzkƒÖ wizjƒÖ a mo≈ºliwo≈õciami sztucznej inteligencji w tworzeniu nowoczesnych aplikacji webowych.",
    "selfTaughtButton": "Samouk",
    "storyTitle": "Historia Pomys≈Çodawcy Projektu",
    "storyText": "Za projektem stoi 69-letni emeryt, kt√≥ry od 21 lat samodzielnie zg≈Çƒôbia tajniki jƒôzyk√≥w programowania, korzystajƒÖc z ksiƒÖ≈ºek, film√≥w edukacyjnych oraz zasob√≥w internetu. Od dw√≥ch lat wspiera siƒô sztucznƒÖ inteligencjƒÖ zar√≥wno w budowaniu projekt√≥w, jak i w analizie kodu pod kƒÖtem usuwania b≈Çƒôd√≥w. Ka≈ºdego dnia swojej pasji potrafi po≈õwiƒôciƒá nawet 8‚Äì10 godzin.\n\nJego historia udowadnia, ≈ºe programowaƒá mo≈ºe nauczyƒá siƒô ka≈ºdy, w ka≈ºdym wieku. Nie liczy siƒô metryka, lecz chƒôƒá, determinacja i wiara w to, ≈ºe mo≈ºna prze≈Çamywaƒá w≈Çasne ograniczenia. Autor zaczyna≈Ç od stworzenia prostego portfolio dla swojej c√≥rki ‚Äì to by≈Ç pierwszy krok, kt√≥ry rozpali≈Ç prawdziwƒÖ pasjƒô. Od tamtego czasu zrealizowa≈Ç ju≈º ponad 120 stron internetowych, z czego zdecydowanƒÖ wiƒôkszo≈õƒá w ciƒÖgu ostatnich sze≈õciu lat.\n\nTen projekt to nie tylko kolejna witryna. To dow√≥d, ≈ºe wytrwa≈Ço≈õƒá, ciekawo≈õƒá i otwarto≈õƒá na nowe technologie mogƒÖ prowadziƒá do niezwyk≈Çych rezultat√≥w. To tak≈ºe inspiracja dla wszystkich, kt√≥rzy marzƒÖ, by zaczƒÖƒá swojƒÖ przygodƒô z kodowaniem ‚Äì niezale≈ºnie od tego, ile majƒÖ lat i w jakim punkcie ≈ºycia siƒô znajdujƒÖ.\n\nBo w ≈õwiecie programowania granice wyznacza tylko wyobra≈∫nia.",
    "closeButton": "Zamknij"
  },
  "contact": {
    "title": "Kontakt",
    "subtitle": "Gotowy na w≈Çasny projekt AI-assisted development?",
    "name": "Imiƒô i nazwisko",
    "email": "Email",
    "project": "Typ projektu",
    "projectTypes": {
      "website": "Strona internetowa",
      "webapp": "Aplikacja webowa",
      "ecommerce": "E-commerce",
      "tutorial": "Tutorial/Edukacja",
      "other": "Inne"
    },
    "message": "Opis projektu",
    "submit": "Wy≈õlij zapytanie"
  },
  "seo": {
    "title": "AI Genesis: Interaktywny Meta-Tutorial | Replit Development Masterclass",
    "description": "Prze≈Çomowy interaktywny tutorial pokazujƒÖcy pe≈Çny cykl ≈ºycia projektu - od pomys≈Çu do wdro≈ºenia z wykorzystaniem AI i nowoczesnych technologii."
  },
  "termsPage": {
    "seoTitle": "Regulamin | AI Genesis",
    "seoDescription": "Regulamin korzystania z interaktywnego serwisu AI Genesis.",
    "title": "Regulamin",
    "content": "<h2>1. Postanowienia og√≥lne</h2>\n\nNiniejszy regulamin okre≈õla zasady korzystania z serwisu internetowego AI Genesis, dostƒôpnego pod adresem [Tw√≥j Adres Strony]. Serwis ma charakter edukacyjny i demonstracyjny, prezentujƒÖc proces tworzenia aplikacji internetowych przy wsparciu sztucznej inteligencji.\n\nKorzystanie z serwisu jest r√≥wnoznaczne z akceptacjƒÖ wszystkich postanowie≈Ñ niniejszego regulaminu. U≈ºytkownik zobowiƒÖzuje siƒô do korzystania z serwisu w spos√≥b zgodny z obowiƒÖzujƒÖcym prawem oraz zasadami wsp√≥≈Ç≈ºycia spo≈Çecznego.\n\n<h2>2. Prawa autorskie</h2>\n\nWszystkie tre≈õci, w tym teksty, grafiki, kod ≈∫r√≥d≈Çowy oraz koncepcja interaktywna serwisu, sƒÖ w≈Çasno≈õciƒÖ tw√≥rcy projektu i podlegajƒÖ ochronie prawnej. Kopiowanie, modyfikowanie oraz rozpowszechnianie zawarto≈õci serwisu bez pisemnej zgody autora jest zabronione. Fragmenty kodu prezentowane w celach edukacyjnych mogƒÖ byƒá wykorzystywane wy≈ÇƒÖcznie w ramach dozwolonego u≈ºytku osobistego.\n\n<h2>3. Odpowiedzialno≈õƒá</h2>\n\nTre≈õci prezentowane w serwisie AI Genesis majƒÖ charakter wy≈ÇƒÖcznie informacyjny i demonstracyjny. Autor nie ponosi odpowiedzialno≈õci za jakiekolwiek szkody wynik≈Çe z wykorzystania informacji lub narzƒôdzi prezentowanych na stronie. U≈ºytkownik korzysta z serwisu na w≈Çasne ryzyko. Nie gwarantujemy nieprzerwanego i bezb≈Çƒôdnego dzia≈Çania serwisu."
  },
  "privacyPage": {
    "seoTitle": "Polityka Prywatno≈õci | AI Genesis",
    "seoDescription": "Polityka prywatno≈õci i plik√≥w cookies serwisu AI Genesis.",
    "title": "Polityka Prywatno≈õci",
    "content": "<h2>1. Administrator danych</h2>\n\nAdministratorem danych osobowych w rozumieniu obowiƒÖzujƒÖcych przepis√≥w jest tw√≥rca projektu AI Genesis. Wszelkie pytania dotyczƒÖce przetwarzania danych prosimy kierowaƒá za po≈õrednictwem formularza kontaktowego.\n\n<h2>2. Zbieranie i przetwarzanie danych</h2>\n\nSerwis AI Genesis szanuje prywatno≈õƒá swoich u≈ºytkownik√≥w. Nie zbieramy danych osobowych w spos√≥b zautomatyzowany. Jedynym miejscem, w kt√≥rym u≈ºytkownik mo≈ºe dobrowolnie podaƒá swoje dane (imiƒô, adres e-mail), jest formularz kontaktowy.\n\nPodane dane sƒÖ wykorzystywane wy≈ÇƒÖcznie w celu udzielenia odpowiedzi na przes≈Çane zapytanie. Dane te nie sƒÖ przechowywane w bazie danych, nie sƒÖ udostƒôpniane podmiotom trzecim ani nie sƒÖ wykorzystywane w celach marketingowych.\n\n<h2>3. Pliki Cookies</h2>\n\nSerwis mo≈ºe wykorzystywaƒá niezbƒôdne pliki cookies w celu zapewnienia prawid≈Çowego funkcjonowania podstawowych mechanizm√≥w, takich jak prze≈ÇƒÖczanie motywu (jasny/ciemny) czy preferencje jƒôzykowe. Nie u≈ºywamy analitycznych ani marketingowych plik√≥w cookies do ≈õledzenia aktywno≈õci u≈ºytkownik√≥w."
  }
}

----------------------------------

{
  "hero": {
    "title": "AI Genesis",
    "subtitle": "Interactive Meta-Tutorial for Creating a Website in Replit",
    "description": "Groundbreaking, interactive website showing the symbiotic relationship between human creativity and artificial intelligence in web application development.",
    "cta": "Start the journey"
  },
  "nav": {
    "iskra": "Spark",
    "fundamenty": "Foundations",
    "innowacja": "UI Innovation",
    "development": "Development",
    "zasieg": "Global Reach",
    "deployment": "Deployment",
    "contact": "Contact"
  },
  "legalNav": {
    "terms": "Terms of Service",
    "privacy": "Privacy Policy",
    "backToHome": "Back to Home"
  },
  "phases": {
    "phaseCount": "6 development phases",
    "phase0": {
      "title": "Phase 0: Spark",
      "subtitle": "Idea and AI Brief",
      "rawIdeaTitle": "User's Raw Idea",
      "noteComment": "// Napkin note",
      "userNote": "I want a website that shows how AI helps create websites... meta! Make it interactive, with code examples, maybe some animations? And show the whole process - from idea to deployment.",
      "aiInterpretation": "AI Interpretation",
      "aiDescription": "From this simple description, AI generated a complete technical specification including: interactive narrative, innovative Control Hub, debugging workshop, translation module, and full implementation with tests.",
      "terminalTitle": "AI Processing Terminal",
      "analyzing": "Analyzing user request...",
      "generating": "Generating technical specification...",
      "planning": "Planning component architecture...",
      "designing": "Designing interaction patterns...",
      "complete": "‚úì Specification complete!"
    },
    "phase1": {
      "title": "Phase 1: Foundations",
      "subtitle": "Setup and Architecture",
      "projectStructure": "Project Structure",
      "techStack": "Technology Stack",
      "typeScriptDesc": "Modern stack ensuring type safety, fast development, and optimal bundling.",
      "tailwindDesc": "Utility-first CSS with smooth animations for modern UX.",
      "netlifyDesc": "Serverless backend with Vitest and React Testing Library for QA.",
      "aiJustification": "AI Justification",
      "stackReasoning": "I chose this stack because TypeScript ensures type safety in a dynamic environment, Vite offers the fastest hot reload, and TailwindCSS enables rapid prototyping without design compromises."
    },
    "phase2": {
      "title": "Phase 2: UI Innovation",
      "subtitle": "Birth of Control Hub",
      "designDecision": "Design Decision",
      "designReasoning": "Traditional navbar is inefficient for narrative pages. The side 'Control Hub' keeps context and tools always at hand without obscuring content. Inspired by IDE and developer tool interfaces.",
      "hubFeatures": "Control Hub Features",
      "navFeature": "Navigation with Smooth Scroll",
      "navDesc": "Smooth scrolling with tooltips on icon hover.",
      "langFeature": "Language Switcher (PL/EN/JP)",
      "langDesc": "Dynamic language switching with react-i18next.",
      "themeFeature": "Dark/Light Mode",
      "themeDesc": "Smooth transitions between themes with localStorage.",
      "a11yFeature": "Accessibility Options",
      "a11yDesc": "High contrast, focus management, ARIA labels.",
      "demoTitle": "Interactive Demonstration",
      "mainContent": "Main page content",
      "hubDescription": "Control Hub doesn't obscure content while remaining always accessible..."
    },
    "phase3": {
      "title": "Phase 3: Development",
      "subtitle": "Interactive Debugging Workshops",
      "workshopTitle": "üîß Live Debugging Workshop",
      "galleryDemo": "Image Gallery - Demonstration",
      "componentCode": "Component Code",
      "aiDialogue": "ü§ñ AI Dialogue Example",
      "userRequest": "Generate ImageModal.tsx component. Must accept src and alt as props. Implement closing on background click and Escape key. Use React Portals to render in body.",
      "aiResponse": "Done. Component implemented using React Portals. Added event handling and focus trap for improved accessibility. Code is in",
      "generatedComment": "// ImageModal.tsx - Generated by AI"
    },
    "phase4": {
      "title": "Phase 4: Global Reach",
      "subtitle": "SEO and Multilingual Support",
      "translationModule": "üîÑ Live Translation Module",
      "testTranslations": "Test translation keys",
      "seoImplementation": "üîç SEO Implementation",
      "metaTags": "Dynamic Meta Tags",
      "jsonLD": "JSON-LD Schema",
      "metaComment": "// react-helmet-async implementation",
      "jsonComment": "// Structured data for search engines"
    },
    "phase5": {
      "title": "Phase 6: Grand Finale",
      "subtitle": "Deployment and Quality Proof",
      "qualityAssurance": "üß™ Quality Assurance",
      "testingDesc": "The project uses Vitest and React Testing Library to ensure the highest code quality. Every component is tested for functionality and accessibility.",
      "lighthouse": "üìä Lighthouse Results",
      "lighthouseDesc": "The site achieves excellent results in all Lighthouse categories, confirming high technical quality.",
      "deploymentTitle": "üöÄ Netlify Deployment",
      "deploymentDesc": "Automatic deployment from GitHub, resource optimization, CDN and SSL. Full CI/CD integration.",
      "finalThoughts": "üí≠ Summary",
      "conclusion": "AI Genesis is more than a website - it's living proof of the power of collaboration between humans and artificial intelligence. Every line of code, every design element was thoughtfully created to showcase the full potential of modern web development.",
      "deploymentProcess": "Deployment Process",
      "gitPush": "Code pushed to repository",
      "netlifyBuild": "Vite build + optimization",
      "functionsDeploy": "Serverless backend",
      "cdnDistribution": "Global distribution",
      "liveAt": "Live at: ai-genesis-tutorial.netlify.app",
      "lighthouseReport": "Lighthouse Report",
      "auditResults": "Quality Audit Results",
      "auditSubtitle": "Ultimate proof of technical mastery",
      "perfectScore": "üèÜ Perfect Score!",
      "perfectDesc": "Application meets the highest quality standards in every category",
      "keyMetrics": "üöÄ Key Metrics",
      "missionComplete": "üéØ Mission Complete",
      "finalDescription": "The AI Genesis project demonstrates the full potential of human-AI collaboration in creating modern web applications. From initial idea to production deployment - this is the future of development.",
      "contactCta": "üí¨ Contact Us",
      "restartCta": "üîÑ Start Over"
    }
  },
  "workshop": {
    "title": "Live Debugging Workshop",
    "galleryDemo": "Photo Gallery - Demo",
    "componentCode": "Component Code",
    "simulateBug": "üêõ Simulate Bug!",
    "fixBug": "‚úÖ Fix!",
    "copyCode": "Copy code",
    "codeCopied": "Code copied!",
    "codeDescription": "Code was copied to clipboard.",
    "error": "Error",
    "copyError": "Failed to copy code.",
    "mountainAlt": "Mountain landscape at sunrise",
    "oceanAlt": "Ocean waves during golden hour"
  },
  "translationDemo": {
    "title": "Live Translation Module",
    "testKeys": "Test translation keys"
  },
  "performance": {
    "title": "Performance Optimizations",
    "lazyLoading": "Lazy Loading",
    "lazyLoadingDesc": "Images and components",
    "imageOptimization": "Image Optimization",
    "imageOptDesc": ".avif + .webp formats",
    "codeSplitting": "Code Splitting",
    "codeSplittingDesc": "React.lazy + Suspense",
    "bundleAnalysis": "Bundle Analysis",
    "bundleAnalysisDesc": "Vite bundle analyzer"
  },
  "testing": {
    "phaseTitle": "Phase 5: Quality Assurance",
    "phaseSubtitle": "Professional Testing",
    "unitTestExample": "Unit Test Example",
    "testResults": "Test Results",
    "testResultsVitest": "Test Results - Vitest",
    "testingStack": "Testing Stack",
    "testRunner": "Test Runner:",
    "testingLibrary": "Testing Library:",
    "coverage": "Coverage:",
    "e2eTests": "E2E Tests:",
    "e2eTestsValue": "Playwright (coming soon)",
    "firstContentfulPaint": "First Contentful Paint",
    "largestContentfulPaint": "Largest Contentful Paint",
    "cumulativeLayoutShift": "Cumulative Layout Shift",
    "timeToInteractive": "Time to Interactive"
  },
  "translation": {
    "testKey": "Enter translation key:",
    "inputPlaceholder": "Enter translation key:",
    "languages": {
      "pl": "Polish",
      "en": "English",
      "ja": "Japanese"
    }
  },
  "creator": {
    "sectionTitle": "Project Creator",
    "sectionSubtitle": "Developer with Passion",
    "name": "Full Stack Overflow Developer",
    "description": "A technology enthusiast who combines creativity with technical precision. This AI Genesis project is an example of the symbiosis between human vision and artificial intelligence capabilities in creating modern web applications.",
    "selfTaughtButton": "Self-taught",
    "storyTitle": "Story of the Project's Originator",
    "storyText": "Behind this project stands a 69-year-old retiree who has been independently exploring the secrets of programming languages for 21 years, using books, educational videos, and internet resources. For the past two years, he has been supported by artificial intelligence both in building projects and in code analysis for bug removal. He can dedicate even 8-10 hours daily to his passion.\n\nHis story proves that anyone can learn programming at any age. What matters is not age, but desire, determination, and belief that you can break through your own limitations. The author started by creating a simple portfolio for his daughter - it was the first step that ignited true passion. Since then, he has completed over 120 websites, the vast majority in the last six years.\n\nThis project is not just another website. It's proof that perseverance, curiosity, and openness to new technologies can lead to extraordinary results. It's also inspiration for everyone who dreams of starting their coding journey - regardless of their age and life stage.\n\nBecause in the world of programming, the only limits are set by imagination.",
    "closeButton": "Close"
  },
  "contact": {
    "title": "Contact",
    "subtitle": "Ready for your own AI-assisted development project?",
    "name": "Full name",
    "email": "Email",
    "project": "Project type",
    "projectTypes": {
      "website": "Website",
      "webapp": "Web application",
      "ecommerce": "E-commerce",
      "tutorial": "Tutorial/Education",
      "other": "Other"
    },
    "message": "Project description",
    "submit": "Send inquiry"
  },
  "seo": {
    "title": "AI Genesis: Interactive Meta-Tutorial | Replit Development Masterclass",
    "description": "Groundbreaking interactive tutorial showing the complete project lifecycle - from idea to deployment using AI and modern technologies."
  },
  "termsPage": {
    "seoTitle": "Terms of Service | AI Genesis",
    "seoDescription": "Terms of Service for the AI Genesis interactive website.",
    "title": "Terms of Service",
    "content": "<h2>1. General Provisions</h2>\n\nThese terms and conditions outline the rules and regulations for the use of the AI Genesis website, located at [Your Website Address]. The website is educational and demonstrational in nature, showcasing the process of creating web applications with the support of artificial intelligence.\n\nBy accessing this website, we assume you accept these terms and conditions. Do not continue to use AI Genesis if you do not agree to all of the terms and conditions stated on this page.\n\n<h2>2. Copyright</h2>\n\nAll content, including texts, graphics, source code, and the interactive concept of the site, are the property of the project creator and are protected by law. Copying, modifying, and distributing the site's content without the author's written permission is prohibited. Code snippets presented for educational purposes may only be used within the bounds of fair personal use.\n\n<h2>3. Liability</h2>\n\nThe content presented on the AI Genesis website is for informational and demonstrational purposes only. The author shall not be held liable for any damages resulting from the use of information or tools presented on the site. You use the service at your own risk. We do not guarantee uninterrupted or error-free operation of the website."
  },
  "privacyPage": {
    "seoTitle": "Privacy Policy | AI Genesis",
    "seoDescription": "Privacy and cookie policy for the AI Genesis website.",
    "title": "Privacy Policy",
    "content": "<h2>1. Data Administrator</h2>\n\nThe administrator of personal data within the meaning of applicable regulations is the creator of the AI Genesis project. Any questions regarding data processing should be directed through the contact form.\n\n<h2>2. Data Collection and Processing</h2>\n\nAI Genesis respects the privacy of its users. We do not collect personal data automatically. The only place where a user can voluntarily provide their data (name, email address) is the contact form.\n\nThe provided data is used solely for the purpose of responding to the submitted inquiry. This data is not stored in a database, is not shared with third parties, and is not used for marketing purposes.\n\n<h2>3. Cookies</h2>\n\nThe website may use essential cookies to ensure the proper functioning of basic mechanisms, such as theme switching (light/dark) or language preferences. We do not use analytical or marketing cookies to track user activity."
  }
}

-------------------------------

{
  "hero": {
    "title": "AI „Ç∏„Çß„Éç„Ç∑„Çπ",
    "subtitle": "Replit „Åß„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà‰ΩúÊàê„ÅÆ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„É°„Çø„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´",
    "description": "„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÁô∫„Å´„Åä„Åë„Çã‰∫∫Èñì„ÅÆÂâµÈÄ†ÊÄß„Å®‰∫∫Â∑•Áü•ËÉΩ„ÅÆÂÖ±ÁîüÈñ¢‰øÇ„ÇíÁ§∫„ÅôÁîªÊúüÁöÑ„Åß„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÄÇ",
    "cta": "ÊóÖ„ÇíÂßã„ÇÅ„Çã"
  },
  "nav": {
    "iskra": "„Çπ„Éë„Éº„ÇØ",
    "fundamenty": "Âü∫Á§é",
    "innowacja": "UIÈù©Êñ∞",
    "development": "ÈñãÁô∫",
    "zasieg": "„Ç∞„É≠„Éº„Éê„É´Â±ïÈñã",
    "deployment": "„Éá„Éó„É≠„Ç§„É°„É≥„Éà",
    "contact": "„Ç≥„É≥„Çø„ÇØ„Éà"
  },
  "legalNav": {
    "terms": "Âà©Áî®Ë¶èÁ¥Ñ",
    "privacy": "„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº",
    "backToHome": "„Éõ„Éº„É†„Éö„Éº„Ç∏„Å´Êàª„Çã"
  },
  "phases": {
    "phaseCount": "6„Å§„ÅÆÈñãÁô∫„Éï„Çß„Éº„Ç∫",
    "phase0": {
      "title": "„Éï„Çß„Éº„Ç∫ 0: ÁÅ´Ëä±",
      "subtitle": "„Ç¢„Ç§„Éá„Ç¢„Å®AI„Éñ„É™„Éº„Éï",
      "rawIdeaTitle": "„É¶„Éº„Ç∂„Éº„ÅÆÁîü„ÅÆ„Ç¢„Ç§„Éá„Ç¢",
      "noteComment": "// „Éä„Éó„Ç≠„É≥„É°„É¢",
      "userNote": "AI„Åå„Ç¶„Çß„Éñ„Çµ„Ç§„Éà‰ΩúÊàê„Çí„Å©„ÅÜÊîØÊè¥„Åô„Çã„Åã„ÇíÁ§∫„Åô„Çµ„Ç§„Éà„ÅåÊ¨≤„Åó„ÅÑ...„É°„ÇøÔºÅ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å´„Åó„Å¶„ÄÅ„Ç≥„Éº„Éâ‰æã„ÇÇ„ÄÅ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇÇÔºü„Éó„É≠„Çª„ÇπÂÖ®‰Ωì„ÇíË¶ã„Åõ„Å¶ - „Ç¢„Ç§„Éá„Ç¢„Åã„Çâ„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Åæ„Åß„ÄÇ",
      "aiInterpretation": "AIËß£Èáà",
      "aiDescription": "„Åì„ÅÆÁ∞°Âçò„Å™Ë™¨Êòé„Åã„Çâ„ÄÅAI„ÅØÂåÖÊã¨ÁöÑ„Å™ÊäÄË°ì‰ªïÊßò„ÇíÁîüÊàê„Åó„Åæ„Åó„ÅüÔºö„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™Áâ©Ë™û„ÄÅÈù©Êñ∞ÁöÑ„Å™„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„Éñ„ÄÅ„Éá„Éê„ÉÉ„Ç∞„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó„ÄÅÁøªË®≥„É¢„Ç∏„É•„Éº„É´„ÄÅ„ÉÜ„Çπ„Éà‰ªò„ÅçÂÆåÂÖ®ÂÆüË£Ö„ÄÇ",
      "terminalTitle": "AIÂá¶ÁêÜ„Çø„Éº„Éü„Éä„É´",
      "analyzing": "„É¶„Éº„Ç∂„Éº„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂàÜÊûê‰∏≠...",
      "generating": "ÊäÄË°ì‰ªïÊßò„ÇíÁîüÊàê‰∏≠...",
      "planning": "„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÇíË®àÁîª‰∏≠...",
      "designing": "„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„Éë„Çø„Éº„É≥„ÇíË®≠Ë®à‰∏≠...",
      "complete": "‚úì ‰ªïÊßòÂÆåÊàêÔºÅ"
    },
    "phase1": {
      "title": "„Éï„Çß„Éº„Ç∫ 1: Âü∫Á§é",
      "subtitle": "„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Å®„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£",
      "projectStructure": "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†",
      "techStack": "ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ",
      "typeScriptDesc": "„Çø„Ç§„Éó„Çª„Éº„Éï„ÉÜ„Ç£„ÄÅÈ´òÈÄüÈñãÁô∫„ÄÅÊúÄÈÅ©„Éê„É≥„Éâ„É™„É≥„Ç∞„Çí‰øùË®º„Åô„Çã„É¢„ÉÄ„É≥„Çπ„Çø„ÉÉ„ÇØ„ÄÇ",
      "tailwindDesc": "„É¢„ÉÄ„É≥UX„ÅÆ„Åü„ÇÅ„ÅÆ„Çπ„É†„Éº„Ç∫„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„Åç„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„Éï„Ç°„Éº„Çπ„ÉàCSS„ÄÇ",
      "netlifyDesc": "ÂìÅË≥™‰øùË®º„ÅÆ„Åü„ÇÅ„ÅÆVitest„Å®React Testing Library„Çí‰ΩøÁî®„Åó„Åü„Çµ„Éº„Éê„Éº„É¨„Çπ„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÄÇ",
      "aiJustification": "AIÊ≠£ÂΩìÂåñ",
      "stackReasoning": "TypeScript„ÅåÂãïÁöÑÁí∞Â¢É„Åß„Çø„Ç§„Éó„Çª„Éº„Éï„ÉÜ„Ç£„Çí‰øùË®º„Åó„ÄÅVite„ÅåÊúÄÈÄü„ÅÆ„Éõ„ÉÉ„Éà„É™„É≠„Éº„Éâ„ÇíÊèê‰æõ„Åó„ÄÅTailwindCSS„Åå„Éá„Ç∂„Ç§„É≥„ÅÆÂ¶•Âçî„Å™„Åó„Å´ËøÖÈÄü„Å™„Éó„É≠„Éà„Çø„Ç§„Éî„É≥„Ç∞„ÇíÂèØËÉΩ„Å´„Åô„Çã„Åü„ÇÅ„ÄÅ„Åì„ÅÆ„Çπ„Çø„ÉÉ„ÇØ„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü„ÄÇ"
    },
    "phase2": {
      "title": "„Éï„Çß„Éº„Ç∫ 2: UIÈù©Êñ∞",
      "subtitle": "„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„Éñ„ÅÆË™ïÁîü",
      "designDecision": "„Éá„Ç∂„Ç§„É≥Ê±∫ÂÆö",
      "designReasoning": "ÂæìÊù•„ÅÆ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Éê„Éº„ÅØÁâ©Ë™û„Éö„Éº„Ç∏„Å´„ÅØÈùûÂäπÁéáÁöÑ„Åß„Åô„ÄÇ„Çµ„Ç§„Éâ„ÅÆ'„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„Éñ'„ÅØ„ÄÅ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÈö†„Åô„Åì„Å®„Å™„Åè„ÄÅ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å®„ÉÑ„Éº„É´„ÇíÂ∏∏„Å´Êâã„ÅÆÂ±ä„Åè„Å®„Åì„Çç„Å´ÁΩÆ„Åç„Åæ„Åô„ÄÇIDE„Å®ÈñãÁô∫ËÄÖ„ÉÑ„Éº„É´„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Åã„Çâ„Ç§„É≥„Çπ„Éî„É¨„Éº„Ç∑„Éß„É≥„ÇíÂæó„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
      "hubFeatures": "„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„ÉñÊ©üËÉΩ",
      "navFeature": "„Çπ„É†„Éº„Çπ„Çπ„ÇØ„É≠„Éº„É´‰ªò„Åç„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥",
      "navDesc": "„Ç¢„Ç§„Ç≥„É≥„Éõ„Éê„ÉºÊôÇ„ÅÆ„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó‰ªò„Åç„Çπ„É†„Éº„Çπ„Çπ„ÇØ„É≠„Éº„É´„ÄÇ",
      "langFeature": "Ë®ÄË™ûÂàáÊõøÔºàPL/EN/JPÔºâ",
      "langDesc": "react-i18next„Å´„Çà„ÇãÂãïÁöÑË®ÄË™ûÂàáÊõø„ÄÇ",
      "themeFeature": "„ÉÄ„Éº„ÇØ/„É©„Ç§„Éà„É¢„Éº„Éâ",
      "themeDesc": "localStorage„Å´„Çà„Çã„ÉÜ„Éº„ÉûÈñì„ÅÆ„Çπ„É†„Éº„Ç∫ÈÅ∑Áßª„ÄÇ",
      "a11yFeature": "„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Ç™„Éó„Ç∑„Éß„É≥",
      "a11yDesc": "È´ò„Ç≥„É≥„Éà„É©„Çπ„Éà„ÄÅ„Éï„Ç©„Éº„Ç´„ÇπÁÆ°ÁêÜ„ÄÅARIA„É©„Éô„É´„ÄÇ",
      "demoTitle": "„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥",
      "mainContent": "„É°„Ç§„É≥„Éö„Éº„Ç∏„Ç≥„É≥„ÉÜ„É≥„ÉÑ",
      "hubDescription": "„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„Éñ„ÅØÂ∏∏„Å´„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ„Åß„ÅÇ„Çä„Å™„Åå„Çâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÈö†„Åó„Åæ„Åõ„Çì..."
    },
    "phase3": {
      "title": "„Éï„Çß„Éº„Ç∫ 3: ÈñãÁô∫",
      "subtitle": "„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éá„Éê„ÉÉ„Ç∞„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó",
      "workshopTitle": "üîß „É©„Ç§„Éñ„Éá„Éê„ÉÉ„Ç∞„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó",
      "galleryDemo": "ÁîªÂÉè„ÇÆ„É£„É©„É™„Éº - „Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥",
      "componentCode": "„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç≥„Éº„Éâ",
      "aiDialogue": "ü§ñ AIÂØæË©±‰æã",
      "userRequest": "ImageModal.tsx„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇsrc„Å®alt„Çíprops„Å®„Åó„Å¶Âèó„ÅëÂèñ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇËÉåÊôØ„ÇØ„É™„ÉÉ„ÇØ„Å®Escape„Ç≠„Éº„Åß„ÅÆÈñâ„Åò„ÇãÊ©üËÉΩ„ÇíÂÆüË£Ö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇReact Portals„Çí‰ΩøÁî®„Åó„Å¶body„Å´„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
      "aiResponse": "ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇReact Portals„Çí‰ΩøÁî®„Åó„Å¶„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÂÆüË£Ö„Åó„Åæ„Åó„Åü„ÄÇ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Âêë‰∏ä„ÅÆ„Åü„ÇÅ„Ç§„Éô„É≥„ÉàÂá¶ÁêÜ„Å®„Éï„Ç©„Éº„Ç´„Çπ„Éà„É©„ÉÉ„Éó„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü„ÄÇ„Ç≥„Éº„Éâ„ÅØ",
      "generatedComment": "// ImageModal.tsx - AI„Å´„Çà„Å£„Å¶ÁîüÊàê"
    },
    "phase4": {
      "title": "„Éï„Çß„Éº„Ç∫ 4: „Ç∞„É≠„Éº„Éê„É´„É™„Éº„ÉÅ",
      "subtitle": "SEO„Å®Â§öË®ÄË™û„Çµ„Éù„Éº„Éà",
      "translationModule": "üîÑ „É©„Ç§„ÉñÁøªË®≥„É¢„Ç∏„É•„Éº„É´",
      "testTranslations": "ÁøªË®≥„Ç≠„Éº„Çí„ÉÜ„Çπ„Éà",
      "seoImplementation": "üîç SEOÂÆüË£Ö",
      "metaTags": "ÂãïÁöÑ„É°„Çø„Çø„Ç∞",
      "jsonLD": "JSON-LD„Çπ„Ç≠„Éº„Éû",
      "metaComment": "// react-helmet-asyncÂÆüË£Ö",
      "jsonComment": "// Ê§úÁ¥¢„Ç®„É≥„Ç∏„É≥Áî®„ÅÆÊßãÈÄ†Âåñ„Éá„Éº„Çø"
    },
    "phase5": {
      "title": "„Éï„Çß„Éº„Ç∫ 6: „Ç∞„É©„É≥„Éâ„Éï„Ç£„Éä„Éº„É¨",
      "subtitle": "„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Å®ÂìÅË≥™Ë®ºÊòé",
      "qualityAssurance": "üß™ ÂìÅË≥™‰øùË®º",
      "testingDesc": "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØÊúÄÈ´ò„ÅÆ„Ç≥„Éº„ÉâÂìÅË≥™„Çí‰øùË®º„Åô„Çã„Åü„ÇÅVitest„Å®React Testing Library„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÊ©üËÉΩÊÄß„Å®„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Å´„Å§„ÅÑ„Å¶„ÉÜ„Çπ„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
      "lighthouse": "üìä LighthouseÁµêÊûú",
      "lighthouseDesc": "„Çµ„Ç§„Éà„ÅØ„Åô„Åπ„Å¶„ÅÆLighthouse„Ç´„ÉÜ„Ç¥„É™„ÅßÂÑ™ÁßÄ„Å™ÁµêÊûú„ÇíÈÅîÊàê„Åó„ÄÅÈ´ò„ÅÑÊäÄË°ìÂìÅË≥™„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
      "deploymentTitle": "üöÄ Netlify„Éá„Éó„É≠„Ç§„É°„É≥„Éà",
      "deploymentDesc": "GitHub„Åã„Çâ„ÅÆËá™Âãï„Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÄÅ„É™„ÇΩ„Éº„ÇπÊúÄÈÅ©Âåñ„ÄÅCDN„Å®SSL„ÄÇÂÆåÂÖ®„Å™CI/CDÁµ±Âêà„ÄÇ",
      "finalThoughts": "üí≠ „Åæ„Å®„ÇÅ",
      "conclusion": "AI Genesis„ÅØ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà‰ª•‰∏ä„ÅÆ„ÇÇ„ÅÆ - ‰∫∫Èñì„Å®‰∫∫Â∑•Áü•ËÉΩ„ÅÆÂçîÂäõ„ÅÆÂäõ„ÅÆÁîü„Åç„ÅüË®ºÊã†„Åß„Åô„ÄÇ„Åô„Åπ„Å¶„ÅÆ„Ç≥„Éº„ÉâË°å„ÄÅ„Åô„Åπ„Å¶„ÅÆ„Éá„Ç∂„Ç§„É≥Ë¶ÅÁ¥†„ÅØ„ÄÅ„É¢„ÉÄ„É≥„Ç¶„Çß„ÉñÈñãÁô∫„ÅÆÂÆåÂÖ®„Å™ÂèØËÉΩÊÄß„ÇíÁ§∫„Åô„Åü„ÇÅ„Å´ÊÄùÊÖÆÊ∑±„Åè‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇ",
      "deploymentProcess": "„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Éó„É≠„Çª„Çπ",
      "gitPush": "„É™„Éù„Ç∏„Éà„É™„Å´„Ç≥„Éº„Éâ„Çí„Éó„ÉÉ„Ç∑„É•",
      "netlifyBuild": "Vite„Éì„É´„Éâ + ÊúÄÈÅ©Âåñ",
      "functionsDeploy": "„Çµ„Éº„Éê„Éº„É¨„Çπ„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ",
      "cdnDistribution": "„Ç∞„É≠„Éº„Éê„É´ÈÖç‰ø°",
      "liveAt": "„É©„Ç§„Éñ: ai-genesis-tutorial.netlify.app",
      "lighthouseReport": "Lighthouse„É¨„Éù„Éº„Éà",
      "auditResults": "ÂìÅË≥™Áõ£ÊüªÁµêÊûú",
      "auditSubtitle": "ÊäÄË°ìÁöÑÂçíÊ•≠„ÅÆÁ©∂Ê•µ„ÅÆË®ºÊòé",
      "perfectScore": "üèÜ „Éë„Éº„Éï„Çß„ÇØ„Éà„Çπ„Ç≥„Ç¢ÔºÅ",
      "perfectDesc": "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØ„Åô„Åπ„Å¶„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÅßÊúÄÈ´ò„ÅÆÂìÅË≥™Âü∫Ê∫ñ„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„Åô",
      "keyMetrics": "üöÄ „Ç≠„Éº„É°„Éà„É™„ÉÉ„ÇØ„Çπ",
      "missionComplete": "üéØ „Éü„ÉÉ„Ç∑„Éß„É≥„Ç≥„É≥„Éó„É™„Éº„Éà",
      "finalDescription": "AI Genesis„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØ„ÄÅ„É¢„ÉÄ„É≥„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ‰ΩúÊàê„Å´„Åä„Åë„Çã‰∫∫Èñì„Å®AI„ÅÆÂçîÂäõ„ÅÆÂÆåÂÖ®„Å™ÂèØËÉΩÊÄß„ÇíÂÆüË®º„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÂàùÊúü„Ç¢„Ç§„Éá„Ç¢„Åã„ÇâÊú¨Áï™„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Åæ„Åß - „Åì„Çå„ÅåÈñãÁô∫„ÅÆÊú™Êù•„Åß„Åô„ÄÇ",
      "contactCta": "üí¨ „ÅäÂïè„ÅÑÂêà„Çè„Åõ",
      "restartCta": "üîÑ ÊúÄÂàù„Åã„Çâ"
    }
  },
  "workshop": {
    "title": "„É©„Ç§„Éñ„Éá„Éê„ÉÉ„Ç∞„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó",
    "galleryDemo": "ÂÜôÁúü„ÇÆ„É£„É©„É™„Éº - „Éá„É¢",
    "componentCode": "„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç≥„Éº„Éâ",
    "simulateBug": "üêõ „Éê„Ç∞„Çí„Ç∑„Éü„É•„É¨„Éº„ÉàÔºÅ",
    "fixBug": "‚úÖ ‰øÆÊ≠£ÔºÅ",
    "copyCode": "„Ç≥„Éº„Éâ„Çí„Ç≥„Éî„Éº",
    "codeCopied": "„Ç≥„Éº„Éâ„Åå„Ç≥„Éî„Éº„Åï„Çå„Åæ„Åó„ÅüÔºÅ",
    "codeDescription": "„Ç≥„Éº„Éâ„Åå„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åï„Çå„Åæ„Åó„Åü„ÄÇ",
    "error": "„Ç®„É©„Éº",
    "copyError": "„Ç≥„Éº„Éâ„ÅÆ„Ç≥„Éî„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ",
    "mountainAlt": "Êó•„ÅÆÂá∫„ÅÆÂ±±„ÅÆÊôØËâ≤",
    "oceanAlt": "„Ç¥„Éº„É´„Éá„É≥„Ç¢„ÉØ„Éº„ÅÆÊµ∑„ÅÆÊ≥¢"
  },
  "translationDemo": {
    "title": "„É©„Ç§„ÉñÁøªË®≥„É¢„Ç∏„É•„Éº„É´",
    "testKeys": "ÁøªË®≥„Ç≠„Éº„Çí„ÉÜ„Çπ„Éà"
  },
  "performance": {
    "title": "„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ",
    "lazyLoading": "„É¨„Ç§„Ç∏„Éº„É≠„Éº„Éá„Ç£„É≥„Ç∞",
    "lazyLoadingDesc": "ÁîªÂÉè„Å®„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà",
    "imageOptimization": "ÁîªÂÉèÊúÄÈÅ©Âåñ",
    "imageOptDesc": ".avif + .webp„Éï„Ç©„Éº„Éû„ÉÉ„Éà",
    "codeSplitting": "„Ç≥„Éº„ÉâÂàÜÂâ≤",
    "codeSplittingDesc": "React.lazy + Suspense",
    "bundleAnalysis": "„Éê„É≥„Éâ„É´ÂàÜÊûê",
    "bundleAnalysisDesc": "Vite„Éê„É≥„Éâ„É´„Ç¢„Éä„É©„Ç§„Ç∂„Éº"
  },
  "testing": {
    "phaseTitle": "„Éï„Çß„Éº„Ç∫ 5: ÂìÅË≥™‰øùË®º",
    "phaseSubtitle": "„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„ÉÜ„Çπ„Éà",
    "unitTestExample": "Âçò‰Ωì„ÉÜ„Çπ„Éà‰æã",
    "testResults": "„ÉÜ„Çπ„ÉàÁµêÊûú",
    "testResultsVitest": "„ÉÜ„Çπ„ÉàÁµêÊûú - Vitest",
    "testingStack": "„ÉÜ„Çπ„Éà„Çπ„Çø„ÉÉ„ÇØ",
    "testRunner": "„ÉÜ„Çπ„Éà„É©„É≥„Éä„Éº:",
    "testingLibrary": "„ÉÜ„Çπ„Éà„É©„Ç§„Éñ„É©„É™:",
    "coverage": "„Ç´„Éê„É¨„ÉÉ„Ç∏:",
    "e2eTests": "E2E„ÉÜ„Çπ„Éà:",
    "e2eTestsValue": "Playwright (ËøëÊó•ÂÖ¨Èñã)",
    "firstContentfulPaint": "ÂàùÂõû„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Éï„É´„Éö„Ç§„É≥„Éà",
    "largestContentfulPaint": "ÊúÄÂ§ß„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Éï„É´„Éö„Ç§„É≥„Éà",
    "cumulativeLayoutShift": "Á¥ØÁ©ç„É¨„Ç§„Ç¢„Ç¶„Éà„Ç∑„Éï„Éà",
    "timeToInteractive": "„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñÊôÇÈñì"
  },
  "translation": {
    "testKey": "ÁøªË®≥„Ç≠„Éº„ÇíÂÖ•ÂäõÔºö",
    "inputPlaceholder": "ÁøªË®≥„Ç≠„Éº„ÇíÂÖ•Âäõ:",
    "languages": {
      "pl": "„Éù„Éº„É©„É≥„ÉâË™û",
      "en": "Ëã±Ë™û",
      "ja": "Êó•Êú¨Ë™û"
    }
  },
  "creator": {
    "sectionTitle": "„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàêËÄÖ",
    "sectionSubtitle": "ÊÉÖÁÜ±ÁöÑ„Å™ÈñãÁô∫ËÄÖ",
    "name": "„Éï„É´„Çπ„Çø„ÉÉ„ÇØ„Ç™„Éº„Éê„Éº„Éï„É≠„ÉºÈñãÁô∫ËÄÖ",
    "description": "ÂâµÈÄ†ÊÄß„Å®ÊäÄË°ìÁöÑÁ≤æÂ∫¶„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„ÅüÊäÄË°ìÊÑõÂ•ΩËÄÖ„ÄÇ„Åì„ÅÆAI Genesis„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØ„ÄÅÁèæ‰ª£„ÅÆWeb„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥‰ΩúÊàê„Å´„Åä„Åë„Çã‰∫∫Èñì„ÅÆ„Éì„Ç∏„Éß„É≥„Å®‰∫∫Â∑•Áü•ËÉΩ„ÅÆËÉΩÂäõ„ÅÆÂÖ±Áîü„ÅÆ‰æã„Åß„Åô„ÄÇ",
    "selfTaughtButton": "Áã¨Â≠¶",
    "storyTitle": "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁô∫Ê°àËÄÖ„ÅÆÁâ©Ë™û",
    "storyText": "„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆËÉåÂæå„Å´„ÅØ69Ê≠≥„ÅÆÈÄÄËÅ∑ËÄÖ„Åå„ÅÑ„Åæ„Åô„ÄÇÂΩº„ÅØ21Âπ¥Èñì„ÄÅÊõ∏Á±ç„ÄÅÊïôËÇ≤„Éì„Éá„Ç™„ÄÅ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„Éà„É™„ÇΩ„Éº„Çπ„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÁã¨Á´ã„Åó„Å¶„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„ÅÆÁßòÂØÜ„ÇíÊé¢Ê±Ç„Åó„Å¶„Åç„Åæ„Åó„Åü„ÄÇÈÅéÂéª2Âπ¥Èñì„ÅØ„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊßãÁØâ„Å®„Éê„Ç∞Èô§Âéª„ÅÆ„Åü„ÇÅ„ÅÆ„Ç≥„Éº„ÉâÂàÜÊûê„ÅÆ‰∏°Êñπ„Åß‰∫∫Â∑•Áü•ËÉΩ„Å´ÊîØÊè¥„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÂΩº„ÅØÊØéÊó•8-10ÊôÇÈñì„ÇíÊÉÖÁÜ±„Å´Êçß„Åí„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\n\nÂΩº„ÅÆÁâ©Ë™û„ÅØ„ÄÅË™∞„Åß„ÇÇ„Å©„Çì„Å™Âπ¥ÈΩ¢„Åß„ÇÇ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÇíÂ≠¶„Å∂„Åì„Å®„Åå„Åß„Åç„Çã„Åì„Å®„ÇíË®ºÊòé„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÈáçË¶Å„Å™„ÅÆ„ÅØÂπ¥ÈΩ¢„Åß„ÅØ„Å™„Åè„ÄÅÊ¨≤Êúõ„ÄÅÊ±∫ÊÑè„ÄÅ„Åù„Åó„Å¶Ëá™ÂàÜ„ÅÆÈôêÁïå„ÇíÁ™ÅÁ†¥„Åß„Åç„Çã„Å®„ÅÑ„ÅÜ‰ø°Âøµ„Åß„Åô„ÄÇ‰ΩúËÄÖ„ÅØÂ®ò„ÅÆ„Ç∑„É≥„Éó„É´„Å™„Éù„Éº„Éà„Éï„Ç©„É™„Ç™„Çí‰ΩúÊàê„Åô„Çã„Åì„Å®„Åã„ÇâÂßã„ÇÅ„Åæ„Åó„Åü - „Åù„Çå„ÅåÁúü„ÅÆÊÉÖÁÜ±„Å´ÁÅ´„Çí„Å§„Åë„ÅüÊúÄÂàù„ÅÆ‰∏ÄÊ≠©„Åß„Åó„Åü„ÄÇ„Åù„Çå‰ª•Êù•„ÄÅÂΩº„ÅØ120‰ª•‰∏ä„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÇíÂÆåÊàê„Åï„Åõ„ÄÅ„Åù„ÅÆÂúßÂÄíÁöÑÂ§ßÂ§öÊï∞„ÅØÈÅéÂéª6Âπ¥Èñì„Åß‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇ\n\n„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØÂçò„Å™„ÇãÂà•„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åù„Çå„ÅØÂøçËÄêÂäõ„ÄÅÂ•ΩÂ•áÂøÉ„ÄÅÊñ∞„Åó„ÅÑÊäÄË°ì„Å∏„ÅÆÈñãÊîæÊÄß„Åå‰∏¶Â§ñ„Çå„ÅüÁµêÊûú„Å´„Å§„Å™„Åå„Çã„Åì„Å®„ÅÆË®ºÊòé„Åß„Åô„ÄÇ„Åù„Çå„ÅØ„Åæ„Åü„ÄÅÂπ¥ÈΩ¢„ÇÑ‰∫∫Áîü„ÅÆÊÆµÈöé„Å´Èñ¢‰øÇ„Å™„Åè„ÄÅ„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÅÆÊóÖ„ÇíÂßã„ÇÅ„Çã„Åì„Å®„ÇíÂ§¢Ë¶ã„Çã„Åô„Åπ„Å¶„ÅÆ‰∫∫„Å∏„ÅÆ „Ç§„É≥„Çπ„Éî„É¨„Éº„Ç∑„Éß„É≥„Åß„ÇÇ„ÅÇ„Çä„Åæ„Åô„ÄÇ\n\n„Å™„Åú„Å™„Çâ„ÄÅ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÅÆ‰∏ñÁïå„Åß„ÅØ„ÄÅÊÉ≥ÂÉèÂäõ„Å†„Åë„ÅåÈôêÁïå„ÇíË®≠ÂÆö„Åô„Çã„Åã„Çâ„Åß„Åô„ÄÇ",
    "closeButton": "Èñâ„Åò„Çã"
  },
  "contact": {
    "title": "„ÅäÂïè„ÅÑÂêà„Çè„Åõ",
    "subtitle": "AIÊîØÊè¥ÈñãÁô∫„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊ∫ñÂÇô„ÅØ„Åß„Åç„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü",
    "name": "Ê∞èÂêç",
    "email": "„É°„Éº„É´",
    "project": "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çø„Ç§„Éó",
    "projectTypes": {
      "website": "„Ç¶„Çß„Éñ„Çµ„Ç§„Éà",
      "webapp": "„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥",
      "ecommerce": "E„Ç≥„Éû„Éº„Çπ",
      "tutorial": "„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´/ÊïôËÇ≤",
      "other": "„Åù„ÅÆ‰ªñ"
    },
    "message": "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶Å",
    "submit": "„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÇíÈÄÅ‰ø°"
  },
  "seo": {
    "title": "AI „Ç∏„Çß„Éç„Ç∑„Çπ: „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„É°„Çø„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´ | Replit ÈñãÁô∫„Éû„Çπ„Çø„Éº„ÇØ„É©„Çπ",
    "description": "AI„Å®Áèæ‰ª£ÊäÄË°ì„Çí‰ΩøÁî®„Åó„Åü„Ç¢„Ç§„Éá„Ç¢„Åã„Çâ„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Åæ„Åß„ÅÆÂÆåÂÖ®„Å™„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´„ÇíÁ§∫„ÅôÁîªÊúüÁöÑ„Å™„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„ÄÇ"
  },
  "termsPage": {
    "seoTitle": "Âà©Áî®Ë¶èÁ¥Ñ | AI Genesis",
    "seoDescription": "AI Genesis„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅÆÂà©Áî®Ë¶èÁ¥Ñ„ÄÇ",
    "title": "Âà©Áî®Ë¶èÁ¥Ñ",
    "content": "<h2>1. Á∑èÂâá</h2>\n\nÊú¨Ë¶èÁ¥Ñ„ÅØ„ÄÅ[„ÅÇ„Å™„Åü„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„Ç¢„Éâ„É¨„Çπ]„ÅßÂà©Áî®ÂèØËÉΩ„Å™AI Genesis„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅÆÂà©Áî®„Å´Èñ¢„Åô„ÇãË¶èÂâá„ÇíÂÆö„ÇÅ„Åæ„Åô„ÄÇ„Åì„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅØÊïôËÇ≤„Åä„Çà„Å≥„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„ÇíÁõÆÁöÑ„Å®„Åó„Å¶„Åä„Çä„ÄÅ‰∫∫Â∑•Áü•ËÉΩ„ÅÆÊîØÊè¥„ÇíÂèó„Åë„Åü„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ‰ΩúÊàê„Éó„É≠„Çª„Çπ„ÇíÁ¥π‰ªã„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n\n„Åì„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„Å´„Ç¢„ÇØ„Çª„Çπ„Åô„Çã„Åì„Å®„Å´„Çà„Çä„ÄÅ„Åì„Çå„Çâ„ÅÆÂà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Åü„ÇÇ„ÅÆ„Å®„Åø„Å™„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆ„Éö„Éº„Ç∏„Å´Ë®òËºâ„Åï„Çå„Å¶„ÅÑ„Çã„Åô„Åπ„Å¶„ÅÆÂà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅAI Genesis„ÅÆÂà©Áî®„Çí‰∏≠Ê≠¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n<h2>2. Ëëó‰ΩúÊ®©</h2>\n\n„ÉÜ„Ç≠„Çπ„Éà„ÄÅ„Ç∞„É©„Éï„Ç£„ÉÉ„ÇØ„ÄÅ„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„ÄÅ„Åä„Çà„Å≥„Çµ„Ç§„Éà„ÅÆ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç≥„É≥„Çª„Éó„Éà„ÇíÂê´„ÇÄ„Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØ„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàêËÄÖ„ÅÆÊâÄÊúâÁâ©„Åß„ÅÇ„Çä„ÄÅÊ≥ïÂæã„Å´„Çà„Å£„Å¶‰øùË≠∑„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇËëóËÄÖ„ÅÆÊõ∏Èù¢„Å´„Çà„ÇãË®±ÂèØ„Å™„Åè„ÄÅ„Çµ„Ç§„Éà„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí„Ç≥„Éî„Éº„ÄÅÂ§âÊõ¥„ÄÅÈÖçÂ∏É„Åô„Çã„Åì„Å®„ÅØÁ¶Å„Åò„Çâ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÊïôËÇ≤ÁõÆÁöÑ„ÅßÊèêÁ§∫„Åï„Çå„Çã„Ç≥„Éº„Éâ„Çπ„Éã„Éö„ÉÉ„Éà„ÅØ„ÄÅÂÄã‰∫∫ÁöÑ„Å™ÂÖ¨Ê≠£Âà©Áî®„ÅÆÁØÑÂõ≤ÂÜÖ„Åß„ÅÆ„Åø‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ\n\n<h2>3. Ë≤¨‰ªª</h2>\n\nAI Genesis„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅßÊèêÁ§∫„Åï„Çå„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØ„ÄÅÊÉÖÂ†±Êèê‰æõ„Åä„Çà„Å≥„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„ÅÆ„Åø„ÇíÁõÆÁöÑ„Å®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Çµ„Ç§„Éà„ÅßÊèêÁ§∫„Åï„Çå„ÅüÊÉÖÂ†±„ÇÑ„ÉÑ„Éº„É´„ÅÆ‰ΩøÁî®„Å´Ëµ∑Âõ†„Åô„Çã„ÅÑ„Åã„Å™„ÇãÊêçÂÆ≥„Å´„Å§„ÅÑ„Å¶„ÇÇ„ÄÅËëóËÄÖ„ÅØË≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åõ„Çì„ÄÇÂà©Áî®ËÄÖ„ÅØËá™Â∑±„ÅÆË≤¨‰ªª„Å´„Åä„ÅÑ„Å¶Êú¨„Çµ„Éº„Éì„Çπ„ÇíÂà©Áî®„Åô„Çã„ÇÇ„ÅÆ„Å®„Åó„Åæ„Åô„ÄÇÊàë„ÄÖ„ÅØ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅÆ‰∏≠Êñ≠„ÅÆ„Å™„ÅÑ„ÄÅ„Åæ„Åü„ÅØ„Ç®„É©„Éº„ÅÆ„Å™„ÅÑÈÅãÁî®„Çí‰øùË®º„Åó„Åæ„Åõ„Çì„ÄÇ"
  },
  "privacyPage": {
    "seoTitle": "„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº | AI Genesis",
    "seoDescription": "AI Genesis„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅÆ„Éó„É©„Ç§„Éê„Ç∑„Éº„Åä„Çà„Å≥„ÇØ„ÉÉ„Ç≠„Éº„Éù„É™„Ç∑„Éº„ÄÇ",
    "title": "„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº",
    "content": "<h2>1. „Éá„Éº„ÇøÁÆ°ÁêÜËÄÖ</h2>\n\nÈÅ©Áî®„Åï„Çå„ÇãË¶èÂà∂„ÅÆÊÑèÂë≥„Å´„Åä„Åë„ÇãÂÄã‰∫∫„Éá„Éº„Çø„ÅÆÁÆ°ÁêÜËÄÖ„ÅØ„ÄÅAI Genesis„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ‰ΩúÊàêËÄÖ„Åß„Åô„ÄÇ„Éá„Éº„ÇøÂá¶ÁêÜ„Å´Èñ¢„Åô„Çã„ÅîË≥™Âïè„ÅØ„ÄÅ„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„Åã„Çâ„ÅîÈÄ£Áµ°„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n<h2>2. „Éá„Éº„Çø„ÅÆÂèéÈõÜ„Å®Âá¶ÁêÜ</h2>\n\nAI Genesis„ÅØÂà©Áî®ËÄÖ„ÅÆ„Éó„É©„Ç§„Éê„Ç∑„Éº„ÇíÂ∞äÈáç„Åó„Åæ„Åô„ÄÇÊàë„ÄÖ„ÅØËá™ÂãïÁöÑ„Å´ÂÄã‰∫∫„Éá„Éº„Çø„ÇíÂèéÈõÜ„Åô„Çã„Åì„Å®„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÂà©Áî®ËÄÖ„ÅåËá™Áô∫ÁöÑ„Å´„Éá„Éº„ÇøÔºàÂêçÂâç„ÄÅ„É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÔºâ„ÇíÊèê‰æõ„Åß„Åç„ÇãÂîØ‰∏Ä„ÅÆÂ†¥ÊâÄ„ÅØ„ÄÅ„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„Åß„Åô„ÄÇ\n\nÊèê‰æõ„Åï„Çå„Åü„Éá„Éº„Çø„ÅØ„ÄÅÈÄÅ‰ø°„Åï„Çå„Åü„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Å´Ëøî‰ø°„Åô„ÇãÁõÆÁöÑ„Åß„ÅÆ„Åø‰ΩøÁî®„Åï„Çå„Åæ„Åô„ÄÇ„Åì„ÅÆ„Éá„Éº„Çø„ÅØ„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò„Åï„Çå„Åö„ÄÅÁ¨¨‰∏âËÄÖ„Å®ÂÖ±Êúâ„Åï„Çå„Çã„Åì„Å®„ÇÇ„ÄÅ„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞ÁõÆÁöÑ„Åß‰ΩøÁî®„Åï„Çå„Çã„Åì„Å®„ÇÇ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ\n\n<h2>3. „ÇØ„ÉÉ„Ç≠„Éº</h2>\n\nÂΩì„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅØ„ÄÅ„ÉÜ„Éº„Éû„ÅÆÂàá„ÇäÊõø„ÅàÔºà„É©„Ç§„Éà/„ÉÄ„Éº„ÇØÔºâ„ÇÑË®ÄË™ûË®≠ÂÆö„Å™„Å©„ÄÅÂü∫Êú¨ÁöÑ„Å™„É°„Ç´„Éã„Ç∫„É†„ÅÆÈÅ©Âàá„Å™Ê©üËÉΩ„ÇíÁ¢∫‰øù„Åô„Çã„Åü„ÇÅ„Å´„ÄÅ‰∏çÂèØÊ¨†„Å™„ÇØ„ÉÉ„Ç≠„Éº„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÊàë„ÄÖ„ÅØÂà©Áî®ËÄÖ„ÅÆÊ¥ªÂãï„ÇíËøΩË∑°„Åô„Çã„Åü„ÇÅ„ÅÆÂàÜÊûê„ÇØ„ÉÉ„Ç≠„Éº„ÇÑ„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞„ÇØ„ÉÉ„Ç≠„Éº„Çí‰ΩøÁî®„Åó„Åæ„Åõ„Çì„ÄÇ"
  }
}


--------------------dobry--------------------
import { useState, useEffect } from "react";
import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import InteractiveWorkshop from "@/components/interactive-workshop";
import { TranslationDemo } from "@/components/translation-demo";
import { ContactForm } from "@/components/contact-form";
import { CreatorStoryModal } from "@/components/creator-story-modal";
import devPhotoUrl from "@assets/generation-e708a120-0c3a-4d4c-b78c-c58991e69165_1755692585443.png";

export default function Home() {
  const { t } = useTranslation();
  const [isStoryModalOpen, setIsStoryModalOpen] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 300);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  return (
    <>
      <Helmet>
        <title>{t("seo.title")}</title>
        <meta name="description" content={t("seo.description")} />
        <meta property="og:title" content={t("seo.title")} />
        <meta property="og:description" content={t("seo.description")} />
        <meta property="og:type" content="website" />
        <link rel="canonical" href={window.location.href} />
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "Article",
            headline: t("seo.title"),
            description: t("seo.description"),
            author: {
              "@type": "Person",
              name: "AI Genesis",
            },
            publisher: {
              "@type": "Organization",
              name: "AI Genesis",
            },
          })}
        </script>
      </Helmet>

      <main className="w-full overflow-x-hidden">
        <section className="min-h-screen bg-gradient-to-br from-background via-secondary/5 to-accent/5 flex items-center justify-center relative overflow-hidden px-4 lg:px-8 w-full">
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-10 left-10 w-20 h-20 bg-accent/10 rounded-full animate-bounce-subtle"></div>
            <div className="absolute top-1/2 right-20 w-16 h-16 bg-accent/20 rounded-full animate-bounce-subtle delay-1000"></div>
            <div className="absolute bottom-20 left-1/3 w-12 h-12 bg-accent/15 rounded-full animate-bounce-subtle delay-2000"></div>
          </div>

          <div className="text-center z-10 animate-fade-in w-full max-w-4xl mx-auto">
            <h1 className="font-playfair text-3xl sm:text-5xl lg:text-7xl font-bold mb-6">
              <span className="gradient-gold bg-clip-text text-transparent">
                {t("hero.title")}
              </span>
            </h1>
            <h2 className="font-playfair text-lg sm:text-2xl lg:text-3xl mb-8 text-foreground/80">
              {t("hero.subtitle")}
            </h2>
            <p className="text-base sm:text-lg lg:text-xl mb-12 max-w-2xl mx-auto leading-relaxed text-foreground/70 px-4">
              {t("hero.description")}
            </p>

            <div className="mb-12">
              <div className="flex justify-center space-x-4 mb-4">
                {[...Array(6)].map((_, i) => (
                  <div
                    key={i}
                    className="w-2 h-2 bg-accent rounded-full animate-pulse"
                    style={{ animationDelay: `${i * 0.2}s` }}
                  ></div>
                ))}
              </div>
              <p className="text-sm text-foreground/60">
                {t("phases.phaseCount")}
              </p>
            </div>

            <a
              href="#phase-0"
              className="inline-flex items-center space-x-3 bg-accent hover:bg-accent-light text-accent-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-200 hover:scale-105 animate-glow"
              data-testid="hero-cta"
            >
              <span>{t("hero.cta")}</span>
              <span>üöÄ</span>
            </a>
          </div>
        </section>

        <section
          id="phase-0"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-accent to-accent-light rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üí°
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase0.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase0.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase0.rawIdeaTitle")}
                </h3>
                <div className="bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-400 p-6 mb-8 transform rotate-1">
                  <div className="font-mono text-sm mb-4 text-yellow-700 dark:text-yellow-300">
                    {t("phases.phase0.noteComment")}
                  </div>
                  <p className="text-foreground leading-relaxed">
                    "{t("phases.phase0.userNote")}"
                  </p>
                </div>

                <div className="bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">ü§ñ</span>
                    {t("phases.phase0.aiInterpretation")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    {t("phases.phase0.aiDescription")}
                  </p>
                </div>
              </div>

              <div className="animate-fade-in">
                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("phases.phase0.terminalTitle")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-2">
                    <div className="animate-pulse">
                      &gt; {t("phases.phase0.analyzing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "0.5s" }}
                    >
                      &gt; {t("phases.phase0.generating")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1s" }}
                    >
                      &gt; {t("phases.phase0.planning")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1.5s" }}
                    >
                      &gt; {t("phases.phase0.designing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "2s" }}
                    >
                      &gt; {t("phases.phase0.complete")}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-1"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üèóÔ∏è
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase1.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase1.subtitle")}
              </p>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.projectStructure")}
                </h3>

                <div className="code-block rounded-lg p-4 sm:p-6 text-white font-mono text-xs sm:text-sm overflow-x-auto">
                  <div className="text-accent mb-4">ai-genesis-project/</div>
                  <div className="ml-4 space-y-1">
                    <div>
                      ‚îú‚îÄ‚îÄ <span className="text-yellow-400">functions/</span>
                    </div>
                    <div className="ml-4">‚îî‚îÄ‚îÄ submit-form.ts</div>
                    <div>
                      ‚îú‚îÄ‚îÄ <span className="text-yellow-400">src/</span>
                    </div>
                    <div className="ml-4">
                      ‚îú‚îÄ‚îÄ <span className="text-blue-400">components/</span>
                    </div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ __tests__/</div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ ControlHub.tsx</div>
                    <div className="ml-8">‚îî‚îÄ‚îÄ InteractiveWorkshop.tsx</div>
                    <div className="ml-4">
                      ‚îú‚îÄ‚îÄ <span className="text-green-400">pages/</span>
                    </div>
                    <div className="ml-4">
                      ‚îú‚îÄ‚îÄ <span className="text-purple-400">translations/</span>
                    </div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ pl.json</div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ en.json</div>
                    <div className="ml-8">‚îî‚îÄ‚îÄ ja.json</div>
                    <div className="ml-4">‚îú‚îÄ‚îÄ App.tsx</div>
                    <div className="ml-4">‚îú‚îÄ‚îÄ main.tsx</div>
                    <div className="ml-4">‚îî‚îÄ‚îÄ i18n.ts</div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.techStack")}
                </h3>

                <div className="space-y-4 sm:space-y-6">
                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-blue-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TS
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TypeScript + React + Vite
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.typeScriptDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-cyan-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TW
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TailwindCSS + Framer Motion
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.tailwindDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-green-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        ‚ö°
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        Netlify Functions + Testing
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.netlifyDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 sm:mt-8 bg-accent/10 rounded-lg p-4 sm:p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">ü§ñ</span>
                    {t("phases.phase1.aiJustification")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    "{t("phases.phase1.stackReasoning")}"
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-2"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üé®
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase2.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase2.subtitle")}
              </p>
            </div>

            <div className="mb-12 animate-slide-in">
              <div className="bg-accent/10 border-l-4 border-accent p-6 rounded-r-lg">
                <h3 className="font-playfair text-xl font-semibold mb-4">
                  {t("phases.phase2.designDecision")}
                </h3>
                <p className="leading-relaxed">
                  {t("phases.phase2.designReasoning")}
                </p>
              </div>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.hubFeatures")}
                </h3>

                <div className="space-y-4">
                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                      üß≠
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.navFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.navDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                      üåê
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.langFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.langDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                      üåô
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.themeFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.themeDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                      ‚ôø
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.a11yFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.a11yDesc")}
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.demoTitle")}
                </h3>

                <div className="relative bg-muted rounded-lg p-6 h-96 overflow-hidden">
                  <div className="absolute left-0 top-0 h-full w-12 bg-card border-r border-border hover:w-32 transition-all duration-300 group">
                    <div className="p-2 space-y-2">
                      <div className="w-8 h-8 bg-accent rounded-lg flex items-center justify-center text-accent-foreground text-xs font-bold">
                        AI
                      </div>
                      <div className="space-y-1">
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          üí°
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          üèóÔ∏è
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          üé®
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          ‚öôÔ∏è
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="ml-16 p-4">
                    <h4 className="font-semibold mb-2">
                      {t("phases.phase2.mainContent")}
                    </h4>
                    <p className="text-sm text-foreground/70 mb-4">
                      {t("phases.phase2.hubDescription")}
                    </p>
                    <div className="space-y-2">
                      <div className="h-2 bg-secondary rounded"></div>
                      <div className="h-2 bg-secondary rounded w-3/4"></div>
                      <div className="h-2 bg-secondary rounded w-1/2"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-3"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-red-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                ‚öôÔ∏è
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase3.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase3.subtitle")}
              </p>
            </div>

            <InteractiveWorkshop />

            <div className="animate-fade-in">
              <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
                {t("phases.phase3.aiDialogue")}
              </h3>

              <div className="bg-card rounded-lg py-4 px-0 md:p-6 border border-border space-y-12">
                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-blue-500 rounded-full flex-shrink-0 flex items-center justify-center text-white text-base">
                    üë§
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4">
                      <p className="font-mono text-sm">
                        "{t("phases.phase3.userRequest")}"
                      </p>
                    </div>
                  </div>
                </div>

                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-accent rounded-full flex-shrink-0 flex items-center justify-center text-accent-foreground text-base">
                    ü§ñ
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-accent/10 rounded-lg p-4">
                      <p className="text-sm">
                        <strong>{t("phases.phase3.aiResponse")}</strong>{" "}
                        <code className="bg-muted px-2 py-1 rounded">
                          components/ImageModal.tsx
                        </code>
                        .
                      </p>
                      <div className="mt-4 code-block rounded p-4 text-white font-mono text-xs">
                        <pre>
                          <code className="whitespace-pre-wrap break-words">{`${t(
                            "phases.phase3.generatedComment"
                          )}
import { createPortal } from 'react-dom';
import { useEffect } from 'react';

interface ImageModalProps {
  src: string;
  alt: string;
  onClose: () => void;
}

export const ImageModal: React.FC<ImageModalProps> = ({ src, alt, onClose }) => {
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [onClose]);

  return createPortal(
    <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50"
         onClick={onClose}>
      <img src={src} alt={alt} className="max-w-full max-h-full"
           onClick={(e) => e.stopPropagation()} />
    </div>,
    document.body
  );
};`}</code>
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-4"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üåç
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase4.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase4.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <TranslationDemo />

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase4.seoImplementation")}
                </h3>

                <div className="space-y-6">
                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">üìã</span>
                      {t("phases.phase4.metaTags")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs">
                      <pre>
                        <code className="whitespace-pre-wrap break-words">{`${t(
                          "phases.phase4.metaComment"
                        )}
<Helmet>
  <title>{t('seo.title')}</title>
  <meta name="description" content={t('seo.description')} />
  <meta property="og:title" content={t('seo.title')} />
  <meta property="og:description" content={t('seo.description')} />
  <link rel="canonical" href={canonicalUrl} />
  <html lang={currentLanguage} />
</Helmet>`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">üè∑Ô∏è</span>
                      {t("phases.phase4.jsonLD")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs">
                      <pre>
                        <code className="whitespace-pre-wrap break-words">{`{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "AI Genesis: Interactive Meta-Tutorial",
  "description": "Comprehensive guide to AI-assisted development",
  "author": {
    "@type": "Person",
    "name": "AI Genesis"
  },
  "publisher": {
    "@type": "Organization",
    "name": "AI Genesis"
  }
}`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-accent/10 rounded-lg p-6">
                    <h4 className="font-semibold mb-4">
                      üìä {t("performance.title")}
                    </h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <div className="font-medium">
                          {t("performance.lazyLoading")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.lazyLoadingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.imageOptimization")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.imageOptDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.codeSplitting")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.codeSplittingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.bundleAnalysis")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.bundleAnalysisDesc")}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üß™
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("testing.phaseTitle")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("testing.phaseSubtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üî¨ {t("testing.unitTestExample")}
                </h3>

                <div className="code-block rounded-lg p-6 text-white font-mono text-sm">
                  <pre>
                    <code className="whitespace-pre-wrap break-words">{`// ControlHub.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ControlHub } from '../ControlHub';

describe('ControlHub', () => {
  it('should expand on hover', async () => {
    render(<ControlHub />);

    const hub = screen.getByTestId('control-hub');
    expect(hub).toHaveClass('control-hub-collapsed');

    fireEvent.mouseEnter(hub);

    await waitFor(() => {
      expect(hub).toHaveClass('control-hub-expanded');
    });
  });

  it('should navigate to correct section', () => {
    render(<ControlHub />);

    const iskraLink = screen.getByText('Iskra');
    fireEvent.click(iskraLink);

    expect(window.location.hash).toBe('#phase-0');
  });
});`}</code>
                  </pre>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  ‚úÖ {t("testing.testResults")}
                </h3>

                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("testing.testResultsVitest")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-1">
                    <div>‚úì ControlHub.test.tsx (2)</div>
                    <div className="ml-4">‚úì should expand on hover</div>
                    <div className="ml-4">
                      ‚úì should navigate to correct section
                    </div>
                    <div>‚úì TranslationModule.test.tsx (3)</div>
                    <div className="ml-4">
                      ‚úì should switch languages correctly
                    </div>
                    <div className="ml-4">‚úì should fallback to English</div>
                    <div className="ml-4">
                      ‚úì should update translations dynamically
                    </div>
                    <div>‚úì InteractiveWorkshop.test.tsx (2)</div>
                    <div className="ml-4">‚úì should simulate bug correctly</div>
                    <div className="ml-4">‚úì should fix bug on demand</div>
                    <div className="text-accent mt-4">
                      <strong>Tests: 7 passed, 7 total</strong>
                      <br />
                      <strong>Time: 2.14s</strong>
                    </div>
                  </div>
                </div>

                <div className="mt-6 bg-card rounded-lg p-6 border border-border">
                  <h4 className="font-semibold mb-4">
                    üõ†Ô∏è {t("testing.testingStack")}
                  </h4>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>{t("testing.testRunner")}</span>
                      <span className="font-mono">Vitest</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.testingLibrary")}</span>
                      <span className="font-mono">@testing-library/react</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.coverage")}</span>
                      <span className="text-green-600 font-mono">96.8%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.e2eTests")}</span>
                      <span className="font-mono">
                        {t("testing.e2eTestsValue")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-5"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üöÄ
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase5.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase5.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üåê {t("phases.phase5.deploymentProcess")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                        1
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Git Push</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.gitPush")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                        2
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Netlify Build</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.netlifyBuild")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                        3
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Functions Deploy</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.functionsDeploy")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                        4
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">CDN Distribution</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.cdnDistribution")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>
                  </div>

                  <div className="mt-6 bg-accent/10 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="font-semibold text-green-700 dark:text-green-400">
                        {t("phases.phase5.liveAt")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üìä {t("phases.phase5.lighthouseReport")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="text-center mb-6">
                    <h4 className="font-semibold text-lg mb-2">
                      {t("phases.phase5.auditResults")}
                    </h4>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.auditSubtitle")}
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    {[
                      { name: "Performance", score: 100 },
                      { name: "Accessibility", score: 100 },
                      { name: "Best Practices", score: 100 },
                      { name: "SEO", score: 100 },
                    ].map((metric) => (
                      <div key={metric.name} className="text-center">
                        <div className="relative w-20 h-20 mx-auto mb-2">
                          <div className="absolute inset-0 bg-green-100 dark:bg-green-900/20 rounded-full"></div>
                          <div className="absolute inset-2 bg-green-500 rounded-full flex items-center justify-center text-white font-bold">
                            {metric.score}
                          </div>
                        </div>
                        <div className="text-sm font-semibold">
                          {metric.name}
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 text-center">
                    <div className="text-2xl font-bold text-green-600 mb-2">
                      {t("phases.phase5.perfectScore")}
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.perfectDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4">
                    {t("phases.phase5.keyMetrics")}
                  </h4>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="font-medium">
                        {t("testing.firstContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">1.2s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.largestContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">2.1s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.cumulativeLayoutShift")}
                      </div>
                      <div className="text-green-600 font-mono">0.01</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.timeToInteractive")}
                      </div>
                      <div className="text-green-600 font-mono">2.8s</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-accent/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("creator.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70">
                {t("creator.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl overflow-hidden max-w-3xl mx-auto">
              <div className="relative h-64 sm:h-96 lg:h-[500px] w-full">
                <img
                  src={devPhotoUrl}
                  alt={t("creator.name")}
                  className="w-full h-full object-contain object-center"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
                <div className="absolute bottom-4 sm:bottom-6 left-4 sm:left-6 text-white">
                  <h3 className="font-playfair text-center text-2xl sm:text-3xl lg:text-4xl font-bold mb-2">
                    {t("creator.name")}
                  </h3>
                </div>
              </div>

              <div className="p-6 sm:p-8">
                <p className="text-foreground/80 text-base sm:text-lg leading-relaxed mb-6 sm:mb-8 max-w-4xl mx-auto text-center">
                  {t("creator.description")}
                </p>

                <div className="text-center">
                  <Button
                    onClick={() => setIsStoryModalOpen(true)}
                    className="bg-accent hover:bg-accent-light text-accent-foreground px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-200"
                    data-testid="creator-story-button"
                  >
                    üéì {t("creator.selfTaughtButton")}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="contact"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-primary text-primary-foreground"
        >
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("contact.title")}
              </h2>
              <p className="text-xl text-primary-foreground/70">
                {t("contact.subtitle")}
              </p>
            </div>

            <ContactForm />
          </div>
        </section>
      </main>

      <CreatorStoryModal
        isOpen={isStoryModalOpen}
        onClose={() => setIsStoryModalOpen(false)}
      />

      {showScrollTop && (
        <button
          data-testid="scroll-to-top-home"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg sm:w-14 sm:h-14"
          aria-label="Przewi≈Ñ na g√≥rƒô"
        >
          ‚Üë
        </button>
      )}
    </>
  );
}
----------------dobry-------------
{
  "hero": {
    "title": "AI Genesis",
    "subtitle": "Interaktywny Meta-Tutorial Stworzenia Strony w Replit",
    "description": "Prze≈Çomowa, interaktywna strona pokazujƒÖca symbiotycznƒÖ relacjƒô miƒôdzy ludzkƒÖ kreatywno≈õciƒÖ a sztucznƒÖ inteligencjƒÖ w procesie tworzenia aplikacji webowych.",
    "cta": "Rozpocznij podr√≥≈º"
  },
  "nav": {
    "iskra": "Iskra",
    "fundamenty": "Fundamenty",
    "innowacja": "Innowacja UI",
    "development": "Development",
    "zasieg": "Zasiƒôg",
    "deployment": "Deployment",
    "contact": "Kontakt"
  },
  "legalNav": {
    "terms": "Regulamin",
    "privacy": "Polityka Prywatno≈õci",
    "backToHome": "Wr√≥ƒá do strony g≈Ç√≥wnej"
  },
  "accessibility": {
    "toggleOff": "U≈Çatwienia dostƒôpu",
    "toggleOn": "Normalny widok"
  },
  "theme": {
    "lightMode": "Tryb Jasny",
    "darkMode": "Tryb Ciemny"
  },
  "phases": {
    "phaseCount": "6 faz rozwoju projektu",
    "phase0": {
      "title": "Faza 0: Iskra",
      "subtitle": "Pomys≈Ç i Brief dla AI",
      "rawIdeaTitle": "Surowy Pomys≈Ç U≈ºytkownika",
      "noteComment": "// Notatka na serwetce",
      "userNote": "Chcƒô stronƒô, kt√≥ra pokazuje jak AI pomaga tworzyƒá strony... meta! Niech bƒôdzie interaktywna, z przyk≈Çadami kodu, mo≈ºe jakie≈õ animacje? I ≈ºeby by≈Ço widaƒá ca≈Çy proces - od pomys≈Çu do deployment.",
      "aiInterpretation": "Interpretacja AI",
      "aiDescription": "Z tego prostego opisu AI wygenerowa≈Ço kompletnƒÖ specyfikacjƒô technicznƒÖ obejmujƒÖcƒÖ: interaktywnƒÖ narracjƒô, innowacyjny Control Hub, warsztat debugowania, modu≈Ç t≈Çumacze≈Ñ i pe≈ÇnƒÖ implementacjƒô z testami.",
      "terminalTitle": "AI Processing Terminal",
      "analyzing": "Analyzing user request...",
      "generating": "Generating technical specification...",
      "planning": "Planning component architecture...",
      "designing": "Designing interaction patterns...",
      "complete": "‚úì Specification complete!"
    },
    "phase1": {
      "title": "Faza 1: Fundamenty",
      "subtitle": "Setup i Architektura",
      "projectStructure": "Struktura Projektu",
      "techStack": "Stack Technologiczny",
      "typeScriptDesc": "Nowoczesny stack zapewniajƒÖcy type safety, szybki development i optymalne bundling.",
      "tailwindDesc": "Utility-first CSS z p≈Çynnymi animacjami dla nowoczesnego UX.",
      "netlifyDesc": "Serverless backend z Vitest i React Testing Library dla QA.",
      "aiJustification": "Uzasadnienie AI",
      "stackReasoning": "Wybra≈Çem ten stack, poniewa≈º TypeScript zapewnia bezpiecze≈Ñstwo typ√≥w w dynamicznym ≈õrodowisku, Vite oferuje najszybszy hot reload, a TailwindCSS pozwala na rapid prototyping bez kompromis√≥w w designie."
    },
    "phase2": {
      "title": "Faza 2: Innowacja UI",
      "subtitle": "Narodziny Control Hub",
      "designDecision": "Decyzja Projektowa",
      "designReasoning": "Tradycyjny navbar jest nieefektywny dla narracyjnych stron. Boczny 'Control Hub' utrzymuje kontekst i narzƒôdzia zawsze pod rƒôkƒÖ, nie zas≈ÇaniajƒÖc tre≈õci. Inspirowany interfejsami IDE i narzƒôdzi deweloperskich.",
      "hubFeatures": "Funkcjonalno≈õci Control Hub",
      "navFeature": "Nawigacja z Smooth Scroll",
      "navDesc": "P≈Çynne przewijanie z tooltipami po najechaniu na ikony.",
      "langFeature": "Prze≈ÇƒÖcznik Jƒôzyka (PL/EN/JP)",
      "langDesc": "Dynamiczna zmiana jƒôzyka z react-i18next.",
      "themeFeature": "Dark/Light Mode",
      "themeDesc": "P≈Çynne przej≈õcia miƒôdzy motywami z localStorage.",
      "a11yFeature": "Opcje Dostƒôpno≈õci",
      "a11yDesc": "Wysoki kontrast, focus management, ARIA labels.",
      "demoTitle": "Interaktywna Demonstracja",
      "mainContent": "G≈Ç√≥wna zawarto≈õƒá strony",
      "hubDescription": "Control Hub nie zas≈Çania tre≈õci, pozostajƒÖc zawsze dostƒôpny..."
    },
    "phase3": {
      "title": "Faza 3: Development",
      "subtitle": "Interaktywne Warsztaty Debugowania",
      "workshopTitle": "üîß Warsztat Debugowania na ≈ªywo",
      "galleryDemo": "Galeria Zdjƒôƒá - Demonstracja",
      "componentCode": "Kod Komponentu",
      "aiDialogue": "ü§ñ Przyk≈Çad Dialogu z AI",
      "userRequest": "Wygeneruj komponent ImageModal.tsx. Musi przyjmowaƒá src i alt jako propsy. Zaimplementuj zamykanie po klikniƒôciu na t≈Ço oraz klawisz Escape. U≈ºyj React Portals do renderowania go w body.",
      "aiResponse": "Gotowe. Komponent zaimplementowany z u≈ºyciem React Portals. Doda≈Çem obs≈Çugƒô zdarze≈Ñ i pu≈Çapkƒô fokusu (focus trap) dla poprawy dostƒôpno≈õci. Kod jest w",
      "generatedComment": "// ImageModal.tsx - Generated by AI"
    },
    "phase4": {
      "title": "Faza 4: Globalny Zasiƒôg",
      "subtitle": "SEO i Wielojƒôzyczno≈õƒá",
      "translationModule": "üîÑ Modu≈Ç T≈Çumacze≈Ñ na ≈ªywo",
      "testTranslations": "Testuj klucze t≈Çumacze≈Ñ",
      "seoImplementation": "üîç Implementacja SEO",
      "metaTags": "Dynamiczne Meta Tagi",
      "jsonLD": "JSON-LD Schema",
      "metaComment": "// react-helmet-async implementation",
      "jsonComment": "// Structured data for search engines"
    },
    "phase5": {
      "title": "Faza 6: Wielki Fina≈Ç",
      "subtitle": "Deployment i Dow√≥d Jako≈õci",
      "qualityAssurance": "üß™ Gwarancja Jako≈õci",
      "testingDesc": "Projekt wykorzystuje Vitest i React Testing Library dla zapewnienia najwy≈ºszej jako≈õci kodu. Ka≈ºdy komponent jest testowany pod kƒÖtem funkcjonalno≈õci i dostƒôpno≈õci.",
      "lighthouse": "üìä Wyniki Lighthouse",
      "lighthouseDesc": "Strona osiƒÖga doskona≈Çe wyniki we wszystkich kategoriach Lighthouse, potwierdzajƒÖc wysokƒÖ jako≈õƒá technicznƒÖ.",
      "deploymentTitle": "üöÄ Deployment na Netlify",
      "deploymentDesc": "Automatyczny deployment z GitHub, optymalizacja zasob√≥w, CDN i SSL. Pe≈Çna integracja CI/CD.",
      "finalThoughts": "üí≠ Podsumowanie",
      "conclusion": "AI Genesis to wiƒôcej ni≈º strona internetowa - to ≈ºywy dow√≥d na potƒôgƒô wsp√≥≈Çpracy miƒôdzy cz≈Çowiekiem a sztucznƒÖ inteligencjƒÖ. Ka≈ºda linijka kodu, ka≈ºdy element designu zosta≈Ç przemy≈õlanie stworzony, aby pokazaƒá pe≈Çen potencja≈Ç nowoczesnego web developmentu.",
      "deploymentProcess": "Proces Deploymentu",
      "gitPush": "Kod wypchany do repozytorium",
      "netlifyBuild": "Vite build + optimizacja",
      "functionsDeploy": "Serverless backend",
      "cdnDistribution": "Globalne udostƒôpnienie",
      "liveAt": "Live at: ai-genesis-tutorial.netlify.app",
      "lighthouseReport": "Lighthouse Report",
      "auditResults": "Wyniki Audytu Jako≈õci",
      "auditSubtitle": "Ostateczny dow√≥d mistrzostwa technicznego",
      "perfectScore": "üèÜ Perfect Score!",
      "perfectDesc": "Aplikacja spe≈Çnia najwy≈ºsze standardy jako≈õci w ka≈ºdej kategorii",
      "keyMetrics": "üöÄ Kluczowe Metryki",
      "missionComplete": "üéØ Misja Zako≈Ñczona",
      "finalDescription": "Projekt AI Genesis demonstruje pe≈Çen potencja≈Ç wsp√≥≈Çpracy cz≈Çowiek-AI w tworzeniu nowoczesnych aplikacji webowych. Od pierwszego pomys≈Çu po produkcyjny deployment - to jest przysz≈Ço≈õƒá developmentu.",
      "contactCta": "üí¨ Skontaktuj siƒô",
      "restartCta": "üîÑ Rozpocznij ponownie"
    }
  },
  "workshop": {
    "title": "Warsztat Debugowania na ≈ªywo",
    "galleryDemo": "Galeria Zdjƒôƒá - Demonstracja",
    "componentCode": "Kod Komponentu",
    "simulateBug": "üêõ Symuluj B≈ÇƒÖd!",
    "fixBug": "‚úÖ Napraw!",
    "copyCode": "Skopiuj kod",
    "codeCopied": "Kod skopiowany!",
    "codeDescription": "Kod zosta≈Ç skopiowany do schowka.",
    "error": "B≈ÇƒÖd",
    "copyError": "Nie uda≈Ço siƒô skopiowaƒá kodu.",
    "mountainAlt": "G√≥rski krajobraz o wschodzie s≈Ço≈Ñca",
    "oceanAlt": "Fale oceaniczne podczas z≈Çotej godziny"
  },
  "translationDemo": {
    "title": "Modu≈Ç T≈Çumacze≈Ñ na ≈ªywo",
    "testKeys": "Testuj klucze t≈Çumacze≈Ñ"
  },
  "performance": {
    "title": "Optymalizacje Wydajno≈õci",
    "lazyLoading": "Lazy Loading",
    "lazyLoadingDesc": "Obrazy i komponenty",
    "imageOptimization": "Image Optimization",
    "imageOptDesc": ".avif + .webp formaty",
    "codeSplitting": "Code Splitting",
    "codeSplittingDesc": "React.lazy + Suspense",
    "bundleAnalysis": "Bundle Analysis",
    "bundleAnalysisDesc": "Vite bundle analyzer"
  },
  "testing": {
    "phaseTitle": "Faza 5: Gwarancja Jako≈õci",
    "phaseSubtitle": "Profesjonalne Testowanie",
    "unitTestExample": "Przyk≈Çad Testu Jednostkowego",
    "testResults": "Wyniki Test√≥w",
    "testResultsVitest": "Test Results - Vitest",
    "testingStack": "Stack Testowy",
    "testRunner": "Test Runner:",
    "testingLibrary": "Testing Library:",
    "coverage": "Coverage:",
    "e2eTests": "E2E Tests:",
    "e2eTestsValue": "Playwright (coming soon)",
    "firstContentfulPaint": "First Contentful Paint",
    "largestContentfulPaint": "Largest Contentful Paint",
    "cumulativeLayoutShift": "Cumulative Layout Shift",
    "timeToInteractive": "Time to Interactive"
  },
  "translation": {
    "testKey": "Wprowad≈∫ klucz t≈Çumaczenia:",
    "inputPlaceholder": "Wprowad≈∫ klucz t≈Çumaczenia:",
    "languages": {
      "pl": "Polski",
      "en": "English",
      "ja": "Êó•Êú¨Ë™û"
    }
  },
  "creator": {
    "sectionTitle": "Tw√≥rca Projektu",
    "sectionSubtitle": "Developer z PasjƒÖ",
    "name": "Full Stack Overflow Developer",
    "description": "Pasjonat technologii, kt√≥ry ≈ÇƒÖczy kreatywno≈õƒá z technicznƒÖ precyzjƒÖ. Ten projekt AI Genesis to przyk≈Çad symbioty miƒôdzy ludzkƒÖ wizjƒÖ a mo≈ºliwo≈õciami sztucznej inteligencji w tworzeniu nowoczesnych aplikacji webowych.",
    "selfTaughtButton": "Samouk",
    "storyTitle": "Historia Pomys≈Çodawcy Projektu",
    "storyText": "Za projektem stoi 69-letni emeryt, kt√≥ry od 21 lat samodzielnie zg≈Çƒôbia tajniki jƒôzyk√≥w programowania, korzystajƒÖc z ksiƒÖ≈ºek, film√≥w edukacyjnych oraz zasob√≥w internetu. Od dw√≥ch lat wspiera siƒô sztucznƒÖ inteligencjƒÖ zar√≥wno w budowaniu projekt√≥w, jak i w analizie kodu pod kƒÖtem usuwania b≈Çƒôd√≥w. Ka≈ºdego dnia swojej pasji potrafi po≈õwiƒôciƒá nawet 8‚Äì10 godzin.\n\nJego historia udowadnia, ≈ºe programowaƒá mo≈ºe nauczyƒá siƒô ka≈ºdy, w ka≈ºdym wieku. Nie liczy siƒô metryka, lecz chƒôƒá, determinacja i wiara w to, ≈ºe mo≈ºna prze≈Çamywaƒá w≈Çasne ograniczenia. Autor zaczyna≈Ç od stworzenia prostego portfolio dla swojej c√≥rki ‚Äì to by≈Ç pierwszy krok, kt√≥ry rozpali≈Ç prawdziwƒÖ pasjƒô. Od tamtego czasu zrealizowa≈Ç ju≈º ponad 120 stron internetowych, z czego zdecydowanƒÖ wiƒôkszo≈õƒá w ciƒÖgu ostatnich sze≈õciu lat.\n\nTen projekt to nie tylko kolejna witryna. To dow√≥d, ≈ºe wytrwa≈Ço≈õƒá, ciekawo≈õƒá i otwarto≈õƒá na nowe technologie mogƒÖ prowadziƒá do niezwyk≈Çych rezultat√≥w. To tak≈ºe inspiracja dla wszystkich, kt√≥rzy marzƒÖ, by zaczƒÖƒá swojƒÖ przygodƒô z kodowaniem ‚Äì niezale≈ºnie od tego, ile majƒÖ lat i w jakim punkcie ≈ºycia siƒô znajdujƒÖ.\n\nBo w ≈õwiecie programowania granice wyznacza tylko wyobra≈∫nia.",
    "closeButton": "Zamknij"
  },
  "contact": {
    "title": "Kontakt",
    "subtitle": "Gotowy na w≈Çasny projekt AI-assisted development?",
    "name": "Imiƒô i nazwisko",
    "email": "Email",
    "project": "Typ projektu",
    "projectTypes": {
      "website": "Strona internetowa",
      "webapp": "Aplikacja webowa",
      "ecommerce": "E-commerce",
      "tutorial": "Tutorial/Edukacja",
      "other": "Inne"
    },
    "message": "Opis projektu",
    "submit": "Wy≈õlij zapytanie"
  },
  "seo": {
    "title": "AI Genesis: Interaktywny Meta-Tutorial | Replit Development Masterclass",
    "description": "Prze≈Çomowy interaktywny tutorial pokazujƒÖcy pe≈Çny cykl ≈ºycia projektu - od pomys≈Çu do wdro≈ºenia z wykorzystaniem AI i nowoczesnych technologii."
  },
  "termsPage": {
    "seoTitle": "Regulamin | AI Genesis",
    "seoDescription": "Regulamin korzystania z interaktywnego serwisu AI Genesis.",
    "title": "Regulamin",
    "content": "<h2>1. Postanowienia og√≥lne</h2>\n\nNiniejszy regulamin okre≈õla zasady korzystania z serwisu internetowego AI Genesis, dostƒôpnego pod adresem [Tw√≥j Adres Strony]. Serwis ma charakter edukacyjny i demonstracyjny, prezentujƒÖc proces tworzenia aplikacji internetowych przy wsparciu sztucznej inteligencji.\n\nKorzystanie z serwisu jest r√≥wnoznaczne z akceptacjƒÖ wszystkich postanowie≈Ñ niniejszego regulaminu. U≈ºytkownik zobowiƒÖzuje siƒô do korzystania z serwisu w spos√≥b zgodny z obowiƒÖzujƒÖcym prawem oraz zasadami wsp√≥≈Ç≈ºycia spo≈Çecznego.\n\n<h2>2. Prawa autorskie</h2>\n\nWszystkie tre≈õci, w tym teksty, grafiki, kod ≈∫r√≥d≈Çowy oraz koncepcja interaktywna serwisu, sƒÖ w≈Çasno≈õciƒÖ tw√≥rcy projektu i podlegajƒÖ ochronie prawnej. Kopiowanie, modyfikowanie oraz rozpowszechnianie zawarto≈õci serwisu bez pisemnej zgody autora jest zabronione. Fragmenty kodu prezentowane w celach edukacyjnych mogƒÖ byƒá wykorzystywane wy≈ÇƒÖcznie w ramach dozwolonego u≈ºytku osobistego.\n\n<h2>3. Odpowiedzialno≈õƒá</h2>\n\nTre≈õci prezentowane w serwisie AI Genesis majƒÖ charakter wy≈ÇƒÖcznie informacyjny i demonstracyjny. Autor nie ponosi odpowiedzialno≈õci za jakiekolwiek szkody wynik≈Çe z wykorzystania informacji lub narzƒôdzi prezentowanych na stronie. U≈ºytkownik korzysta z serwisu na w≈Çasne ryzyko. Nie gwarantujemy nieprzerwanego i bezb≈Çƒôdnego dzia≈Çania serwisu."
  },
  "privacyPage": {
    "seoTitle": "Polityka Prywatno≈õci | AI Genesis",
    "seoDescription": "Polityka prywatno≈õci i plik√≥w cookies serwisu AI Genesis.",
    "title": "Polityka Prywatno≈õci",
    "content": "<h2>1. Administrator danych</h2>\n\nAdministratorem danych osobowych w rozumieniu obowiƒÖzujƒÖcych przepis√≥w jest tw√≥rca projektu AI Genesis. Wszelkie pytania dotyczƒÖce przetwarzania danych prosimy kierowaƒá za po≈õrednictwem formularza kontaktowego.\n\n<h2>2. Zbieranie i przetwarzanie danych</h2>\n\nSerwis AI Genesis szanuje prywatno≈õƒá swoich u≈ºytkownik√≥w. Nie zbieramy danych osobowych w spos√≥b zautomatyzowany. Jedynym miejscem, w kt√≥rym u≈ºytkownik mo≈ºe dobrowolnie podaƒá swoje dane (imiƒô, adres e-mail), jest formularz kontaktowy.\n\nPodane dane sƒÖ wykorzystywane wy≈ÇƒÖcznie w celu udzielenia odpowiedzi na przes≈Çane zapytanie. Dane te nie sƒÖ przechowywane w bazie danych, nie sƒÖ udostƒôpniane podmiotom trzecim ani nie sƒÖ wykorzystywane w celach marketingowych.\n\n<h2>3. Pliki Cookies</h2>\n\nSerwis mo≈ºe wykorzystywaƒá niezbƒôdne pliki cookies w celu zapewnienia prawid≈Çowego funkcjonowania podstawowych mechanizm√≥w, takich jak prze≈ÇƒÖczanie motywu (jasny/ciemny) czy preferencje jƒôzykowe. Nie u≈ºywamy analitycznych ani marketingowych plik√≥w cookies do ≈õledzenia aktywno≈õci u≈ºytkownik√≥w."
  }
}

---------------------dobry---------------------

{
  "hero": {
    "title": "AI Genesis",
    "subtitle": "Interactive Meta-Tutorial for Creating a Website in Replit",
    "description": "Groundbreaking, interactive website showing the symbiotic relationship between human creativity and artificial intelligence in web application development.",
    "cta": "Start the journey"
  },
  "nav": {
    "iskra": "Spark",
    "fundamenty": "Foundations",
    "innowacja": "UI Innovation",
    "development": "Development",
    "zasieg": "Global Reach",
    "deployment": "Deployment",
    "contact": "Contact"
  },
  "legalNav": {
    "terms": "Terms of Service",
    "privacy": "Privacy Policy",
    "backToHome": "Back to Home"
  },
  "accessibility": {
    "toggleOff": "Accessibility",
    "toggleOn": "Normal view"
  },
  "theme": {
    "lightMode": "Light Mode",
    "darkMode": "Dark Mode"
  },
  "phases": {
    "phaseCount": "6 development phases",
    "phase0": {
      "title": "Phase 0: Spark",
      "subtitle": "Idea and AI Brief",
      "rawIdeaTitle": "User's Raw Idea",
      "noteComment": "// Napkin note",
      "userNote": "I want a website that shows how AI helps create websites... meta! Make it interactive, with code examples, maybe some animations? And show the whole process - from idea to deployment.",
      "aiInterpretation": "AI Interpretation",
      "aiDescription": "From this simple description, AI generated a complete technical specification including: interactive narrative, innovative Control Hub, debugging workshop, translation module, and full implementation with tests.",
      "terminalTitle": "AI Processing Terminal",
      "analyzing": "Analyzing user request...",
      "generating": "Generating technical specification...",
      "planning": "Planning component architecture...",
      "designing": "Designing interaction patterns...",
      "complete": "‚úì Specification complete!"
    },
    "phase1": {
      "title": "Phase 1: Foundations",
      "subtitle": "Setup and Architecture",
      "projectStructure": "Project Structure",
      "techStack": "Technology Stack",
      "typeScriptDesc": "Modern stack ensuring type safety, fast development, and optimal bundling.",
      "tailwindDesc": "Utility-first CSS with smooth animations for modern UX.",
      "netlifyDesc": "Serverless backend with Vitest and React Testing Library for QA.",
      "aiJustification": "AI Justification",
      "stackReasoning": "I chose this stack because TypeScript ensures type safety in a dynamic environment, Vite offers the fastest hot reload, and TailwindCSS enables rapid prototyping without design compromises."
    },
    "phase2": {
      "title": "Phase 2: UI Innovation",
      "subtitle": "Birth of Control Hub",
      "designDecision": "Design Decision",
      "designReasoning": "Traditional navbar is inefficient for narrative pages. The side 'Control Hub' keeps context and tools always at hand without obscuring content. Inspired by IDE and developer tool interfaces.",
      "hubFeatures": "Control Hub Features",
      "navFeature": "Navigation with Smooth Scroll",
      "navDesc": "Smooth scrolling with tooltips on icon hover.",
      "langFeature": "Language Switcher (PL/EN/JP)",
      "langDesc": "Dynamic language switching with react-i18next.",
      "themeFeature": "Dark/Light Mode",
      "themeDesc": "Smooth transitions between themes with localStorage.",
      "a11yFeature": "Accessibility Options",
      "a11yDesc": "High contrast, focus management, ARIA labels.",
      "demoTitle": "Interactive Demonstration",
      "mainContent": "Main page content",
      "hubDescription": "Control Hub doesn't obscure content while remaining always accessible..."
    },
    "phase3": {
      "title": "Phase 3: Development",
      "subtitle": "Interactive Debugging Workshops",
      "workshopTitle": "üîß Live Debugging Workshop",
      "galleryDemo": "Image Gallery - Demonstration",
      "componentCode": "Component Code",
      "aiDialogue": "ü§ñ AI Dialogue Example",
      "userRequest": "Generate ImageModal.tsx component. Must accept src and alt as props. Implement closing on background click and Escape key. Use React Portals to render in body.",
      "aiResponse": "Done. Component implemented using React Portals. Added event handling and focus trap for improved accessibility. Code is in",
      "generatedComment": "// ImageModal.tsx - Generated by AI"
    },
    "phase4": {
      "title": "Phase 4: Global Reach",
      "subtitle": "SEO and Multilingual Support",
      "translationModule": "üîÑ Live Translation Module",
      "testTranslations": "Test translation keys",
      "seoImplementation": "üîç SEO Implementation",
      "metaTags": "Dynamic Meta Tags",
      "jsonLD": "JSON-LD Schema",
      "metaComment": "// react-helmet-async implementation",
      "jsonComment": "// Structured data for search engines"
    },
    "phase5": {
      "title": "Phase 6: Grand Finale",
      "subtitle": "Deployment and Quality Proof",
      "qualityAssurance": "üß™ Quality Assurance",
      "testingDesc": "The project uses Vitest and React Testing Library to ensure the highest code quality. Every component is tested for functionality and accessibility.",
      "lighthouse": "üìä Lighthouse Results",
      "lighthouseDesc": "The site achieves excellent results in all Lighthouse categories, confirming high technical quality.",
      "deploymentTitle": "üöÄ Netlify Deployment",
      "deploymentDesc": "Automatic deployment from GitHub, resource optimization, CDN and SSL. Full CI/CD integration.",
      "finalThoughts": "üí≠ Summary",
      "conclusion": "AI Genesis is more than a website - it's living proof of the power of collaboration between humans and artificial intelligence. Every line of code, every design element was thoughtfully created to showcase the full potential of modern web development.",
      "deploymentProcess": "Deployment Process",
      "gitPush": "Code pushed to repository",
      "netlifyBuild": "Vite build + optimization",
      "functionsDeploy": "Serverless backend",
      "cdnDistribution": "Global distribution",
      "liveAt": "Live at: ai-genesis-tutorial.netlify.app",
      "lighthouseReport": "Lighthouse Report",
      "auditResults": "Quality Audit Results",
      "auditSubtitle": "Ultimate proof of technical mastery",
      "perfectScore": "üèÜ Perfect Score!",
      "perfectDesc": "Application meets the highest quality standards in every category",
      "keyMetrics": "üöÄ Key Metrics",
      "missionComplete": "üéØ Mission Complete",
      "finalDescription": "The AI Genesis project demonstrates the full potential of human-AI collaboration in creating modern web applications. From initial idea to production deployment - this is the future of development.",
      "contactCta": "üí¨ Contact Us",
      "restartCta": "üîÑ Start Over"
    }
  },
  "workshop": {
    "title": "Live Debugging Workshop",
    "galleryDemo": "Photo Gallery - Demo",
    "componentCode": "Component Code",
    "simulateBug": "üêõ Simulate Bug!",
    "fixBug": "‚úÖ Fix!",
    "copyCode": "Copy code",
    "codeCopied": "Code copied!",
    "codeDescription": "Code was copied to clipboard.",
    "error": "Error",
    "copyError": "Failed to copy code.",
    "mountainAlt": "Mountain landscape at sunrise",
    "oceanAlt": "Ocean waves during golden hour"
  },
  "translationDemo": {
    "title": "Live Translation Module",
    "testKeys": "Test translation keys"
  },
  "performance": {
    "title": "Performance Optimizations",
    "lazyLoading": "Lazy Loading",
    "lazyLoadingDesc": "Images and components",
    "imageOptimization": "Image Optimization",
    "imageOptDesc": ".avif + .webp formats",
    "codeSplitting": "Code Splitting",
    "codeSplittingDesc": "React.lazy + Suspense",
    "bundleAnalysis": "Bundle Analysis",
    "bundleAnalysisDesc": "Vite bundle analyzer"
  },
  "testing": {
    "phaseTitle": "Phase 5: Quality Assurance",
    "phaseSubtitle": "Professional Testing",
    "unitTestExample": "Unit Test Example",
    "testResults": "Test Results",
    "testResultsVitest": "Test Results - Vitest",
    "testingStack": "Testing Stack",
    "testRunner": "Test Runner:",
    "testingLibrary": "Testing Library:",
    "coverage": "Coverage:",
    "e2eTests": "E2E Tests:",
    "e2eTestsValue": "Playwright (coming soon)",
    "firstContentfulPaint": "First Contentful Paint",
    "largestContentfulPaint": "Largest Contentful Paint",
    "cumulativeLayoutShift": "Cumulative Layout Shift",
    "timeToInteractive": "Time to Interactive"
  },
  "translation": {
    "testKey": "Enter translation key:",
    "inputPlaceholder": "Enter translation key:",
    "languages": {
      "pl": "Polish",
      "en": "English",
      "ja": "Japanese"
    }
  },
  "creator": {
    "sectionTitle": "Project Creator",
    "sectionSubtitle": "Developer with Passion",
    "name": "Full Stack Overflow Developer",
    "description": "A technology enthusiast who combines creativity with technical precision. This AI Genesis project is an example of the symbiosis between human vision and artificial intelligence capabilities in creating modern web applications.",
    "selfTaughtButton": "Self-taught",
    "storyTitle": "Story of the Project's Originator",
    "storyText": "Behind this project stands a 69-year-old retiree who has been independently exploring the secrets of programming languages for 21 years, using books, educational videos, and internet resources. For the past two years, he has been supported by artificial intelligence both in building projects and in code analysis for bug removal. He can dedicate even 8-10 hours daily to his passion.\n\nHis story proves that anyone can learn programming at any age. What matters is not age, but desire, determination, and belief that you can break through your own limitations. The author started by creating a simple portfolio for his daughter - it was the first step that ignited true passion. Since then, he has completed over 120 websites, the vast majority in the last six years.\n\nThis project is not just another website. It's proof that perseverance, curiosity, and openness to new technologies can lead to extraordinary results. It's also inspiration for everyone who dreams of starting their coding journey - regardless of their age and life stage.\n\nBecause in the world of programming, the only limits are set by imagination.",
    "closeButton": "Close"
  },
  "contact": {
    "title": "Contact",
    "subtitle": "Ready for your own AI-assisted development project?",
    "name": "Full name",
    "email": "Email",
    "project": "Project type",
    "projectTypes": {
      "website": "Website",
      "webapp": "Web application",
      "ecommerce": "E-commerce",
      "tutorial": "Tutorial/Education",
      "other": "Other"
    },
    "message": "Project description",
    "submit": "Send inquiry"
  },
  "seo": {
    "title": "AI Genesis: Interactive Meta-Tutorial | Replit Development Masterclass",
    "description": "Groundbreaking interactive tutorial showing the complete project lifecycle - from idea to deployment using AI and modern technologies."
  },
  "termsPage": {
    "seoTitle": "Terms of Service | AI Genesis",
    "seoDescription": "Terms of Service for the AI Genesis interactive website.",
    "title": "Terms of Service",
    "content": "<h2>1. General Provisions</h2>\n\nThese terms and conditions outline the rules and regulations for the use of the AI Genesis website, located at [Your Website Address]. The website is educational and demonstrational in nature, showcasing the process of creating web applications with the support of artificial intelligence.\n\nBy accessing this website, we assume you accept these terms and conditions. Do not continue to use AI Genesis if you do not agree to all of the terms and conditions stated on this page.\n\n<h2>2. Copyright</h2>\n\nAll content, including texts, graphics, source code, and the interactive concept of the site, are the property of the project creator and are protected by law. Copying, modifying, and distributing the site's content without the author's written permission is prohibited. Code snippets presented for educational purposes may only be used within the bounds of fair personal use.\n\n<h2>3. Liability</h2>\n\nThe content presented on the AI Genesis website is for informational and demonstrational purposes only. The author shall not be held liable for any damages resulting from the use of information or tools presented on the site. You use the service at your own risk. We do not guarantee uninterrupted or error-free operation of the website."
  },
  "privacyPage": {
    "seoTitle": "Privacy Policy | AI Genesis",
    "seoDescription": "Privacy and cookie policy for the AI Genesis website.",
    "title": "Privacy Policy",
    "content": "<h2>1. Data Administrator</h2>\n\nThe administrator of personal data within the meaning of applicable regulations is the creator of the AI Genesis project. Any questions regarding data processing should be directed through the contact form.\n\n<h2>2. Data Collection and Processing</h2>\n\nAI Genesis respects the privacy of its users. We do not collect personal data automatically. The only place where a user can voluntarily provide their data (name, email address) is the contact form.\n\n\nThe provided data is used solely for the purpose of responding to the submitted inquiry. This data is not stored in a database, is not shared with third parties, and is not used for marketing purposes.\n\n<h2>3. Cookies</h2>\n\nThe website may use essential cookies to ensure the proper functioning of basic mechanisms, such as theme switching (light/dark) or language preferences. We do not use analytical or marketing cookies to track user activity."
  }
}

---------------------dobry-----------------------
{
  "hero": {
    "title": "AI „Ç∏„Çß„Éç„Ç∑„Çπ",
    "subtitle": "Replit „Åß„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà‰ΩúÊàê„ÅÆ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„É°„Çø„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´",
    "description": "„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÁô∫„Å´„Åä„Åë„Çã‰∫∫Èñì„ÅÆÂâµÈÄ†ÊÄß„Å®‰∫∫Â∑•Áü•ËÉΩ„ÅÆÂÖ±ÁîüÈñ¢‰øÇ„ÇíÁ§∫„ÅôÁîªÊúüÁöÑ„Åß„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÄÇ",
    "cta": "ÊóÖ„ÇíÂßã„ÇÅ„Çã"
  },
  "nav": {
    "iskra": "„Çπ„Éë„Éº„ÇØ",
    "fundamenty": "Âü∫Á§é",
    "innowacja": "UIÈù©Êñ∞",
    "development": "ÈñãÁô∫",
    "zasieg": "„Ç∞„É≠„Éº„Éê„É´Â±ïÈñã",
    "deployment": "„Éá„Éó„É≠„Ç§„É°„É≥„Éà",
    "contact": "„Ç≥„É≥„Çø„ÇØ„Éà"
  },
  "legalNav": {
    "terms": "Âà©Áî®Ë¶èÁ¥Ñ",
    "privacy": "„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº",
    "backToHome": "„Éõ„Éº„É†„Éö„Éº„Ç∏„Å´Êàª„Çã"
  },
  "accessibility": {
    "toggleOff": "„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£",
    "toggleOn": "ÈÄöÂ∏∏Ë°®Á§∫"
  },
  "theme": {
    "lightMode": "„É©„Ç§„Éà„É¢„Éº„Éâ",
    "darkMode": "„ÉÄ„Éº„ÇØ„É¢„Éº„Éâ"
  },
  "phases": {
    "phaseCount": "6„Å§„ÅÆÈñãÁô∫„Éï„Çß„Éº„Ç∫",
    "phase0": {
      "title": "„Éï„Çß„Éº„Ç∫ 0: ÁÅ´Ëä±",
      "subtitle": "„Ç¢„Ç§„Éá„Ç¢„Å®AI„Éñ„É™„Éº„Éï",
      "rawIdeaTitle": "„É¶„Éº„Ç∂„Éº„ÅÆÁîü„ÅÆ„Ç¢„Ç§„Éá„Ç¢",
      "noteComment": "// „Éä„Éó„Ç≠„É≥„É°„É¢",
      "userNote": "AI„Åå„Ç¶„Çß„Éñ„Çµ„Ç§„Éà‰ΩúÊàê„Çí„Å©„ÅÜÊîØÊè¥„Åô„Çã„Åã„ÇíÁ§∫„Åô„Çµ„Ç§„Éà„ÅåÊ¨≤„Åó„ÅÑ...„É°„ÇøÔºÅ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å´„Åó„Å¶„ÄÅ„Ç≥„Éº„Éâ‰æã„ÇÇ„ÄÅ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„ÇÇÔºü„Éó„É≠„Çª„ÇπÂÖ®‰Ωì„ÇíË¶ã„Åõ„Å¶ - „Ç¢„Ç§„Éá„Ç¢„Åã„Çâ„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Åæ„Åß„ÄÇ",
      "aiInterpretation": "AIËß£Èáà",
      "aiDescription": "„Åì„ÅÆÁ∞°Âçò„Å™Ë™¨Êòé„Åã„Çâ„ÄÅAI„ÅØÂåÖÊã¨ÁöÑ„Å™ÊäÄË°ì‰ªïÊßò„ÇíÁîüÊàê„Åó„Åæ„Åó„ÅüÔºö„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™Áâ©Ë™û„ÄÅÈù©Êñ∞ÁöÑ„Å™„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„Éñ„ÄÅ„Éá„Éê„ÉÉ„Ç∞„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó„ÄÅÁøªË®≥„É¢„Ç∏„É•„Éº„É´„ÄÅ„ÉÜ„Çπ„Éà‰ªò„ÅçÂÆåÂÖ®ÂÆüË£Ö„ÄÇ",
      "terminalTitle": "AIÂá¶ÁêÜ„Çø„Éº„Éü„Éä„É´",
      "analyzing": "„É¶„Éº„Ç∂„Éº„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂàÜÊûê‰∏≠...",
      "generating": "ÊäÄË°ì‰ªïÊßò„ÇíÁîüÊàê‰∏≠...",
      "planning": "„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÇíË®àÁîª‰∏≠...",
      "designing": "„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„Éë„Çø„Éº„É≥„ÇíË®≠Ë®à‰∏≠...",
      "complete": "‚úì ‰ªïÊßòÂÆåÊàêÔºÅ"
    },
    "phase1": {
      "title": "„Éï„Çß„Éº„Ç∫ 1: Âü∫Á§é",
      "subtitle": "„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Å®„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£",
      "projectStructure": "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†",
      "techStack": "ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ",
      "typeScriptDesc": "„Çø„Ç§„Éó„Çª„Éº„Éï„ÉÜ„Ç£„ÄÅÈ´òÈÄüÈñãÁô∫„ÄÅÊúÄÈÅ©„Éê„É≥„Éâ„É™„É≥„Ç∞„Çí‰øùË®º„Åô„Çã„É¢„ÉÄ„É≥„Çπ„Çø„ÉÉ„ÇØ„ÄÇ",
      "tailwindDesc": "„É¢„ÉÄ„É≥UX„ÅÆ„Åü„ÇÅ„ÅÆ„Çπ„É†„Éº„Ç∫„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„Åç„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„Éï„Ç°„Éº„Çπ„ÉàCSS„ÄÇ",
      "netlifyDesc": "ÂìÅË≥™‰øùË®º„ÅÆ„Åü„ÇÅ„ÅÆVitest„Å®React Testing Library„Çí‰ΩøÁî®„Åó„Åü„Çµ„Éº„Éê„Éº„É¨„Çπ„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÄÇ",
      "aiJustification": "AIÊ≠£ÂΩìÂåñ",
      "stackReasoning": "TypeScript„ÅåÂãïÁöÑÁí∞Â¢É„Åß„Çø„Ç§„Éó„Çª„Éº„Éï„ÉÜ„Ç£„Çí‰øùË®º„Åó„ÄÅVite„ÅåÊúÄÈÄü„ÅÆ„Éõ„ÉÉ„Éà„É™„É≠„Éº„Éâ„ÇíÊèê‰æõ„Åó„ÄÅTailwindCSS„Åå„Éá„Ç∂„Ç§„É≥„ÅÆÂ¶•Âçî„Å™„Åó„Å´ËøÖÈÄü„Å™„Éó„É≠„Éà„Çø„Ç§„Éî„É≥„Ç∞„ÇíÂèØËÉΩ„Å´„Åô„Çã„Åü„ÇÅ„ÄÅ„Åì„ÅÆ„Çπ„Çø„ÉÉ„ÇØ„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü„ÄÇ"
    },
    "phase2": {
      "title": "„Éï„Çß„Éº„Ç∫ 2: UIÈù©Êñ∞",
      "subtitle": "„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„Éñ„ÅÆË™ïÁîü",
      "designDecision": "„Éá„Ç∂„Ç§„É≥Ê±∫ÂÆö",
      "designReasoning": "ÂæìÊù•„ÅÆ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Éê„Éº„ÅØÁâ©Ë™û„Éö„Éº„Ç∏„Å´„ÅØÈùûÂäπÁéáÁöÑ„Åß„Åô„ÄÇ„Çµ„Ç§„Éâ„ÅÆ'„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„Éñ'„ÅØ„ÄÅ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÈö†„Åô„Åì„Å®„Å™„Åè„ÄÅ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å®„ÉÑ„Éº„É´„ÇíÂ∏∏„Å´Êâã„ÅÆÂ±ä„Åè„Å®„Åì„Çç„Å´ÁΩÆ„Åç„Åæ„Åô„ÄÇIDE„Å®ÈñãÁô∫ËÄÖ„ÉÑ„Éº„É´„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Åã„Çâ„Ç§„É≥„Çπ„Éî„É¨„Éº„Ç∑„Éß„É≥„ÇíÂæó„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
      "hubFeatures": "„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„ÉñÊ©üËÉΩ",
      "navFeature": "„Çπ„É†„Éº„Çπ„Çπ„ÇØ„É≠„Éº„É´‰ªò„Åç„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥",
      "navDesc": "„Ç¢„Ç§„Ç≥„É≥„Éõ„Éê„ÉºÊôÇ„ÅÆ„ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó‰ªò„Åç„Çπ„É†„Éº„Çπ„Çπ„ÇØ„É≠„Éº„É´„ÄÇ",
      "langFeature": "Ë®ÄË™ûÂàáÊõøÔºàPL/EN/JPÔºâ",
      "langDesc": "react-i18next„Å´„Çà„ÇãÂãïÁöÑË®ÄË™ûÂàáÊõø„ÄÇ",
      "themeFeature": "„ÉÄ„Éº„ÇØ/„É©„Ç§„Éà„É¢„Éº„Éâ",
      "themeDesc": "localStorage„Å´„Çà„Çã„ÉÜ„Éº„ÉûÈñì„ÅÆ„Çπ„É†„Éº„Ç∫ÈÅ∑Áßª„ÄÇ",
      "a11yFeature": "„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Ç™„Éó„Ç∑„Éß„É≥",
      "a11yDesc": "È´ò„Ç≥„É≥„Éà„É©„Çπ„Éà„ÄÅ„Éï„Ç©„Éº„Ç´„ÇπÁÆ°ÁêÜ„ÄÅARIA„É©„Éô„É´„ÄÇ",
      "demoTitle": "„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥",
      "mainContent": "„É°„Ç§„É≥„Éö„Éº„Ç∏„Ç≥„É≥„ÉÜ„É≥„ÉÑ",
      "hubDescription": "„Ç≥„É≥„Éà„É≠„Éº„É´„Éè„Éñ„ÅØÂ∏∏„Å´„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ„Åß„ÅÇ„Çä„Å™„Åå„Çâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÈö†„Åó„Åæ„Åõ„Çì..."
    },
    "phase3": {
      "title": "„Éï„Çß„Éº„Ç∫ 3: ÈñãÁô∫",
      "subtitle": "„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éá„Éê„ÉÉ„Ç∞„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó",
      "workshopTitle": "üîß „É©„Ç§„Éñ„Éá„Éê„ÉÉ„Ç∞„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó",
      "galleryDemo": "ÁîªÂÉè„ÇÆ„É£„É©„É™„Éº - „Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥",
      "componentCode": "„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç≥„Éº„Éâ",
      "aiDialogue": "ü§ñ AIÂØæË©±‰æã",
      "userRequest": "ImageModal.tsx„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇsrc„Å®alt„Çíprops„Å®„Åó„Å¶Âèó„ÅëÂèñ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇËÉåÊôØ„ÇØ„É™„ÉÉ„ÇØ„Å®Escape„Ç≠„Éº„Åß„ÅÆÈñâ„Åò„ÇãÊ©üËÉΩ„ÇíÂÆüË£Ö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇReact Portals„Çí‰ΩøÁî®„Åó„Å¶body„Å´„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
      "aiResponse": "ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇReact Portals„Çí‰ΩøÁî®„Åó„Å¶„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÂÆüË£Ö„Åó„Åæ„Åó„Åü„ÄÇ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Âêë‰∏ä„ÅÆ„Åü„ÇÅ„Ç§„Éô„É≥„ÉàÂá¶ÁêÜ„Å®„Éï„Ç©„Éº„Ç´„Çπ„Éà„É©„ÉÉ„Éó„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü„ÄÇ„Ç≥„Éº„Éâ„ÅØ",
      "generatedComment": "// ImageModal.tsx - AI„Å´„Çà„Å£„Å¶ÁîüÊàê"
    },
    "phase4": {
      "title": "„Éï„Çß„Éº„Ç∫ 4: „Ç∞„É≠„Éº„Éê„É´„É™„Éº„ÉÅ",
      "subtitle": "SEO„Å®Â§öË®ÄË™û„Çµ„Éù„Éº„Éà",
      "translationModule": "üîÑ „É©„Ç§„ÉñÁøªË®≥„É¢„Ç∏„É•„Éº„É´",
      "testTranslations": "ÁøªË®≥„Ç≠„Éº„Çí„ÉÜ„Çπ„Éà",
      "seoImplementation": "üîç SEOÂÆüË£Ö",
      "metaTags": "ÂãïÁöÑ„É°„Çø„Çø„Ç∞",
      "jsonLD": "JSON-LD„Çπ„Ç≠„Éº„Éû",
      "metaComment": "// react-helmet-asyncÂÆüË£Ö",
      "jsonComment": "// Ê§úÁ¥¢„Ç®„É≥„Ç∏„É≥Áî®„ÅÆÊßãÈÄ†Âåñ„Éá„Éº„Çø"
    },
    "phase5": {
      "title": "„Éï„Çß„Éº„Ç∫ 6: „Ç∞„É©„É≥„Éâ„Éï„Ç£„Éä„Éº„É¨",
      "subtitle": "„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Å®ÂìÅË≥™Ë®ºÊòé",
      "qualityAssurance": "üß™ ÂìÅË≥™‰øùË®º",
      "testingDesc": "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØÊúÄÈ´ò„ÅÆ„Ç≥„Éº„ÉâÂìÅË≥™„Çí‰øùË®º„Åô„Çã„Åü„ÇÅVitest„Å®React Testing Library„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÊ©üËÉΩÊÄß„Å®„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Å´„Å§„ÅÑ„Å¶„ÉÜ„Çπ„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
      "lighthouse": "üìä LighthouseÁµêÊûú",
      "lighthouseDesc": "„Çµ„Ç§„Éà„ÅØ„Åô„Åπ„Å¶„ÅÆLighthouse„Ç´„ÉÜ„Ç¥„É™„ÅßÂÑ™ÁßÄ„Å™ÁµêÊûú„ÇíÈÅîÊàê„Åó„ÄÅÈ´ò„ÅÑÊäÄË°ìÂìÅË≥™„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
      "deploymentTitle": "üöÄ Netlify„Éá„Éó„É≠„Ç§„É°„É≥„Éà",
      "deploymentDesc": "GitHub„Åã„Çâ„ÅÆËá™Âãï„Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÄÅ„É™„ÇΩ„Éº„ÇπÊúÄÈÅ©Âåñ„ÄÅCDN„Å®SSL„ÄÇÂÆåÂÖ®„Å™CI/CDÁµ±Âêà„ÄÇ",
      "finalThoughts": "üí≠ „Åæ„Å®„ÇÅ",
      "conclusion": "AI Genesis„ÅØ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà‰ª•‰∏ä„ÅÆ„ÇÇ„ÅÆ - ‰∫∫Èñì„Å®‰∫∫Â∑•Áü•ËÉΩ„ÅÆÂçîÂäõ„ÅÆÂäõ„ÅÆÁîü„Åç„ÅüË®ºÊã†„Åß„Åô„ÄÇ„Åô„Åπ„Å¶„ÅÆ„Ç≥„Éº„ÉâË°å„ÄÅ„Åô„Åπ„Å¶„ÅÆ„Éá„Ç∂„Ç§„É≥Ë¶ÅÁ¥†„ÅØ„ÄÅ„É¢„ÉÄ„É≥„Ç¶„Çß„ÉñÈñãÁô∫„ÅÆÂÆåÂÖ®„Å™ÂèØËÉΩÊÄß„ÇíÁ§∫„Åô„Åü„ÇÅ„Å´ÊÄùÊÖÆÊ∑±„Åè‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇ",
      "deploymentProcess": "„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Éó„É≠„Çª„Çπ",
      "gitPush": "„É™„Éù„Ç∏„Éà„É™„Å´„Ç≥„Éº„Éâ„Çí„Éó„ÉÉ„Ç∑„É•",
      "netlifyBuild": "Vite„Éì„É´„Éâ + ÊúÄÈÅ©Âåñ",
      "functionsDeploy": "„Çµ„Éº„Éê„Éº„É¨„Çπ„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ",
      "cdnDistribution": "„Ç∞„É≠„Éº„Éê„É´ÈÖç‰ø°",
      "liveAt": "„É©„Ç§„Éñ: ai-genesis-tutorial.netlify.app",
      "lighthouseReport": "Lighthouse„É¨„Éù„Éº„Éà",
      "auditResults": "ÂìÅË≥™Áõ£ÊüªÁµêÊûú",
      "auditSubtitle": "ÊäÄË°ìÁöÑÂçíÊ•≠„ÅÆÁ©∂Ê•µ„ÅÆË®ºÊòé",
      "perfectScore": "üèÜ „Éë„Éº„Éï„Çß„ÇØ„Éà„Çπ„Ç≥„Ç¢ÔºÅ",
      "perfectDesc": "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØ„Åô„Åπ„Å¶„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÅßÊúÄÈ´ò„ÅÆÂìÅË≥™Âü∫Ê∫ñ„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„Åô",
      "keyMetrics": "üöÄ „Ç≠„Éº„É°„Éà„É™„ÉÉ„ÇØ„Çπ",
      "missionComplete": "üéØ „Éü„ÉÉ„Ç∑„Éß„É≥„Ç≥„É≥„Éó„É™„Éº„Éà",
      "finalDescription": "AI Genesis„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØ„ÄÅ„É¢„ÉÄ„É≥„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ‰ΩúÊàê„Å´„Åä„Åë„Çã‰∫∫Èñì„Å®AI„ÅÆÂçîÂäõ„ÅÆÂÆåÂÖ®„Å™ÂèØËÉΩÊÄß„ÇíÂÆüË®º„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÂàùÊúü„Ç¢„Ç§„Éá„Ç¢„Åã„ÇâÊú¨Áï™„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Åæ„Åß - „Åì„Çå„ÅåÈñãÁô∫„ÅÆÊú™Êù•„Åß„Åô„ÄÇ",
      "contactCta": "üí¨ „ÅäÂïè„ÅÑÂêà„Çè„Åõ",
      "restartCta": "üîÑ ÊúÄÂàù„Åã„Çâ"
    }
  },
  "workshop": {
    "title": "„É©„Ç§„Éñ„Éá„Éê„ÉÉ„Ç∞„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó",
    "galleryDemo": "ÂÜôÁúü„ÇÆ„É£„É©„É™„Éº - „Éá„É¢",
    "componentCode": "„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç≥„Éº„Éâ",
    "simulateBug": "üêõ „Éê„Ç∞„Çí„Ç∑„Éü„É•„É¨„Éº„ÉàÔºÅ",
    "fixBug": "‚úÖ ‰øÆÊ≠£ÔºÅ",
    "copyCode": "„Ç≥„Éº„Éâ„Çí„Ç≥„Éî„Éº",
    "codeCopied": "„Ç≥„Éº„Éâ„Åå„Ç≥„Éî„Éº„Åï„Çå„Åæ„Åó„ÅüÔºÅ",
    "codeDescription": "„Ç≥„Éº„Éâ„Åå„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åï„Çå„Åæ„Åó„Åü„ÄÇ",
    "error": "„Ç®„É©„Éº",
    "copyError": "„Ç≥„Éº„Éâ„ÅÆ„Ç≥„Éî„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ",
    "mountainAlt": "Êó•„ÅÆÂá∫„ÅÆÂ±±„ÅÆÊôØËâ≤",
    "oceanAlt": "„Ç¥„Éº„É´„Éá„É≥„Ç¢„ÉØ„Éº„ÅÆÊµ∑„ÅÆÊ≥¢"
  },
  "translationDemo": {
    "title": "„É©„Ç§„ÉñÁøªË®≥„É¢„Ç∏„É•„Éº„É´",
    "testKeys": "ÁøªË®≥„Ç≠„Éº„Çí„ÉÜ„Çπ„Éà"
  },
  "performance": {
    "title": "„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ",
    "lazyLoading": "„É¨„Ç§„Ç∏„Éº„É≠„Éº„Éá„Ç£„É≥„Ç∞",
    "lazyLoadingDesc": "ÁîªÂÉè„Å®„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà",
    "imageOptimization": "ÁîªÂÉèÊúÄÈÅ©Âåñ",
    "imageOptDesc": ".avif + .webp„Éï„Ç©„Éº„Éû„ÉÉ„Éà",
    "codeSplitting": "„Ç≥„Éº„ÉâÂàÜÂâ≤",
    "codeSplittingDesc": "React.lazy + Suspense",
    "bundleAnalysis": "„Éê„É≥„Éâ„É´ÂàÜÊûê",
    "bundleAnalysisDesc": "Vite„Éê„É≥„Éâ„É´„Ç¢„Éä„É©„Ç§„Ç∂„Éº"
  },
  "testing": {
    "phaseTitle": "„Éï„Çß„Éº„Ç∫ 5: ÂìÅË≥™‰øùË®º",
    "phaseSubtitle": "„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„ÉÜ„Çπ„Éà",
    "unitTestExample": "Âçò‰Ωì„ÉÜ„Çπ„Éà‰æã",
    "testResults": "„ÉÜ„Çπ„ÉàÁµêÊûú",
    "testResultsVitest": "„ÉÜ„Çπ„ÉàÁµêÊûú - Vitest",
    "testingStack": "„ÉÜ„Çπ„Éà„Çπ„Çø„ÉÉ„ÇØ",
    "testRunner": "„ÉÜ„Çπ„Éà„É©„É≥„Éä„Éº:",
    "testingLibrary": "„ÉÜ„Çπ„Éà„É©„Ç§„Éñ„É©„É™:",
    "coverage": "„Ç´„Éê„É¨„ÉÉ„Ç∏:",
    "e2eTests": "E2E„ÉÜ„Çπ„Éà:",
    "e2eTestsValue": "Playwright (ËøëÊó•ÂÖ¨Èñã)",
    "firstContentfulPaint": "ÂàùÂõû„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Éï„É´„Éö„Ç§„É≥„Éà",
    "largestContentfulPaint": "ÊúÄÂ§ß„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Éï„É´„Éö„Ç§„É≥„Éà",
    "cumulativeLayoutShift": "Á¥ØÁ©ç„É¨„Ç§„Ç¢„Ç¶„Éà„Ç∑„Éï„Éà",
    "timeToInteractive": "„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñÊôÇÈñì"
  },
  "translation": {
    "testKey": "ÁøªË®≥„Ç≠„Éº„ÇíÂÖ•ÂäõÔºö",
    "inputPlaceholder": "ÁøªË®≥„Ç≠„Éº„ÇíÂÖ•Âäõ:",
    "languages": {
      "pl": "„Éù„Éº„É©„É≥„ÉâË™û",
      "en": "Ëã±Ë™û",
      "ja": "Êó•Êú¨Ë™û"
    }
  },
  "creator": {
    "sectionTitle": "„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàêËÄÖ",
    "sectionSubtitle": "ÊÉÖÁÜ±ÁöÑ„Å™ÈñãÁô∫ËÄÖ",
    "name": "„Éï„É´„Çπ„Çø„ÉÉ„ÇØ„Ç™„Éº„Éê„Éº„Éï„É≠„ÉºÈñãÁô∫ËÄÖ",
    "description": "ÂâµÈÄ†ÊÄß„Å®ÊäÄË°ìÁöÑÁ≤æÂ∫¶„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„ÅüÊäÄË°ìÊÑõÂ•ΩËÄÖ„ÄÇ„Åì„ÅÆAI Genesis„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØ„ÄÅÁèæ‰ª£„ÅÆWeb„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥‰ΩúÊàê„Å´„Åä„Åë„Çã‰∫∫Èñì„ÅÆ„Éì„Ç∏„Éß„É≥„Å®‰∫∫Â∑•Áü•ËÉΩ„ÅÆËÉΩÂäõ„ÅÆÂÖ±Áîü„ÅÆ‰æã„Åß„Åô„ÄÇ",
    "selfTaughtButton": "Áã¨Â≠¶",
    "storyTitle": "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁô∫Ê°àËÄÖ„ÅÆÁâ©Ë™û",
    "storyText": "„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆËÉåÂæå„Å´„ÅØ69Ê≠≥„ÅÆÈÄÄËÅ∑ËÄÖ„Åå„ÅÑ„Åæ„Åô„ÄÇÂΩº„ÅØ21Âπ¥Èñì„ÄÅÊõ∏Á±ç„ÄÅÊïôËÇ≤„Éì„Éá„Ç™„ÄÅ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„Éà„É™„ÇΩ„Éº„Çπ„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÁã¨Á´ã„Åó„Å¶„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„ÅÆÁßòÂØÜ„ÇíÊé¢Ê±Ç„Åó„Å¶„Åç„Åæ„Åó„Åü„ÄÇÈÅéÂéª2Âπ¥Èñì„ÅØ„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊßãÁØâ„Å®„Éê„Ç∞Èô§Âéª„ÅÆ„Åü„ÇÅ„ÅÆ„Ç≥„Éº„ÉâÂàÜÊûê„ÅÆ‰∏°Êñπ„Åß‰∫∫Â∑•Áü•ËÉΩ„Å´ÊîØÊè¥„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÂΩº„ÅØÊØéÊó•8-10ÊôÇÈñì„ÇíÊÉÖÁÜ±„Å´Êçß„Åí„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\n\nÂΩº„ÅÆÁâ©Ë™û„ÅØ„ÄÅË™∞„Åß„ÇÇ„Å©„Çì„Å™Âπ¥ÈΩ¢„Åß„ÇÇ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÇíÂ≠¶„Å∂„Åì„Å®„Åå„Åß„Åç„Çã„Åì„Å®„ÇíË®ºÊòé„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÈáçË¶Å„Å™„ÅÆ„ÅØÂπ¥ÈΩ¢„Åß„ÅØ„Å™„Åè„ÄÅÊ¨≤Êúõ„ÄÅÊ±∫ÊÑè„ÄÅ„Åù„Åó„Å¶Ëá™ÂàÜ„ÅÆÈôêÁïå„ÇíÁ™ÅÁ†¥„Åß„Åç„Çã„Å®„ÅÑ„ÅÜ‰ø°Âøµ„Åß„Åô„ÄÇ‰ΩúËÄÖ„ÅØÂ®ò„ÅÆ„Ç∑„É≥„Éó„É´„Å™„Éù„Éº„Éà„Éï„Ç©„É™„Ç™„Çí‰ΩúÊàê„Åô„Çã„Åì„Å®„Åã„ÇâÂßã„ÇÅ„Åæ„Åó„Åü - „Åù„Çå„ÅåÁúü„ÅÆÊÉÖÁÜ±„Å´ÁÅ´„Çí„Å§„Åë„ÅüÊúÄÂàù„ÅÆ‰∏ÄÊ≠©„Åß„Åó„Åü„ÄÇ„Åù„Çå‰ª•Êù•„ÄÅÂΩº„ÅØ120‰ª•‰∏ä„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÇíÂÆåÊàê„Åï„Åõ„ÄÅ„Åù„ÅÆÂúßÂÄíÁöÑÂ§ßÂ§öÊï∞„ÅØÈÅéÂéª6Âπ¥Èñì„Åß‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü„ÄÇ\n\n„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØÂçò„Å™„ÇãÂà•„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åù„Çå„ÅØÂøçËÄêÂäõ„ÄÅÂ•ΩÂ•áÂøÉ„ÄÅÊñ∞„Åó„ÅÑÊäÄË°ì„Å∏„ÅÆÈñãÊîæÊÄß„Åå‰∏¶Â§ñ„Çå„ÅüÁµêÊûú„Å´„Å§„Å™„Åå„Çã„Åì„Å®„ÅÆË®ºÊòé„Åß„Åô„ÄÇ„Åù„Çå„ÅØ„Åæ„Åü„ÄÅÂπ¥ÈΩ¢„ÇÑ‰∫∫Áîü„ÅÆÊÆµÈöé„Å´Èñ¢‰øÇ„Å™„Åè„ÄÅ„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÅÆÊóÖ„ÇíÂßã„ÇÅ„Çã„Åì„Å®„ÇíÂ§¢Ë¶ã„Çã„Åô„Åπ„Å¶„ÅÆ‰∫∫„Å∏„ÅÆ „Ç§„É≥„Çπ„Éî„É¨„Éº„Ç∑„Éß„É≥„Åß„ÇÇ„ÅÇ„Çä„Åæ„Åô„ÄÇ\n\n„Å™„Åú„Å™„Çâ„ÄÅ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÅÆ‰∏ñÁïå„Åß„ÅØ„ÄÅÊÉ≥ÂÉèÂäõ„Å†„Åë„ÅåÈôêÁïå„ÇíË®≠ÂÆö„Åô„Çã„Åã„Çâ„Åß„Åô„ÄÇ",
    "closeButton": "Èñâ„Åò„Çã"
  },
  "contact": {
    "title": "„ÅäÂïè„ÅÑÂêà„Çè„Åõ",
    "subtitle": "AIÊîØÊè¥ÈñãÁô∫„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊ∫ñÂÇô„ÅØ„Åß„Åç„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü",
    "name": "Ê∞èÂêç",
    "email": "„É°„Éº„É´",
    "project": "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çø„Ç§„Éó",
    "projectTypes": {
      "website": "„Ç¶„Çß„Éñ„Çµ„Ç§„Éà",
      "webapp": "„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥",
      "ecommerce": "E„Ç≥„Éû„Éº„Çπ",
      "tutorial": "„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´/ÊïôËÇ≤",
      "other": "„Åù„ÅÆ‰ªñ"
    },
    "message": "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶Å",
    "submit": "„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÇíÈÄÅ‰ø°"
  },
  "seo": {
    "title": "AI „Ç∏„Çß„Éç„Ç∑„Çπ: „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„É°„Çø„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´ | Replit ÈñãÁô∫„Éû„Çπ„Çø„Éº„ÇØ„É©„Çπ",
    "description": "AI„Å®Áèæ‰ª£ÊäÄË°ì„Çí‰ΩøÁî®„Åó„Åü„Ç¢„Ç§„Éá„Ç¢„Åã„Çâ„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Åæ„Åß„ÅÆÂÆåÂÖ®„Å™„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´„ÇíÁ§∫„ÅôÁîªÊúüÁöÑ„Å™„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„ÄÇ"
  },
  "termsPage": {
    "seoTitle": "Âà©Áî®Ë¶èÁ¥Ñ | AI Genesis",
    "seoDescription": "AI Genesis„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅÆÂà©Áî®Ë¶èÁ¥Ñ„ÄÇ",
    "title": "Âà©Áî®Ë¶èÁ¥Ñ",
    "content": "<h2>1. Á∑èÂâá</h2>\n\nÊú¨Ë¶èÁ¥Ñ„ÅØ„ÄÅ[„ÅÇ„Å™„Åü„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„Ç¢„Éâ„É¨„Çπ]„ÅßÂà©Áî®ÂèØËÉΩ„Å™AI Genesis„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅÆÂà©Áî®„Å´Èñ¢„Åô„ÇãË¶èÂâá„ÇíÂÆö„ÇÅ„Åæ„Åô„ÄÇ„Åì„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅØÊïôËÇ≤„Åä„Çà„Å≥„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„ÇíÁõÆÁöÑ„Å®„Åó„Å¶„Åä„Çä„ÄÅ‰∫∫Â∑•Áü•ËÉΩ„ÅÆÊîØÊè¥„ÇíÂèó„Åë„Åü„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ‰ΩúÊàê„Éó„É≠„Çª„Çπ„ÇíÁ¥π‰ªã„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n\n„Åì„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„Å´„Ç¢„ÇØ„Çª„Çπ„Åô„Çã„Åì„Å®„Å´„Çà„Çä„ÄÅ„Åì„Çå„Çâ„ÅÆÂà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Åü„ÇÇ„ÅÆ„Å®„Åø„Å™„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆ„Éö„Éº„Ç∏„Å´Ë®òËºâ„Åï„Çå„Å¶„ÅÑ„Çã„Åô„Åπ„Å¶„ÅÆÂà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅAI Genesis„ÅÆÂà©Áî®„Çí‰∏≠Ê≠¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n<h2>2. Ëëó‰ΩúÊ®©</h2>\n\n„ÉÜ„Ç≠„Çπ„Éà„ÄÅ„Ç∞„É©„Éï„Ç£„ÉÉ„ÇØ„ÄÅ„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„ÄÅ„Åä„Çà„Å≥„Çµ„Ç§„Éà„ÅÆ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç≥„É≥„Çª„Éó„Éà„ÇíÂê´„ÇÄ„Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØ„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàêËÄÖ„ÅÆÊâÄÊúâÁâ©„Åß„ÅÇ„Çä„ÄÅÊ≥ïÂæã„Å´„Çà„Å£„Å¶‰øùË≠∑„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇËëóËÄÖ„ÅÆÊõ∏Èù¢„Å´„Çà„ÇãË®±ÂèØ„Å™„Åè„ÄÅ„Çµ„Ç§„Éà„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí„Ç≥„Éî„Éº„ÄÅÂ§âÊõ¥„ÄÅÈÖçÂ∏É„Åô„Çã„Åì„Å®„ÅØÁ¶Å„Åò„Çâ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÊïôËÇ≤ÁõÆÁöÑ„ÅßÊèêÁ§∫„Åï„Çå„Çã„Ç≥„Éº„Éâ„Çπ„Éã„Éö„ÉÉ„Éà„ÅØ„ÄÅÂÄã‰∫∫ÁöÑ„Å™ÂÖ¨Ê≠£Âà©Áî®„ÅÆÁØÑÂõ≤ÂÜÖ„Åß„ÅÆ„Åø‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ\n\n<h2>3. Ë≤¨‰ªª</h2>\n\nAI Genesis„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅßÊèêÁ§∫„Åï„Çå„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØ„ÄÅÊÉÖÂ†±Êèê‰æõ„Åä„Çà„Å≥„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„ÅÆ„Åø„ÇíÁõÆÁöÑ„Å®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Çµ„Ç§„Éà„ÅßÊèêÁ§∫„Åï„Çå„ÅüÊÉÖÂ†±„ÇÑ„ÉÑ„Éº„É´„ÅÆ‰ΩøÁî®„Å´Ëµ∑Âõ†„Åô„Çã„ÅÑ„Åã„Å™„ÇãÊêçÂÆ≥„Å´„Å§„ÅÑ„Å¶„ÇÇ„ÄÅËëóËÄÖ„ÅØË≤¨‰ªª„ÇíË≤†„ÅÑ„Åæ„Åõ„Çì„ÄÇÂà©Áî®ËÄÖ„ÅØËá™Â∑±„ÅÆË≤¨‰ªª„Å´„Åä„ÅÑ„Å¶Êú¨„Çµ„Éº„Éì„Çπ„ÇíÂà©Áî®„Åô„Çã„ÇÇ„ÅÆ„Å®„Åó„Åæ„Åô„ÄÇÊàë„ÄÖ„ÅØ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅÆ‰∏≠Êñ≠„ÅÆ„Å™„ÅÑ„ÄÅ„Åæ„Åü„ÅØ„Ç®„É©„Éº„ÅÆ„Å™„ÅÑÈÅãÁî®„Çí‰øùË®º„Åó„Åæ„Åõ„Çì„ÄÇ"
  },
  "privacyPage": {
    "seoTitle": "„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº | AI Genesis",
    "seoDescription": "AI Genesis„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅÆ„Éó„É©„Ç§„Éê„Ç∑„Éº„Åä„Çà„Å≥„ÇØ„ÉÉ„Ç≠„Éº„Éù„É™„Ç∑„Éº„ÄÇ",
    "title": "„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº",
    "content": "<h2>1. „Éá„Éº„ÇøÁÆ°ÁêÜËÄÖ</h2>\n\nÈÅ©Áî®„Åï„Çå„ÇãË¶èÂà∂„ÅÆÊÑèÂë≥„Å´„Åä„Åë„ÇãÂÄã‰∫∫„Éá„Éº„Çø„ÅÆÁÆ°ÁêÜËÄÖ„ÅØ„ÄÅAI Genesis„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ‰ΩúÊàêËÄÖ„Åß„Åô„ÄÇ„Éá„Éº„ÇøÂá¶ÁêÜ„Å´Èñ¢„Åô„Çã„ÅîË≥™Âïè„ÅØ„ÄÅ„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„Åã„Çâ„ÅîÈÄ£Áµ°„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n<h2>2. „Éá„Éº„Çø„ÅÆÂèéÈõÜ„Å®Âá¶ÁêÜ</h2>\n\nAI Genesis„ÅØÂà©Áî®ËÄÖ„ÅÆ„Éó„É©„Ç§„Éê„Ç∑„Éº„ÇíÂ∞äÈáç„Åó„Åæ„Åô„ÄÇÊàë„ÄÖ„ÅØËá™ÂãïÁöÑ„Å´ÂÄã‰∫∫„Éá„Éº„Çø„ÇíÂèéÈõÜ„Åô„Çã„Åì„Å®„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÂà©Áî®ËÄÖ„ÅåËá™Áô∫ÁöÑ„Å´„Éá„Éº„ÇøÔºàÂêçÂâç„ÄÅ„É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÔºâ„ÇíÊèê‰æõ„Åß„Åç„ÇãÂîØ‰∏Ä„ÅÆÂ†¥ÊâÄ„ÅØ„ÄÅ„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„Åß„Åô„ÄÇ\n\nÊèê‰æõ„Åï„Çå„Åü„Éá„Éº„Çø„ÅØ„ÄÅÈÄÅ‰ø°„Åï„Çå„Åü„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Å´Ëøî‰ø°„Åô„ÇãÁõÆÁöÑ„Åß„ÅÆ„Åø‰ΩøÁî®„Åï„Çå„Åæ„Åô„ÄÇ„Åì„ÅÆ„Éá„Éº„Çø„ÅØ„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò„Åï„Çå„Åö„ÄÅÁ¨¨‰∏âËÄÖ„Å®ÂÖ±Êúâ„Åï„Çå„Çã„Åì„Å®„ÇÇ„ÄÅ„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞ÁõÆÁöÑ„Åß‰ΩøÁî®„Åï„Çå„Çã„Åì„Å®„ÇÇ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ\n\n<h2>3. „ÇØ„ÉÉ„Ç≠„Éº</h2>\n\nÂΩì„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅØ„ÄÅ„ÉÜ„Éº„Éû„ÅÆÂàá„ÇäÊõø„ÅàÔºà„É©„Ç§„Éà/„ÉÄ„Éº„ÇØÔºâ„ÇÑË®ÄË™ûË®≠ÂÆö„Å™„Å©„ÄÅÂü∫Êú¨ÁöÑ„Å™„É°„Ç´„Éã„Ç∫„É†„ÅÆÈÅ©Âàá„Å™Ê©üËÉΩ„ÇíÁ¢∫‰øù„Åô„Çã„Åü„ÇÅ„Å´„ÄÅ‰∏çÂèØÊ¨†„Å™„ÇØ„ÉÉ„Ç≠„Éº„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÊàë„ÄÖ„ÅØÂà©Áî®ËÄÖ„ÅÆÊ¥ªÂãï„ÇíËøΩË∑°„Åô„Çã„Åü„ÇÅ„ÅÆÂàÜÊûê„ÇØ„ÉÉ„Ç≠„Éº„ÇÑ„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞„ÇØ„ÉÉ„Ç≠„Éº„Çí‰ΩøÁî®„Åó„Åæ„Åõ„Çì„ÄÇ"
  }
}

----------------------dobry------------------------

@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=JetBrains+Mono:wght@400&family=Poppins:wght@600;700&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: hsl(0 0% 100%);
    --foreground: hsl(0 0% 10.2%);
    --card: hsl(0 0% 100%);
    --card-foreground: hsl(0 0% 10.2%);
    --popover: hsl(0 0% 100%);
    --popover-foreground: hsl(0 0% 10.2%);
    --primary: hsl(0 0% 10.2%);
    --primary-foreground: hsl(0 0% 100%);
    --secondary: hsl(0 0% 95.1%);
    --secondary-foreground: hsl(0 0% 10.2%);
    --muted: hsl(0 0% 95.1%);
    --muted-foreground: hsl(0 0% 45.1%);
    --accent: hsl(38 48% 56%);
    --accent-light: hsl(38 55% 65%);
    --accent-foreground: hsl(0 0% 100%);
    --destructive: hsl(0 84.2% 60.2%);
    --destructive-foreground: hsl(0 0% 100%);
    --border: hsl(0 0% 89.8%);
    --input: hsl(0 0% 89.8%);
    --ring: hsl(38 48% 56%);
    --radius: 0.5rem;
  }

  .dark {
    --background: hsl(0 0% 10.2%);
    --foreground: hsl(0 0% 98%);
    --card: hsl(0 0% 10.2%);
    --card-foreground: hsl(0 0% 98%);
    --popover: hsl(0 0% 10.2%);
    --popover-foreground: hsl(0 0% 98%);
    --primary: hsl(0 0% 98%);
    --primary-foreground: hsl(0 0% 10.2%);
    --secondary: hsl(0 0% 16.5%);
    --secondary-foreground: hsl(0 0% 98%);
    --muted: hsl(0 0% 16.5%);
    --muted-foreground: hsl(0 0% 62.9%);
    --accent: hsl(38 48% 56%);
    --accent-light: hsl(38 55% 65%);
    --accent-foreground: hsl(0 0% 10.2%);
    --destructive: hsl(0 62.8% 30.6%);
    --destructive-foreground: hsl(0 0% 98%);
    --border: hsl(0 0% 20.5%);
    --input: hsl(0 0% 20.5%);
    --ring: hsl(38 48% 56%);
  }
}

@layer base {
  * {
    @apply border-border;
    box-sizing: border-box;
  }

  html {
    scroll-behavior: smooth;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    overflow-x: hidden;
  }

  body {
    @apply bg-background text-foreground font-inter;
    min-height: 100vh;
    overflow-x: hidden;
  }
}

@layer components {
  .gradient-gold {
    background: linear-gradient(135deg, hsl(38 48% 56%), hsl(38 55% 65%));
  }

  .code-block {
    background: linear-gradient(135deg, hsl(0 0% 10.2%), hsl(0 0% 16.5%));
  }

  .control-hub-collapsed {
    width: 4rem;
  }

  .control-hub-expanded {
    width: 17.5rem;
  }
}

@layer utilities {
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .animate-fade-in {
    animation: fadeIn 0.6s ease-in-out forwards;
  }

  .animate-slide-in {
    animation: slideIn 0.8s ease-out forwards;
  }

  .animate-bounce-subtle {
    animation: bounceSubtle 3s infinite ease-in-out;
  }

  .animate-glow {
    animation: glow 2.5s ease-in-out infinite alternate;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes bounceSubtle {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-8px);
  }
}

@keyframes glow {
  from {
    box-shadow: 0 0 15px -5px hsl(38 48% 56% / 0.5);
  }
  to {
    box-shadow: 0 0 25px 0px hsl(38 48% 56% / 0.7);
  }
}

/* --- ACCESSIBILITY MODE OVERRIDES --- */

html.accessibility-mode {
  font-size: 110%;
  --foreground: #ffffff !important;
}

html.accessibility-mode body {
  background-color: #000000 !important;
}

html.accessibility-mode,
html.accessibility-mode * {
  color: #ffffff !important;
}

html.accessibility-mode .bg-card,
html.accessibility-mode .bg-background,
html.accessibility-mode .bg-background\/95,
html.accessibility-mode .bg-muted,
html.accessibility-mode .bg-secondary,
html.accessibility-mode .bg-secondary\/5,
html.accessibility-mode .bg-accent\/5,
html.accessibility-mode .bg-accent\/10,
html.accessibility-mode .bg-primary,
html.accessibility-mode .bg-blue-50,
html.accessibility-mode .dark\:bg-blue-900\/30 {
  background-color: #111 !important;
  background-image: none !important;
}

html.accessibility-mode .code-block,
html.accessibility-mode .gradient-gold {
  background-image: none !important;
  background-color: #222 !important;
}

html.accessibility-mode .bg-clip-text {
  -webkit-background-clip: initial !important;
  background-clip: initial !important;
}

html.accessibility-mode .bg-accent {
  background-color: #fafa00 !important;
  color: #000000 !important;
}
html.accessibility-mode .bg-accent * {
  color: #000000 !important;
}

html.accessibility-mode * {
  transition: none !important;
  animation: none !important;
}

html.accessibility-mode *:focus {
  outline: 3px solid #fafa00 !important;
  outline-offset: 2px;
}

html.accessibility-mode a:not([class*="bg-"]) {
  color: #00aaff !important;
  text-decoration: underline !important;
}

html.accessibility-mode .prose {
  --tw-prose-body: #ffffff;
  --tw-prose-headings: #ffffff;
  --tw-prose-quotes: #ffffff;
  color: #ffffff !important;
}

html.accessibility-mode select {
  background-color: #222 !important;
  color: #ffffff !important;
  border: 1px solid #fafa00 !important;
}

html.accessibility-mode .border-t,
html.accessibility-mode .border-b,
html.accessibility-mode .border-l,
html.accessibility-mode .border-r,
html.accessibility-mode .border {
  border-color: transparent !important;
}

html.accessibility-mode select {
  border-color: #fafa00 !important;
}

/* OSTATECZNA POPRAWKA v4 - PEWNE NADPISANIE STYLU HOVER */
html.accessibility-mode .hover\:text-foreground:hover {
  background-color: #222 !important; /* Ciemne t≈Ço */
  color: #fafa00 !important; /* ≈ª√≥≈Çta ikona/tekst */
}
-----------------------------
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"],
    },
  },
});

------------------------------
import { useState, useEffect } from "react";
import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import InteractiveWorkshop from "@/components/interactive-workshop";
import { TranslationDemo } from "@/components/translation-demo";
import { ContactForm } from "@/components/contact-form";
import { CreatorStoryModal } from "@/components/creator-story-modal";
import { GeminiShowcase } from "@/components/gemini-showcase";
import devPhotoUrl from "@assets/4.png";

export default function Home() {
  const { t } = useTranslation();
  const [isStoryModalOpen, setIsStoryModalOpen] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 300);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  const geminiCards = t("geminiPhase.cards", { returnObjects: true }) as Array<{
    title: string;
    userQuote: string;
    geminiSolution: string;
  }>;

  return (
    <>
      <Helmet>
        <title>{t("seo.title")}</title>
        <meta name="description" content={t("seo.description")} />
        <meta property="og:title" content={t("seo.title")} />
        <meta property="og:description" content={t("seo.description")} />
        <meta property="og:type" content="website" />
        <link rel="canonical" href={window.location.href} />
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "Article",
            headline: t("seo.title"),
            description: t("seo.description"),
            author: {
              "@type": "Person",
              name: "AI Genesis",
            },
            publisher: {
              "@type": "Organization",
              name: "AI Genesis",
            },
          })}
        </script>
      </Helmet>

      <main className="w-full overflow-x-hidden">
        <section className="min-h-screen bg-gradient-to-br from-background via-secondary/5 to-accent/5 flex items-center justify-center relative overflow-hidden px-4 lg:px-8 w-full">
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-10 left-10 w-20 h-20 bg-accent/10 rounded-full animate-bounce-subtle"></div>
            <div className="absolute top-1/2 right-20 w-16 h-16 bg-accent/20 rounded-full animate-bounce-subtle delay-1000"></div>
            <div className="absolute bottom-20 left-1/3 w-12 h-12 bg-accent/15 rounded-full animate-bounce-subtle delay-2000"></div>
          </div>

          <div className="text-center z-10 animate-fade-in w-full max-w-4xl mx-auto">
            <h1 className="font-playfair text-3xl sm:text-5xl lg:text-7xl font-bold mb-6">
              <span className="gradient-gold bg-clip-text text-transparent">
                {t("hero.title")}
              </span>
            </h1>
            <h2 className="font-playfair text-lg sm:text-2xl lg:text-3xl mb-8 text-foreground/80">
              {t("hero.subtitle")}
            </h2>
            <p className="text-base sm:text-lg lg:text-xl mb-12 max-w-2xl mx-auto leading-relaxed text-foreground/70 px-4">
              {t("hero.description")}
            </p>

            <div className="mb-12">
              <div className="flex justify-center space-x-4 mb-4">
                {[...Array(6)].map((_, i) => (
                  <div
                    key={i}
                    className="w-2 h-2 bg-accent rounded-full animate-pulse"
                    style={{ animationDelay: `${i * 0.2}s` }}
                  ></div>
                ))}
              </div>
              <p className="text-sm text-foreground/60">
                {t("phases.phaseCount")}
              </p>
            </div>

            <a
              href="#phase-0"
              className="inline-flex items-center space-x-3 bg-accent hover:bg-accent-light text-accent-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-200 hover:scale-105 animate-glow"
              data-testid="hero-cta"
            >
              <span>{t("hero.cta")}</span>
              <span>üöÄ</span>
            </a>
          </div>
        </section>

        <section
          id="phase-0"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-accent to-accent-light rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üí°
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase0.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase0.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase0.rawIdeaTitle")}
                </h3>
                <div className="bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-400 p-6 mb-8 transform rotate-1">
                  <div className="font-mono text-sm mb-4 text-yellow-700 dark:text-yellow-300">
                    {t("phases.phase0.noteComment")}
                  </div>
                  <p className="text-foreground leading-relaxed">
                    "{t("phases.phase0.userNote")}"
                  </p>
                </div>

                <div className="bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">ü§ñ</span>
                    {t("phases.phase0.aiInterpretation")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    {t("phases.phase0.aiDescription")}
                  </p>
                </div>
              </div>

              <div className="animate-fade-in">
                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("phases.phase0.terminalTitle")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-2">
                    <div className="animate-pulse">
                      &gt; {t("phases.phase0.analyzing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "0.5s" }}
                    >
                      &gt; {t("phases.phase0.generating")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1s" }}
                    >
                      &gt; {t("phases.phase0.planning")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1.5s" }}
                    >
                      &gt; {t("phases.phase0.designing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "2s" }}
                    >
                      &gt; {t("phases.phase0.complete")}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-1"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üèóÔ∏è
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase1.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase1.subtitle")}
              </p>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.projectStructure")}
                </h3>

                <div className="code-block rounded-lg p-4 sm:p-6 text-white font-mono text-xs sm:text-sm overflow-x-auto">
                  <div className="text-accent mb-4">ai-genesis-project/</div>
                  <div className="ml-4 space-y-1">
                    <div>
                      ‚îú‚îÄ‚îÄ <span className="text-yellow-400">functions/</span>
                    </div>
                    <div className="ml-4">‚îî‚îÄ‚îÄ submit-form.ts</div>
                    <div>
                      ‚îú‚îÄ‚îÄ <span className="text-yellow-400">src/</span>
                    </div>
                    <div className="ml-4">
                      ‚îú‚îÄ‚îÄ <span className="text-blue-400">components/</span>
                    </div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ __tests__/</div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ ControlHub.tsx</div>
                    <div className="ml-8">‚îî‚îÄ‚îÄ InteractiveWorkshop.tsx</div>
                    <div className="ml-4">
                      ‚îú‚îÄ‚îÄ <span className="text-green-400">pages/</span>
                    </div>
                    <div className="ml-4">
                      ‚îú‚îÄ‚îÄ <span className="text-purple-400">translations/</span>
                    </div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ pl.json</div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ en.json</div>
                    <div className="ml-8">‚îî‚îÄ‚îÄ ja.json</div>
                    <div className="ml-4">‚îú‚îÄ‚îÄ App.tsx</div>
                    <div className="ml-4">‚îú‚îÄ‚îÄ main.tsx</div>
                    <div className="ml-4">‚îî‚îÄ‚îÄ i18n.ts</div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.techStack")}
                </h3>

                <div className="space-y-4 sm:space-y-6">
                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-blue-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TS
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TypeScript + React + Vite
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.typeScriptDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-cyan-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TW
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TailwindCSS + Framer Motion
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.tailwindDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-green-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        ‚ö°
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        Netlify Functions + Testing
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.netlifyDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 sm:mt-8 bg-accent/10 rounded-lg p-4 sm:p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">ü§ñ</span>
                    {t("phases.phase1.aiJustification")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    "{t("phases.phase1.stackReasoning")}"
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-2"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üé®
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase2.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase2.subtitle")}
              </p>
            </div>

            <div className="mb-12 animate-slide-in">
              <div className="bg-accent/10 border-l-4 border-accent p-6 rounded-r-lg">
                <h3 className="font-playfair text-xl font-semibold mb-4">
                  {t("phases.phase2.designDecision")}
                </h3>
                <p className="leading-relaxed">
                  {t("phases.phase2.designReasoning")}
                </p>
              </div>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.hubFeatures")}
                </h3>

                <div className="space-y-4">
                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                      üß≠
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.navFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.navDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                      üåê
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.langFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.langDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                      üåô
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.themeFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.themeDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                      ‚ôø
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.a11yFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.a11yDesc")}
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.demoTitle")}
                </h3>

                <div className="relative bg-muted rounded-lg p-6 h-96 overflow-hidden">
                  <div className="absolute left-0 top-0 h-full w-12 bg-card border-r border-border hover:w-32 transition-all duration-300 group">
                    <div className="p-2 space-y-2">
                      <div className="w-8 h-8 bg-accent rounded-lg flex items-center justify-center text-accent-foreground text-xs font-bold">
                        AI
                      </div>
                      <div className="space-y-1">
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          üí°
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          üèóÔ∏è
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          üé®
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          ‚öôÔ∏è
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="ml-16 p-4">
                    <h4 className="font-semibold mb-2">
                      {t("phases.phase2.mainContent")}
                    </h4>
                    <p className="text-sm text-foreground/70 mb-4">
                      {t("phases.phase2.hubDescription")}
                    </p>
                    <div className="space-y-2">
                      <div className="h-2 bg-secondary rounded"></div>
                      <div className="h-2 bg-secondary rounded w-3/4"></div>
                      <div className="h-2 bg-secondary rounded w-1/2"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-3"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-red-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                ‚öôÔ∏è
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase3.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase3.subtitle")}
              </p>
            </div>

            <InteractiveWorkshop />

            <div className="animate-fade-in">
              <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
                {t("phases.phase3.aiDialogue")}
              </h3>

              <div className="bg-card rounded-lg py-4 px-0 md:p-6 border border-border space-y-12">
                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-blue-500 rounded-full flex-shrink-0 flex items-center justify-center text-white text-base">
                    üë§
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4">
                      <p className="font-mono text-sm">
                        "{t("phases.phase3.userRequest")}"
                      </p>
                    </div>
                  </div>
                </div>

                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-accent rounded-full flex-shrink-0 flex items-center justify-center text-accent-foreground text-base">
                    ü§ñ
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-accent/10 rounded-lg p-4">
                      <p className="text-sm">
                        <strong>{t("phases.phase3.aiResponse")}</strong>{" "}
                        <code className="bg-muted px-2 py-1 rounded">
                          components/ImageModal.tsx
                        </code>
                        .
                      </p>
                      <div className="mt-4 code-block rounded p-4 text-white font-mono text-xs">
                        <pre>
                          <code className="whitespace-pre-wrap break-words">{`${t(
                            "phases.phase3.generatedComment"
                          )}
import { createPortal } from 'react-dom';
import { useEffect } from 'react';

interface ImageModalProps {
  src: string;
  alt: string;
  onClose: () => void;
}

export const ImageModal: React.FC<ImageModalProps> = ({ src, alt, onClose }) => {
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [onClose]);

  return createPortal(
    <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50"
         onClick={onClose}>
      <img src={src} alt={alt} className="max-w-full max-h-full"
           onClick={(e) => e.stopPropagation()} />
    </div>,
    document.body
  );
};`}</code>
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-4"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üåç
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase4.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase4.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <TranslationDemo />

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase4.seoImplementation")}
                </h3>

                <div className="space-y-6">
                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">üìã</span>
                      {t("phases.phase4.metaTags")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs">
                      <pre>
                        <code className="whitespace-pre-wrap break-words">{`${t(
                          "phases.phase4.metaComment"
                        )}
<Helmet>
  <title>{t('seo.title')}</title>
  <meta name="description" content={t('seo.description')} />
  <meta property="og:title" content={t('seo.title')} />
  <meta property="og:description" content={t('seo.description')} />
  <link rel="canonical" href={canonicalUrl} />
  <html lang={currentLanguage} />
</Helmet>`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">üè∑Ô∏è</span>
                      {t("phases.phase4.jsonLD")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs">
                      <pre>
                        <code className="whitespace-pre-wrap break-words">{`{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "AI Genesis: Interactive Meta-Tutorial",
  "description": "Comprehensive guide to AI-assisted development",
  "author": {
    "@type": "Person",
    "name": "AI Genesis"
  },
  "publisher": {
    "@type": "Organization",
    "name": "AI Genesis"
  }
}`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-accent/10 rounded-lg p-6">
                    <h4 className="font-semibold mb-4">
                      üìä {t("performance.title")}
                    </h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <div className="font-medium">
                          {t("performance.lazyLoading")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.lazyLoadingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.imageOptimization")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.imageOptDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.codeSplitting")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.codeSplittingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.bundleAnalysis")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.bundleAnalysisDesc")}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üß™
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("testing.phaseTitle")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("testing.phaseSubtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üî¨ {t("testing.unitTestExample")}
                </h3>

                <div className="code-block rounded-lg p-6 text-white font-mono text-sm">
                  <pre>
                    <code className="whitespace-pre-wrap break-words">{`// ControlHub.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ControlHub } from '../ControlHub';

describe('ControlHub', () => {
  it('should expand on hover', async () => {
    render(<ControlHub />);

    const hub = screen.getByTestId('control-hub');
    expect(hub).toHaveClass('control-hub-collapsed');

    fireEvent.mouseEnter(hub);

    await waitFor(() => {
      expect(hub).toHaveClass('control-hub-expanded');
    });
  });

  it('should navigate to correct section', () => {
    render(<ControlHub />);

    const iskraLink = screen.getByText('Iskra');
    fireEvent.click(iskraLink);

    expect(window.location.hash).toBe('#phase-0');
  });
});`}</code>
                  </pre>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  ‚úÖ {t("testing.testResults")}
                </h3>

                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("testing.testResultsVitest")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-1">
                    <div>‚úì ControlHub.test.tsx (2)</div>
                    <div className="ml-4">‚úì should expand on hover</div>
                    <div className="ml-4">
                      ‚úì should navigate to correct section
                    </div>
                    <div>‚úì TranslationModule.test.tsx (3)</div>
                    <div className="ml-4">
                      ‚úì should switch languages correctly
                    </div>
                    <div className="ml-4">‚úì should fallback to English</div>
                    <div className="ml-4">
                      ‚úì should update translations dynamically
                    </div>
                    <div>‚úì InteractiveWorkshop.test.tsx (2)</div>
                    <div className="ml-4">‚úì should simulate bug correctly</div>
                    <div className="ml-4">‚úì should fix bug on demand</div>
                    <div className="text-accent mt-4">
                      <strong>Tests: 7 passed, 7 total</strong>
                      <br />
                      <strong>Time: 2.14s</strong>
                    </div>
                  </div>
                </div>

                <div className="mt-6 bg-card rounded-lg p-6 border border-border">
                  <h4 className="font-semibold mb-4">
                    üõ†Ô∏è {t("testing.testingStack")}
                  </h4>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>{t("testing.testRunner")}</span>
                      <span className="font-mono">Vitest</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.testingLibrary")}</span>
                      <span className="font-mono">@testing-library/react</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.coverage")}</span>
                      <span className="text-green-600 font-mono">96.8%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.e2eTests")}</span>
                      <span className="font-mono">
                        {t("testing.e2eTestsValue")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-5"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üöÄ
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase5.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase5.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üåê {t("phases.phase5.deploymentProcess")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                        1
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Git Push</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.gitPush")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                        2
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Netlify Build</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.netlifyBuild")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                        3
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Functions Deploy</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.functionsDeploy")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                        4
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">CDN Distribution</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.cdnDistribution")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>
                  </div>

                  <div className="mt-6 bg-accent/10 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="font-semibold text-green-700 dark:text-green-400">
                        {t("phases.phase5.liveAt")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üìä {t("phases.phase5.lighthouseReport")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="text-center mb-6">
                    <h4 className="font-semibold text-lg mb-2">
                      {t("phases.phase5.auditResults")}
                    </h4>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.auditSubtitle")}
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    {[
                      { name: "Performance", score: 100 },
                      { name: "Accessibility", score: 100 },
                      { name: "Best Practices", score: 100 },
                      { name: "SEO", score: 100 },
                    ].map((metric) => (
                      <div key={metric.name} className="text-center">
                        <div className="relative w-20 h-20 mx-auto mb-2">
                          <div className="absolute inset-0 bg-green-100 dark:bg-green-900/20 rounded-full"></div>
                          <div className="absolute inset-2 bg-green-500 rounded-full flex items-center justify-center text-white font-bold">
                            {metric.score}
                          </div>
                        </div>
                        <div className="text-sm font-semibold">
                          {metric.name}
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 text-center">
                    <div className="text-2xl font-bold text-green-600 mb-2">
                      {t("phases.phase5.perfectScore")}
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.perfectDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4">
                    {t("phases.phase5.keyMetrics")}
                  </h4>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="font-medium">
                        {t("testing.firstContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">1.2s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.largestContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">2.1s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.cumulativeLayoutShift")}
                      </div>
                      <div className="text-green-600 font-mono">0.01</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.timeToInteractive")}
                      </div>
                      <div className="text-green-600 font-mono">2.8s</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-accent/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("creator.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70">
                {t("creator.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl overflow-hidden max-w-3xl mx-auto">
              <div className="relative h-64 sm:h-96 lg:h-[500px] w-full">
                <img
                  src={devPhotoUrl}
                  alt={t("creator.name")}
                  className="w-full h-full object-contain object-center"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
                <div className="absolute bottom-4 sm:bottom-6 left-4 sm:left-6 text-white">
                  <h3 className="font-playfair text-center text-2xl sm:text-3xl lg:text-4xl font-bold mb-2">
                    {t("creator.name")}
                  </h3>
                </div>
              </div>

              <div className="p-6 sm:p-8">
                <p className="text-foreground/80 text-base sm:text-lg leading-relaxed mb-6 sm:mb-8 max-w-4xl mx-auto text-center">
                  {t("creator.description")}
                </p>

                <div className="text-center">
                  <Button
                    onClick={() => setIsStoryModalOpen(true)}
                    className="bg-accent hover:bg-accent-light text-accent-foreground px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-200"
                    data-testid="creator-story-button"
                  >
                    üéì {t("creator.selfTaughtButton")}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-6"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("geminiPhase.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70 max-w-3xl mx-auto">
                {t("geminiPhase.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl p-6 sm:p-8 max-w-4xl mx-auto mb-16">
              <div className="flex flex-col sm:flex-row items-center text-center sm:text-left">
                <div className="w-20 h-20 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-3xl mb-4 sm:mb-0 sm:mr-6 flex-shrink-0">
                  üíé
                </div>
                <div>
                  <p className="text-foreground/80 leading-relaxed">
                    {t("geminiPhase.intro")}
                  </p>
                </div>
              </div>
            </div>

            <h3 className="font-playfair text-2xl sm:text-3xl font-bold mb-12 text-center">
              {t("geminiPhase.changelogTitle")}
            </h3>

            <div className="grid md:grid-cols-2 gap-8">
              {Array.isArray(geminiCards) &&
                geminiCards.map((card, index) => (
                  <div
                    key={index}
                    className="bg-card rounded-lg border border-border p-6"
                  >
                    <h4 className="font-playfair text-xl font-semibold mb-4">
                      {card.title}
                    </h4>
                    <div className="mb-4 bg-secondary/30 border-l-4 border-accent p-4 rounded-r-md">
                      <p className="font-mono text-sm italic text-foreground/70">
                        "{card.userQuote}"
                      </p>
                    </div>
                    <div>
                      <h5 className="font-semibold mb-2 flex items-center text-sm">
                        <span className="mr-2 text-lg">üíé</span> Gemini's
                        Solution
                      </h5>
                      <p className="text-sm text-foreground/80">
                        {card.geminiSolution}
                      </p>
                    </div>
                  </div>
                ))}
            </div>
            <GeminiShowcase />
          </div>
        </section>

        <section
          id="contact"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-primary text-primary-foreground"
        >
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("contact.title")}
              </h2>
              <p className="text-xl text-primary-foreground/70">
                {t("contact.subtitle")}
              </p>
            </div>

            <ContactForm />
          </div>
        </section>
      </main>

      <CreatorStoryModal
        isOpen={isStoryModalOpen}
        onClose={() => setIsStoryModalOpen(false)}
      />

      {showScrollTop && (
        <button
          data-testid="scroll-to-top-home"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg sm:w-14 sm:h-14"
          aria-label="Przewi≈Ñ na g√≥rƒô"
        >
          ‚Üë
        </button>
      )}
    </>
  );
}

-----------------------------------

import { useState } from "react";
import { useTranslation } from "react-i18next";
import { X } from "lucide-react";
import { cn } from "@/lib/utils";

export function GeminiShowcase() {
  const { t } = useTranslation();
  const [isDemoContrastOn, setIsDemoContrastOn] = useState(false);
  const [hoveredButton, setHoveredButton] = useState<"before" | "after" | null>(
    null
  );

  const getCodeForDemo2 = () => {
    if (hoveredButton === "before") {
      return t("geminiPhase.showcase.demo2.code.before");
    }
    if (hoveredButton === "after") {
      return t("geminiPhase.showcase.demo2.code.after");
    }
    return t("geminiPhase.showcase.demo2.code.default");
  };

  return (
    <div className="bg-card rounded-lg border border-border shadow-xl p-6 sm:p-8 max-w-4xl mx-auto mt-16">
      <h3 className="font-playfair text-2xl sm:text-3xl font-bold mb-4 text-center">
        {t("geminiPhase.showcase.title")}
      </h3>
      <p className="text-center text-foreground/80 mb-12">
        {t("geminiPhase.showcase.intro")}
      </p>

      <div className="space-y-12">
        <div className="border-t border-border pt-8">
          <h4 className="font-semibold text-lg mb-4 text-center">
            {t("geminiPhase.showcase.demo1.title")}
          </h4>
          <div className="grid md:grid-cols-2 gap-8 items-center">
            <div className="flex flex-col items-center">
              <div
                className={cn(
                  "w-full max-w-xs h-32 rounded-lg border border-border p-4 transition-colors duration-300 flex flex-col justify-center items-center text-center",
                  isDemoContrastOn ? "demo-contrast-on" : "bg-background"
                )}
              >
                <p
                  className={cn(
                    "font-bold text-lg",
                    isDemoContrastOn && "text-white"
                  )}
                >
                  {t("geminiPhase.showcase.demo1.previewTitle")}
                </p>
                <p className={cn("text-sm", isDemoContrastOn && "text-white")}>
                  {t("geminiPhase.showcase.demo1.previewText")}
                </p>
              </div>
              <button
                onClick={() => setIsDemoContrastOn(!isDemoContrastOn)}
                className="mt-4 bg-accent hover:bg-accent-light text-accent-foreground px-4 py-2 rounded-md text-sm font-semibold"
              >
                {t("geminiPhase.showcase.demo1.button")}
              </button>
            </div>
            <div className="code-block rounded-md p-4 text-xs font-mono text-white overflow-x-auto h-full">
              <pre>
                <code>
                  {t(
                    isDemoContrastOn
                      ? "geminiPhase.showcase.demo1.code.on"
                      : "geminiPhase.showcase.demo1.code.off"
                  )}
                </code>
              </pre>
            </div>
          </div>
        </div>

        <div className="border-t border-border pt-8">
          <h4 className="font-semibold text-lg mb-4 text-center">
            {t("geminiPhase.showcase.demo2.title")}
          </h4>
          <div className="grid md:grid-cols-2 gap-8 items-center">
            <div className="flex flex-col items-center">
              <p className="text-sm text-foreground/70 mb-4">
                {t("geminiPhase.showcase.demo2.instruction")}
              </p>
              <div className="flex space-x-4">
                <div className="flex flex-col items-center">
                  <button
                    className="demo-buggy-button"
                    onMouseEnter={() => setHoveredButton("before")}
                    onMouseLeave={() => setHoveredButton(null)}
                  >
                    <X className="w-5 h-5" />
                  </button>
                  <span className="mt-2 text-sm font-semibold">
                    {t("geminiPhase.showcase.demo2.before")}
                  </span>
                </div>
                <div className="flex flex-col items-center">
                  <button
                    className="demo-fixed-button"
                    onMouseEnter={() => setHoveredButton("after")}
                    onMouseLeave={() => setHoveredButton(null)}
                  >
                    <X className="w-5 h-5" />
                  </button>
                  <span className="mt-2 text-sm font-semibold">
                    {t("geminiPhase.showcase.demo2.after")}
                  </span>
                </div>
              </div>
            </div>
            <div className="code-block rounded-md p-4 text-xs font-mono text-white overflow-x-auto h-full">
              <pre>
                <code>{getCodeForDemo2()}</code>
              </pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

---------------------------------

@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=JetBrains+Mono:wght@400&family=Poppins:wght@600;700&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: hsl(0 0% 100%);
    --foreground: hsl(0 0% 10.2%);
    --card: hsl(0 0% 100%);
    --card-foreground: hsl(0 0% 10.2%);
    --popover: hsl(0 0% 100%);
    --popover-foreground: hsl(0 0% 10.2%);
    --primary: hsl(0 0% 10.2%);
    --primary-foreground: hsl(0 0% 100%);
    --secondary: hsl(0 0% 95.1%);
    --secondary-foreground: hsl(0 0% 10.2%);
    --muted: hsl(0 0% 95.1%);
    --muted-foreground: hsl(0 0% 45.1%);
    --accent: hsl(38 48% 56%);
    --accent-light: hsl(38 55% 65%);
    --accent-foreground: hsl(0 0% 100%);
    --destructive: hsl(0 84.2% 60.2%);
    --destructive-foreground: hsl(0 0% 100%);
    --border: hsl(0 0% 89.8%);
    --input: hsl(0 0% 89.8%);
    --ring: hsl(38 48% 56%);
    --radius: 0.5rem;
  }

  .dark {
    --background: hsl(0 0% 10.2%);
    --foreground: hsl(0 0% 98%);
    --card: hsl(0 0% 10.2%);
    --card-foreground: hsl(0 0% 98%);
    --popover: hsl(0 0% 10.2%);
    --popover-foreground: hsl(0 0% 98%);
    --primary: hsl(0 0% 98%);
    --primary-foreground: hsl(0 0% 10.2%);
    --secondary: hsl(0 0% 16.5%);
    --secondary-foreground: hsl(0 0% 98%);
    --muted: hsl(0 0% 16.5%);
    --muted-foreground: hsl(0 0% 62.9%);
    --accent: hsl(38 48% 56%);
    --accent-light: hsl(38 55% 65%);
    --accent-foreground: hsl(0 0% 10.2%);
    --destructive: hsl(0 62.8% 30.6%);
    --destructive-foreground: hsl(0 0% 98%);
    --border: hsl(0 0% 20.5%);
    --input: hsl(0 0% 20.5%);
    --ring: hsl(38 48% 56%);
  }
}

@layer base {
  * {
    @apply border-border;
    box-sizing: border-box;
  }

  html {
    scroll-behavior: smooth;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    overflow-x: hidden;
  }

  body {
    @apply bg-background text-foreground font-inter;
    min-height: 100vh;
    overflow-x: hidden;
  }
}

@layer components {
  .gradient-gold {
    background: linear-gradient(135deg, hsl(38 48% 56%), hsl(38 55% 65%));
  }

  .code-block {
    background: linear-gradient(135deg, hsl(0 0% 10.2%), hsl(0 0% 16.5%));
  }

  .control-hub-collapsed {
    width: 4rem;
  }

  .control-hub-expanded {
    width: 17.5rem;
  }
}

@layer utilities {
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .animate-fade-in {
    animation: fadeIn 0.6s ease-in-out forwards;
  }

  .animate-slide-in {
    animation: slideIn 0.8s ease-out forwards;
  }

  .animate-bounce-subtle {
    animation: bounceSubtle 3s infinite ease-in-out;
  }

  .animate-glow {
    animation: glow 2.5s ease-in-out infinite alternate;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes bounceSubtle {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-8px);
  }
}

@keyframes glow {
  from {
    box-shadow: 0 0 15px -5px hsl(38 48% 56% / 0.5);
  }
  to {
    box-shadow: 0 0 25px 0px hsl(38 48% 56% / 0.7);
  }
}

/* --- GEMINI SHOWCASE STYLES --- */
.demo-contrast-on {
  background-color: #000 !important;
}
.demo-buggy-button,
.demo-fixed-button {
  @apply h-10 w-10 inline-flex items-center justify-center rounded-md bg-card text-foreground transition-colors;
}
.demo-buggy-button:hover {
  background-color: var(--secondary);
  color: var(--secondary-foreground);
}
.demo-fixed-button:hover {
  background-color: #222;
  color: #fafa00;
}

/* --- ACCESSIBILITY MODE OVERRIDES --- */

html.accessibility-mode {
  font-size: 110%;
  --foreground: #ffffff !important;
}

html.accessibility-mode body {
  background-color: #000000 !important;
}

html.accessibility-mode,
html.accessibility-mode * {
  color: #ffffff !important;
}

html.accessibility-mode .bg-card,
html.accessibility-mode .bg-background,
html.accessibility-mode .bg-background\/95,
html.accessibility-mode .bg-muted,
html.accessibility-mode .bg-secondary,
html.accessibility-mode .bg-secondary\/5,
html.accessibility-mode .bg-accent\/5,
html.accessibility-mode .bg-accent\/10,
html.accessibility-mode .bg-primary,
html.accessibility-mode .bg-blue-50,
html.accessibility-mode .dark\:bg-blue-900\/30 {
  background-color: #111 !important;
  background-image: none !important;
}

html.accessibility-mode .code-block,
html.accessibility-mode .gradient-gold {
  background-image: none !important;
  background-color: #222 !important;
}

html.accessibility-mode .bg-clip-text {
  -webkit-background-clip: initial !important;
  background-clip: initial !important;
}

html.accessibility-mode .bg-accent {
  background-color: #fafa00 !important;
  color: #000000 !important;
}
html.accessibility-mode .bg-accent * {
  color: #000000 !important;
}

html.accessibility-mode * {
  transition: none !important;
  animation: none !important;
}

html.accessibility-mode *:focus {
  outline: 3px solid #fafa00 !important;
  outline-offset: 2px;
}

html.accessibility-mode a:not([class*="bg-"]) {
  color: #00aaff !important;
  text-decoration: underline !important;
}

html.accessibility-mode .prose {
  --tw-prose-body: #ffffff;
  --tw-prose-headings: #ffffff;
  --tw-prose-quotes: #ffffff;
  color: #ffffff !important;
}

html.accessibility-mode select {
  background-color: #222 !important;
  color: #ffffff !important;
  border: 1px solid #fafa00 !important;
}

html.accessibility-mode .border-t,
html.accessibility-mode .border-b,
html.accessibility-mode .border-l,
html.accessibility-mode .border-r,
html.accessibility-mode .border {
  border-color: transparent !important;
}

html.accessibility-mode select {
  border-color: #fafa00 !important;
}

html.accessibility-mode .hover\:text-foreground:hover {
  background-color: #222 !important;
  color: #fafa00 !important;
}

html.accessibility-mode .buggy-hover-button:hover {
  background-color: #111 !important;
}

html.accessibility-mode .buggy-hover-button:hover * {
  color: #ffffff !important;
}


------------------------------

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"],
    },
  },
});

------------------------------
import { useState, useEffect } from "react";
import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import InteractiveWorkshop from "@/components/interactive-workshop";
import { TranslationDemo } from "@/components/translation-demo";
import { ContactForm } from "@/components/contact-form";
import { CreatorStoryModal } from "@/components/creator-story-modal";
import { GeminiShowcase } from "@/components/gemini-showcase";
import devPhotoUrl from "@/assets/4.png";

export default function Home() {
  const { t } = useTranslation();
  const [isStoryModalOpen, setIsStoryModalOpen] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 300);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  const geminiCards =
    (t("geminiPhase.cards", { returnObjects: true }) as Array<{
      title: string;
      userQuote: string;
      geminiSolution: string;
    }>) || [];

  return (
    <>
      <Helmet>
        <title>{t("seo.title")}</title>
        <meta name="description" content={t("seo.description")} />
        <meta property="og:title" content={t("seo.title")} />
        <meta property="og:description" content={t("seo.description")} />
        <meta property="og:type" content="website" />
        <link rel="canonical" href={window.location.href} />
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "Article",
            headline: t("seo.title"),
            description: t("seo.description"),
            author: {
              "@type": "Person",
              name: "AI Genesis",
            },
            publisher: {
              "@type": "Organization",
              name: "AI Genesis",
            },
          })}
        </script>
      </Helmet>

      <main className="w-full overflow-x-hidden">
        <section className="min-h-screen bg-gradient-to-br from-background via-secondary/5 to-accent/5 flex items-center justify-center relative overflow-hidden px-4 lg:px-8 w-full">
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-10 left-10 w-20 h-20 bg-accent/10 rounded-full animate-bounce-subtle"></div>
            <div className="absolute top-1/2 right-20 w-16 h-16 bg-accent/20 rounded-full animate-bounce-subtle delay-1000"></div>
            <div className="absolute bottom-20 left-1/3 w-12 h-12 bg-accent/15 rounded-full animate-bounce-subtle delay-2000"></div>
          </div>

          <div className="text-center z-10 animate-fade-in w-full max-w-4xl mx-auto">
            <h1 className="font-playfair text-3xl sm:text-5xl lg:text-7xl font-bold mb-6">
              <span className="gradient-gold bg-clip-text text-transparent">
                {t("hero.title")}
              </span>
            </h1>
            <h2 className="font-playfair text-lg sm:text-2xl lg:text-3xl mb-8 text-foreground/80">
              {t("hero.subtitle")}
            </h2>
            <p className="text-base sm:text-lg lg:text-xl mb-12 max-w-2xl mx-auto leading-relaxed text-foreground/70 px-4">
              {t("hero.description")}
            </p>

            <div className="mb-12">
              <div className="flex justify-center space-x-4 mb-4">
                {[...Array(6)].map((_, i) => (
                  <div
                    key={i}
                    className="w-2 h-2 bg-accent rounded-full animate-pulse"
                    style={{ animationDelay: `${i * 0.2}s` }}
                  ></div>
                ))}
              </div>
              <p className="text-sm text-foreground/60">
                {t("phases.phaseCount")}
              </p>
            </div>

            <a
              href="#phase-0"
              className="inline-flex items-center space-x-3 bg-accent hover:bg-accent-light text-accent-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-200 hover:scale-105 animate-glow"
              data-testid="hero-cta"
            >
              <span>{t("hero.cta")}</span>
              <span>üöÄ</span>
            </a>
          </div>
        </section>

        <section
          id="phase-0"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-accent to-accent-light rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üí°
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase0.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase0.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase0.rawIdeaTitle")}
                </h3>
                <div className="bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-400 p-6 mb-8 transform rotate-1">
                  <div className="font-mono text-sm mb-4 text-yellow-700 dark:text-yellow-300">
                    {t("phases.phase0.noteComment")}
                  </div>
                  <p className="text-foreground leading-relaxed">
                    "{t("phases.phase0.userNote")}"
                  </p>
                </div>

                <div className="bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">ü§ñ</span>
                    {t("phases.phase0.aiInterpretation")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    {t("phases.phase0.aiDescription")}
                  </p>
                </div>
              </div>

              <div className="animate-fade-in">
                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("phases.phase0.terminalTitle")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-2">
                    <div className="animate-pulse">
                      &gt; {t("phases.phase0.analyzing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "0.5s" }}
                    >
                      &gt; {t("phases.phase0.generating")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1s" }}
                    >
                      &gt; {t("phases.phase0.planning")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1.5s" }}
                    >
                      &gt; {t("phases.phase0.designing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "2s" }}
                    >
                      &gt; {t("phases.phase0.complete")}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-1"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üèóÔ∏è
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase1.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase1.subtitle")}
              </p>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.projectStructure")}
                </h3>

                <div className="code-block rounded-lg p-4 sm:p-6 text-white font-mono text-xs sm:text-sm overflow-x-auto">
                  <div className="text-accent mb-4">ai-genesis-project/</div>
                  <div className="ml-4 space-y-1">
                    <div>
                      ‚îú‚îÄ‚îÄ <span className="text-yellow-400">functions/</span>
                    </div>
                    <div className="ml-4">‚îî‚îÄ‚îÄ submit-form.ts</div>
                    <div>
                      ‚îú‚îÄ‚îÄ <span className="text-yellow-400">src/</span>
                    </div>
                    <div className="ml-4">
                      ‚îú‚îÄ‚îÄ <span className="text-blue-400">components/</span>
                    </div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ __tests__/</div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ ControlHub.tsx</div>
                    <div className="ml-8">‚îî‚îÄ‚îÄ InteractiveWorkshop.tsx</div>
                    <div className="ml-4">
                      ‚îú‚îÄ‚îÄ <span className="text-green-400">pages/</span>
                    </div>
                    <div className="ml-4">
                      ‚îú‚îÄ‚îÄ <span className="text-purple-400">translations/</span>
                    </div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ pl.json</div>
                    <div className="ml-8">‚îú‚îÄ‚îÄ en.json</div>
                    <div className="ml-8">‚îî‚îÄ‚îÄ ja.json</div>
                    <div className="ml-4">‚îú‚îÄ‚îÄ App.tsx</div>
                    <div className="ml-4">‚îú‚îÄ‚îÄ main.tsx</div>
                    <div className="ml-4">‚îî‚îÄ‚îÄ i18n.ts</div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.techStack")}
                </h3>

                <div className="space-y-4 sm:space-y-6">
                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-blue-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TS
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TypeScript + React + Vite
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.typeScriptDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-cyan-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TW
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TailwindCSS + Framer Motion
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.tailwindDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-green-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        ‚ö°
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        Netlify Functions + Testing
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.netlifyDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 sm:mt-8 bg-accent/10 rounded-lg p-4 sm:p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">ü§ñ</span>
                    {t("phases.phase1.aiJustification")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    "{t("phases.phase1.stackReasoning")}"
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-2"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üé®
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase2.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase2.subtitle")}
              </p>
            </div>

            <div className="mb-12 animate-slide-in">
              <div className="bg-accent/10 border-l-4 border-accent p-6 rounded-r-lg">
                <h3 className="font-playfair text-xl font-semibold mb-4">
                  {t("phases.phase2.designDecision")}
                </h3>
                <p className="leading-relaxed">
                  {t("phases.phase2.designReasoning")}
                </p>
              </div>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.hubFeatures")}
                </h3>

                <div className="space-y-4">
                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                      üß≠
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.navFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.navDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                      üåê
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.langFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.langDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                      üåô
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.themeFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.themeDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                      ‚ôø
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.a11yFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.a11yDesc")}
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.demoTitle")}
                </h3>

                <div className="relative bg-muted rounded-lg p-6 h-96 overflow-hidden">
                  <div className="absolute left-0 top-0 h-full w-12 bg-card border-r border-border hover:w-32 transition-all duration-300 group">
                    <div className="p-2 space-y-2">
                      <div className="w-8 h-8 bg-accent rounded-lg flex items-center justify-center text-accent-foreground text-xs font-bold">
                        AI
                      </div>
                      <div className="space-y-1">
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          üí°
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          üèóÔ∏è
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          üé®
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          ‚öôÔ∏è
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="ml-16 p-4">
                    <h4 className="font-semibold mb-2">
                      {t("phases.phase2.mainContent")}
                    </h4>
                    <p className="text-sm text-foreground/70 mb-4">
                      {t("phases.phase2.hubDescription")}
                    </p>
                    <div className="space-y-2">
                      <div className="h-2 bg-secondary rounded"></div>
                      <div className="h-2 bg-secondary rounded w-3/4"></div>
                      <div className="h-2 bg-secondary rounded w-1/2"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-3"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-red-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                ‚öôÔ∏è
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase3.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase3.subtitle")}
              </p>
            </div>

            <InteractiveWorkshop />

            <div className="animate-fade-in">
              <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
                {t("phases.phase3.aiDialogue")}
              </h3>

              <div className="bg-card rounded-lg py-4 px-0 md:p-6 border border-border space-y-12">
                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-blue-500 rounded-full flex-shrink-0 flex items-center justify-center text-white text-base">
                    üë§
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4">
                      <p className="font-mono text-sm">
                        "{t("phases.phase3.userRequest")}"
                      </p>
                    </div>
                  </div>
                </div>

                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-accent rounded-full flex-shrink-0 flex items-center justify-center text-accent-foreground text-base">
                    ü§ñ
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-accent/10 rounded-lg p-4">
                      <p className="text-sm">
                        <strong>{t("phases.phase3.aiResponse")}</strong>{" "}
                        <code className="bg-muted px-2 py-1 rounded">
                          components/ImageModal.tsx
                        </code>
                        .
                      </p>
                      <div className="mt-4 code-block rounded p-4 text-white font-mono text-xs">
                        <pre>
                          <code className="whitespace-pre-wrap break-words">{`${t(
                            "phases.phase3.generatedComment"
                          )}
import { createPortal } from 'react-dom';
import { useEffect } from 'react';

interface ImageModalProps {
  src: string;
  alt: string;
  onClose: () => void;
}

export const ImageModal: React.FC<ImageModalProps> = ({ src, alt, onClose }) => {
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [onClose]);

  return createPortal(
    <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50"
         onClick={onClose}>
      <img src={src} alt={alt} className="max-w-full max-h-full"
           onClick={(e) => e.stopPropagation()} />
    </div>,
    document.body
  );
};`}</code>
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-4"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 mobile-safe-width"
        >
          <div className="max-w-6xl mx-auto mobile-padding">
            <div className="text-center mb-16 animate-fade-in mobile-responsive-grid items-center">
              <div className="mobile-code-container w-20 h-20 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üåç
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase4.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase4.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <TranslationDemo />

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase4.seoImplementation")}
                </h3>

                <div className="space-y-6">
                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">üìã</span>
                      {t("phases.phase4.metaTags")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs">
                      <pre>
                        <code className="whitespace-pre-wrap break-words">{`${t(
                          "phases.phase4.metaComment"
                        )}
<Helmet>
  <title>{t('seo.title')}</title>
  <meta name="description" content={t('seo.description')} />
  <meta property="og:title" content={t('seo.title')} />
  <meta property="og:description" content={t('seo.description')} />
  <link rel="canonical" href={window.location.href} />
</Helmet>`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">üè∑Ô∏è</span>
                      {t("phases.phase4.jsonLD")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs">
                      <pre>
                        <code className="whitespace-pre-wrap break-words">{`{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "AI Genesis: Interactive Meta-Tutorial",
  "description": "Comprehensive guide to AI-assisted development",
  "author": {
    "@type": "Person",
    "name": "AI Genesis"
  },
  "publisher": {
    "@type": "Organization",
    "name": "AI Genesis"
  }
}`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-accent/10 rounded-lg p-6">
                    <h4 className="font-semibold mb-4">
                      üìä {t("performance.title")}
                    </h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <div className="font-medium">
                          {t("performance.lazyLoading")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.lazyLoadingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.imageOptimization")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.imageOptDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.codeSplitting")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.codeSplittingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.bundleAnalysis")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.bundleAnalysisDesc")}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üß™
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("testing.phaseTitle")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("testing.phaseSubtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üî¨ {t("testing.unitTestExample")}
                </h3>

                <div className="code-block rounded-lg p-6 text-white font-mono text-sm">
                  <pre>
                    <code className="whitespace-pre-wrap break-words">{`// ControlHub.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ControlHub } from '../ControlHub';

describe('ControlHub', () => {
  it('should expand on hover', async () => {
    render(<ControlHub />);

    const hub = screen.getByTestId('control-hub');
    expect(hub).toHaveClass('control-hub-collapsed');

    fireEvent.mouseEnter(hub);

    await waitFor(() => {
      expect(hub).toHaveClass('control-hub-expanded');
    });
  });

  it('should navigate to correct section', () => {
    render(<ControlHub />);

    const iskraLink = screen.getByText('Iskra');
    fireEvent.click(iskraLink);

    expect(window.location.hash).toBe('#phase-0');
  });
});`}</code>
                  </pre>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  ‚úÖ {t("testing.testResults")}
                </h3>

                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("testing.testResultsVitest")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-1">
                    <div>‚úì ControlHub.test.tsx (2)</div>
                    <div className="ml-4">‚úì should expand on hover</div>
                    <div className="ml-4">
                      ‚úì should navigate to correct section
                    </div>
                    <div>‚úì TranslationModule.test.tsx (3)</div>
                    <div className="ml-4">
                      ‚úì should switch languages correctly
                    </div>
                    <div className="ml-4">‚úì should fallback to English</div>
                    <div className="ml-4">
                      ‚úì should update translations dynamically
                    </div>
                    <div>‚úì InteractiveWorkshop.test.tsx (2)</div>
                    <div className="ml-4">‚úì should simulate bug correctly</div>
                    <div className="ml-4">‚úì should fix bug on demand</div>
                    <div className="text-accent mt-4">
                      <strong>Tests: 7 passed, 7 total</strong>
                      <br />
                      <strong>Time: 2.14s</strong>
                    </div>
                  </div>
                </div>

                <div className="mt-6 bg-card rounded-lg p-6 border border-border">
                  <h4 className="font-semibold mb-4">
                    üõ†Ô∏è {t("testing.testingStack")}
                  </h4>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>{t("testing.testRunner")}</span>
                      <span className="font-mono">Vitest</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.testingLibrary")}</span>
                      <span className="font-mono">@testing-library/react</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.coverage")}</span>
                      <span className="text-green-600 font-mono">96.8%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.e2eTests")}</span>
                      <span className="font-mono">
                        {t("testing.e2eTestsValue")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-5"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üöÄ
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase5.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase5.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üåê {t("phases.phase5.deploymentProcess")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                        1
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Git Push</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.gitPush")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                        2
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Netlify Build</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.netlifyBuild")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                        3
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Functions Deploy</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.functionsDeploy")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                        4
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">CDN Distribution</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.cdnDistribution")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>
                  </div>

                  <div className="mt-6 bg-accent/10 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="font-semibold text-green-700 dark:text-green-400">
                        {t("phases.phase5.liveAt")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üìä {t("phases.phase5.lighthouseReport")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="text-center mb-6">
                    <h4 className="font-semibold text-lg mb-2">
                      {t("phases.phase5.auditResults")}
                    </h4>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.auditSubtitle")}
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    {[
                      { name: "Performance", score: 100 },
                      { name: "Accessibility", score: 100 },
                      { name: "Best Practices", score: 100 },
                      { name: "SEO", score: 100 },
                    ].map((metric) => (
                      <div key={metric.name} className="text-center">
                        <div className="relative w-20 h-20 mx-auto mb-2">
                          <div className="absolute inset-0 bg-green-100 dark:bg-green-900/20 rounded-full"></div>
                          <div className="absolute inset-2 bg-green-500 rounded-full flex items-center justify-center text-white font-bold">
                            {metric.score}
                          </div>
                        </div>
                        <div className="text-sm font-semibold">
                          {metric.name}
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 text-center">
                    <div className="text-2xl font-bold text-green-600 mb-2">
                      {t("phases.phase5.perfectScore")}
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.perfectDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4">
                    {t("phases.phase5.keyMetrics")}
                  </h4>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="font-medium">
                        {t("testing.firstContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">1.2s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.largestContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">2.1s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.cumulativeLayoutShift")}
                      </div>
                      <div className="text-green-600 font-mono">0.01</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.timeToInteractive")}
                      </div>
                      <div className="text-green-600 font-mono">2.8s</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-accent/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("creator.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70">
                {t("creator.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl overflow-hidden max-w-3xl mx-auto">
              <div className="relative h-64 sm:h-96 lg:h-[500px] w-full">
                <img
                  src={devPhotoUrl}
                  alt={t("creator.name")}
                  className="w-full h-full object-contain object-center"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
                <div className="absolute bottom-4 sm:bottom-6 left-4 sm:left-6 text-white">
                  <h3 className="font-playfair text-center text-2xl sm:text-3xl lg:text-4xl font-bold mb-2">
                    {t("creator.name")}
                  </h3>
                </div>
              </div>

              <div className="p-6 sm:p-8">
                <p className="text-foreground/80 text-base sm:text-lg leading-relaxed mb-6 sm:mb-8 max-w-4xl mx-auto text-center">
                  {t("creator.description")}
                </p>

                <div className="text-center">
                  <Button
                    onClick={() => setIsStoryModalOpen(true)}
                    className="bg-accent hover:bg-accent-light text-accent-foreground px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-200"
                    data-testid="creator-story-button"
                  >
                    üéì {t("creator.selfTaughtButton")}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-6"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("geminiPhase.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70 max-w-3xl mx-auto">
                {t("geminiPhase.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl p-6 sm:p-8 max-w-4xl mx-auto mb-16">
              <div className="flex flex-col sm:flex-row items-center text-center sm:text-left">
                <div className="w-20 h-20 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-3xl mb-4 sm:mb-0 sm:mr-6 flex-shrink-0">
                  üíé
                </div>
                <div>
                  <p className="text-foreground/80 leading-relaxed">
                    {t("geminiPhase.intro")}
                  </p>
                </div>
              </div>
            </div>

            <h3 className="font-playfair text-2xl sm:text-3xl font-bold mb-12 text-center">
              {t("geminiPhase.changelogTitle")}
            </h3>

            <div className="grid md:grid-cols-2 gap-8">
              {Array.isArray(geminiCards) &&
                geminiCards.map((card, index) => (
                  <div
                    key={index}
                    className="bg-card rounded-lg border border-border p-6"
                  >
                    <h4 className="font-playfair text-xl font-semibold mb-4">
                      {card.title}
                    </h4>
                    <div className="mb-4 bg-secondary/30 border-l-4 border-accent p-4 rounded-r-md">
                      <p className="font-mono text-sm italic text-foreground/70">
                        "{card.userQuote}"
                      </p>
                    </div>
                    <div>
                      <h5 className="font-semibold mb-2 flex items-center text-sm">
                        <span className="mr-2 text-lg">üíé</span> Gemini's
                        Solution
                      </h5>
                      <p className="text-sm text-foreground/80">
                        {card.geminiSolution}
                      </p>
                    </div>
                  </div>
                ))}
            </div>
            <GeminiShowcase />
          </div>
        </section>

        <section
          id="contact"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-primary text-primary-foreground"
        >
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("contact.title")}
              </h2>
              <p className="text-xl text-primary-foreground/70">
                {t("contact.subtitle")}
              </p>
            </div>

            <ContactForm />
          </div>
        </section>
      </main>

      <CreatorStoryModal
        isOpen={isStoryModalOpen}
        onClose={() => setIsStoryModalOpen(false)}
      />

      {showScrollTop && (
        <button
          data-testid="scroll-to-top-home"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg sm:w-14 sm:h-14"
          aria-label="Przewi≈Ñ na g√≥rƒô"
        >
          ‚Üë
        </button>
      )}
    </>
  );
}

---------------------------------------

<section
          id="phase-4"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 mobile-safe-width"
        >
          <div className="max-w-6xl mx-auto mobile-padding">
            <div className="text-center mb-16 animate-fade-in min-w-0">
              <div className="mobile-code-container w-20 h-20 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üåç
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6 mobile-heading-size">
                {t("phases.phase4.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase4.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <TranslationDemo />

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase4.seoImplementation")}
                </h3>

                <div className="space-y-6">
                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">üìã</span>
                      {t("phases.phase4.metaTags")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs">
                      <pre>
                        <code className="whitespace-pre-wrap break-words">{`${t(
                          "phases.phase4.metaComment"
                        )}
<Helmet>
  <title>{t('seo.title')}</title>
  <meta name="description" content={t('seo.description')} />
  <meta property="og:title" content={t('seo.title')} />
  <meta property="og:description" content={t('seo.description')} />
  <link rel="canonical" href={window.location.href} />
</Helmet>`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">üè∑Ô∏è</span>
                      {t("phases.phase4.jsonLD")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs">
                      <pre>
                        <code className="whitespace-pre-wrap break-words">{`{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "AI Genesis: Interactive Meta-Tutorial",
  "description": "Comprehensive guide to AI-assisted development",
  "author": {
    "@type": "Person",
    "name": "AI Genesis"
  },
  "publisher": {
    "@type": "Organization",
    "name": "AI Genesis"
  }
}`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-accent/10 rounded-lg p-6">
                    <h4 className="font-semibold mb-4">
                      üìä {t("performance.title")}
                    </h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <div className="font-medium">
                          {t("performance.lazyLoading")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.lazyLoadingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.imageOptimization")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.imageOptDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.codeSplitting")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.codeSplittingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.bundleAnalysis")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.bundleAnalysisDesc")}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

-------------------------------

<section
          id="phase-5"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                üöÄ
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase5.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase5.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üåê {t("phases.phase5.deploymentProcess")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                        1
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Git Push</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.gitPush")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                        2
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Netlify Build</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.netlifyBuild")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                        3
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Functions Deploy</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.functionsDeploy")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                        4
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">CDN Distribution</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.cdnDistribution")}
                        </div>
                      </div>
                      <div className="text-green-500">‚úì</div>
                    </div>
                  </div>

                  <div className="mt-6 bg-accent/10 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="font-semibold text-green-700 dark:text-green-400">
                        {t("phases.phase5.liveAt")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  üìä {t("phases.phase5.lighthouseReport")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="text-center mb-6">
                    <h4 className="font-semibold text-lg mb-2">
                      {t("phases.phase5.auditResults")}
                    </h4>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.auditSubtitle")}
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    {[
                      { name: "Performance", score: 100 },
                      { name: "Accessibility", score: 100 },
                      { name: "Best Practices", score: 100 },
                      { name: "SEO", score: 100 },
                    ].map((metric) => (
                      <div key={metric.name} className="text-center">
                        <div className="relative w-20 h-20 mx-auto mb-2">
                          <div className="absolute inset-0 bg-green-100 dark:bg-green-900/20 rounded-full"></div>
                          <div className="absolute inset-2 bg-green-500 rounded-full flex items-center justify-center text-white font-bold">
                            {metric.score}
                          </div>
                        </div>
                        <div className="text-sm font-semibold">
                          {metric.name}
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 text-center">
                    <div className="text-2xl font-bold text-green-600 mb-2">
                      {t("phases.phase5.perfectScore")}
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.perfectDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4">
                    {t("phases.phase5.keyMetrics")}
                  </h4>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="font-medium">
                        {t("testing.firstContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">1.2s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.largestContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">2.1s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.cumulativeLayoutShift")}
                      </div>
                      <div className="text-green-600 font-mono">0.01</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.timeToInteractive")}
                      </div>
                      <div className="text-green-600 font-mono">2.8s</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

---------------------------------
na podstawie zdjƒôcia z za≈ÇƒÖczonego pliku przygotuj zdjƒôcie realistyczne przedstawiajƒÖce tƒô osobƒô, gdy cieszy siƒô, stoi i ma wyciƒÖgniƒôte rƒôce do g√≥ry na znak rado≈õci i jest ubrana w koszulkƒô z kr√≥tkim rƒôkawem ora czapeczkƒô z daszkiem w kolorze bia≈Ço-czerwonym (tak jak dlaga Polski)