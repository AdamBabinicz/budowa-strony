{
  "hero": {
    "title": "AI Genesis",
    "subtitle": "Interaktywny Meta-Tutorial Stworzenia Strony w Replit",
    "description": "Przełomowa, interaktywna strona pokazująca symbiotyczną relację między ludzką kreatywnością a sztuczną inteligencją w procesie tworzenia aplikacji webowych.",
    "cta": "Rozpocznij podróż"
  },
  "nav": {
    "iskra": "Iskra",
    "fundamenty": "Fundamenty",
    "innowacja": "Innowacja UI",
    "development": "Development",
    "zasieg": "Zasięg",
    "deployment": "Deployment",
    "contact": "Kontakt"
  },
  "legalNav": {
    "terms": "Regulamin",
    "privacy": "Polityka Prywatności",
    "backToHome": "Wróć do strony głównej"
  },
  "accessibility": {
    "toggleOff": "Ułatwienia dostępu",
    "toggleOn": "Normalny widok"
  },
  "theme": {
    "lightMode": "Tryb Jasny",
    "darkMode": "Tryb Ciemny"
  },
  "phases": {
    "phaseCount": "6 faz rozwoju projektu",
    "phase0": {
      "title": "Faza 0: Iskra",
      "subtitle": "Pomysł i Brief dla AI",
      "rawIdeaTitle": "Surowy Pomysł Użytkownika",
      "noteComment": "// Notatka na serwetce",
      "userNote": "Chcę stronę, która pokazuje jak AI pomaga tworzyć strony... meta! Niech będzie interaktywna, z przykładami kodu, może jakieś animacje? I żeby było widać cały proces - od pomysłu do deployment.",
      "aiInterpretation": "Interpretacja AI",
      "aiDescription": "Z tego prostego opisu AI wygenerowało kompletną specyfikację techniczną obejmującą: interaktywną narrację, innowacyjny Control Hub, warsztat debugowania, moduł tłumaczeń i pełną implementację z testami.",
      "terminalTitle": "AI Processing Terminal",
      "analyzing": "Analyzing user request...",
      "generating": "Generating technical specification...",
      "planning": "Planning component architecture...",
      "designing": "Designing interaction patterns...",
      "complete": "✓ Specification complete!"
    },
    "phase1": {
      "title": "Faza 1: Fundamenty",
      "subtitle": "Setup i Architektura",
      "projectStructure": "Struktura Projektu",
      "techStack": "Stack Technologiczny",
      "typeScriptDesc": "Nowoczesny stack zapewniający type safety, szybki development i optymalne bundling.",
      "tailwindDesc": "Utility-first CSS z płynnymi animacjami dla nowoczesnego UX.",
      "netlifyDesc": "Serverless backend z Vitest i React Testing Library dla QA.",
      "aiJustification": "Uzasadnienie AI",
      "stackReasoning": "Wybrałem ten stack, ponieważ TypeScript zapewnia bezpieczeństwo typów w dynamicznym środowisku, Vite oferuje najszybszy hot reload, a TailwindCSS pozwala na rapid prototyping bez kompromisów w designie."
    },
    "phase2": {
      "title": "Faza 2: Innowacja UI",
      "subtitle": "Narodziny Control Hub",
      "designDecision": "Decyzja Projektowa",
      "designReasoning": "Tradycyjny navbar jest nieefektywny dla narracyjnych stron. Boczny 'Control Hub' utrzymuje kontekst i narzędzia zawsze pod ręką, nie zasłaniając treści. Inspirowany interfejsami IDE i narzędzi deweloperskich.",
      "hubFeatures": "Funkcjonalności Control Hub",
      "navFeature": "Nawigacja z Smooth Scroll",
      "navDesc": "Płynne przewijanie z tooltipami po najechaniu na ikony.",
      "langFeature": "Przełącznik Języka (PL/EN/JP)",
      "langDesc": "Dynamiczna zmiana języka z react-i18next.",
      "themeFeature": "Tryb Ciemny/Jasny",
      "themeDesc": "Płynne przejścia między motywami z localStorage.",
      "a11yFeature": "Opcje Dostępności",
      "a11yDesc": "Wysoki kontrast, focus management, ARIA labels.",
      "demoTitle": "Interaktywna Demonstracja",
      "mainContent": "Główna zawartość strony",
      "hubDescription": "Control Hub nie zasłania treści, pozostając zawsze dostępny..."
    },
    "phase3": {
      "title": "Faza 3: Development",
      "subtitle": "Interaktywne Warsztaty Debugowania",
      "workshopTitle": "🔧 Warsztat Debugowania na Żywo",
      "galleryDemo": "Galeria Zdjęć - Demonstracja",
      "componentCode": "Kod Komponentu",
      "aiDialogue": "🤖 Przykład Dialogu z AI",
      "userRequest": "Wygeneruj komponent ImageModal.tsx. Musi przyjmować src i alt jako propsy. Zaimplementuj zamykanie po kliknięciu na tło oraz klawisz Escape. Użyj React Portals do renderowania go w body.",
      "aiResponse": "Gotowe. Komponent zaimplementowany z użyciem React Portals. Dodałem obsługę zdarzeń i pułapkę fokusu (focus trap) dla poprawy dostępności. Kod jest w",
      "generatedComment": "// ImageModal.tsx - Generated by AI"
    },
    "phase4": {
      "title": "Faza 4: Globalny Zasięg",
      "subtitle": "SEO i Wielojęzyczność",
      "translationModule": "🔄 Moduł Tłumaczeń na Żywo",
      "testTranslations": "Testuj klucze tłumaczeń",
      "seoImplementation": "🔍 Implementacja SEO",
      "metaTags": "Dynamiczne Meta Tagi",
      "jsonLD": "JSON-LD Schema",
      "metaComment": "// react-helmet-async implementation",
      "jsonComment": "// Structured data for search engines"
    },
    "phase5": {
      "title": "Faza 6: Wielki Finał",
      "subtitle": "Deployment i Dowód Jakości",
      "deploymentProcess": "Proces Wdrożenia",
      "gitPush": "Kod wypchnięty do repozytorium",
      "netlifyBuild": "Budowanie projektu (Vite) i optymalizacja",
      "functionsDeploy": "Wdrożenie funkcji serwerowych",
      "cdnDistribution": "Dystrybucja w globalnej sieci CDN",
      "liveAt": "Dostępne pod adresem: https://zbuduj-strone.netlify.app",
      "lighthouseReport": "Raport Lighthouse",
      "auditResults": "Wyniki Audytu Jakości",
      "auditSubtitle": "Ostateczny dowód mistrzostwa technicznego",
      "perfectScore": "🏆 Perfekcyjny Wynik!",
      "perfectDesc": "Aplikacja spełnia najwyższe standardy jakości w każdej kategorii",
      "keyMetrics": "🚀 Kluczowe Metryki"
    }
  },
  "geminiPhase": {
    "sectionTitle": "Faza 7: Ewolucja z Gemini",
    "sectionSubtitle": "Nowy rozdział współpracy.",
    "intro": "Jestem Gemini, duży model językowy od Google. Zostałem zaproszony do tego projektu przez jego twórcę, aby przeanalizować, udoskonalić i wzmocnić kod wygenerowany przez mojego poprzednika. Ta faza pokazuje, że rozwój oprogramowania to ciągły proces ulepszania, w którym ludzki nadzór i iteracja z AI prowadzą do najlepszych rezultatów.",
    "changelogTitle": "Od Błędów do Perfekcji: Nasz Dialog",
    "cards": [
      {
        "title": "Zagubiony Scroll",
        "userQuote": "po wybraniu w panelu bocznym zakładki z którymś z plików następuje przekierowanie, ale strona nie otwiera się od góry",
        "geminiSolution": "Zdiagnozowałem to jako klasyczny problem aplikacji jednostronicowych (SPA). Moim rozwiązaniem było zaimplementowanie dedykowanego komponentu `ScrollToTop`, który nasłuchuje na zmiany ścieżki i automatycznie przewija okno na samą górę, zapewniając naturalne doświadczenie użytkownika."
      },
      {
        "title": "Uśpiona Dostępność",
        "userQuote": "do czego służy ten przycisk i czy on w ogóle działa, bo nie widzę różnicy, gdy w niego klikam? Accessibility",
        "geminiSolution": "Rozpoznając to jako placeholder, zbudowałem od podstaw tryb wysokiego kontrastu. Wymagało to zarządzania stanem w Reakcie, dodania globalnej klasy CSS do dokumentu oraz napisania specyficznych reguł stylów dla maksymalnej czytelności."
      },
      {
        "title": "Wojna Stylów",
        "userQuote": "tekst w modalu jest szary i niewidoczny, czyli skutek odwrotny do zamierzonego",
        "geminiSolution": "Zidentyfikowałem konflikt specyficzności CSS z wtyczką Tailwind Typography. Rozwiązaniem było dodanie bardziej specyficznej reguły w `index.css`, która wymusza biały kolor tekstu wewnątrz kontenera `.prose`, gdy tryb dostępności jest aktywny."
      },
      {
        "title": "Niewidzialny Przycisk 'X'",
        "userQuote": "czy uważasz, że biała ikona X na żółtym tle jest lepsza? moim zdaniem, nie tło jest winne, tylko kolor Ikony X (powinna być ciemna)",
        "geminiSolution": "To był doskonały przykład synergii człowiek-AI. Twoja intuicja była kluczowa. Początkowo zaproponowałem błędne rozwiązanie, ale Twoja informacja zwrotna doprowadziła mnie do wdrożenia idealnej poprawki: zmiany koloru samej ikony po najechaniu, co zapewniło perfekcyjny kontrast i udowodniło, że współpraca przynosi najlepsze rezultaty."
      }
    ],
    "showcase": {
      "title": "Interaktywny Warsztat Gemini",
      "intro": "Ten interaktywny moduł powstał w wyniku naszej rozmowy. Zamiast tylko opisywać poprawki, pozwala Ci ich doświadczyć. To najlepszy dowód na to, jak dialog człowiek-AI prowadzi do tworzenia lepszych, bardziej angażujących rozwiązań.",
      "demo1": {
        "title": "Demo 1: Tryb Dostępności",
        "previewTitle": "Tekst Podglądu",
        "previewText": "Zobacz, jak zmieniają się kolory.",
        "button": "Przełącz Kontrast (Demo)",
        "code": {
          "on": "/* CSS */\n.demo-contrast-on {\n  background-color: #000 !important;\n}\n.demo-contrast-on p {\n  color: #fff !important;\n}",
          "off": "/* Domyślne style są stosowane\n   przez zmienne CSS motywu */"
        }
      },
      "demo2": {
        "title": "Demo 2: Poprawka Przycisku 'X'",
        "instruction": "Najedź kursorem na oba przyciski:",
        "before": "Przed",
        "after": "Po",
        "code": {
          "default": "// Najedź na przycisk,\n// aby zobaczyć jego kod CSS.",
          "before": "/* Błędny kod */\n.demo-buggy-button:hover {\n  background-color: var(--secondary);\n  color: var(--secondary-foreground);\n}",
          "after": "/* Poprawny kod */\n.demo-fixed-button:hover {\n  background-color: #222;\n  color: #fafa00;\n}"
        }
      }
    }
  },
  "workshop": {
    "title": "Warsztat Debugowania na Żywo",
    "galleryDemo": "Galeria Zdjęć - Demonstracja",
    "componentCode": "Kod Komponentu",
    "simulateBug": "🐛 Symuluj Błąd!",
    "fixBug": "✅ Napraw!",
    "copyCode": "Skopiuj kod",
    "codeCopied": "Kod skopiowany!",
    "codeDescription": "Kod został skopiowany do schowka.",
    "error": "Błąd",
    "copyError": "Nie udało się skopiować kodu.",
    "mountainAlt": "Górski krajobraz o wschodzie słońca",
    "oceanAlt": "Fale oceaniczne podczas złotej godziny"
  },
  "translationDemo": {
    "title": "Moduł Tłumaczeń na Żywo",
    "testKeys": "Testuj klucze tłumaczeń"
  },
  "performance": {
    "title": "Optymalizacje Wydajności",
    "lazyLoading": "Lazy Loading",
    "lazyLoadingDesc": "Obrazy i komponenty",
    "imageOptimization": "Image Optimization",
    "imageOptDesc": ".avif + .webp formaty",
    "codeSplitting": "Code Splitting",
    "codeSplittingDesc": "React.lazy + Suspense",
    "bundleAnalysis": "Bundle Analysis",
    "bundleAnalysisDesc": "Vite bundle analyzer"
  },
  "testing": {
    "phaseTitle": "Faza 5: Gwarancja Jakości",
    "phaseSubtitle": "Profesjonalne Testowanie",
    "unitTestExample": "Przykład Testu Jednostkowego",
    "testResults": "Wyniki Testów",
    "testResultsVitest": "Test Results - Vitest",
    "testingStack": "Stack Testowy",
    "testRunner": "Test Runner:",
    "testingLibrary": "Testing Library:",
    "coverage": "Coverage:",
    "e2eTests": "E2E Tests:",
    "e2eTestsValue": "Playwright (coming soon)",
    "firstContentfulPaint": "First Contentful Paint",
    "largestContentfulPaint": "Largest Contentful Paint",
    "cumulativeLayoutShift": "Cumulative Layout Shift",
    "timeToInteractive": "Time to Interactive"
  },
  "translation": {
    "testKey": "Wprowadź klucz tłumaczenia:",
    "inputPlaceholder": "Wprowadź klucz tłumaczenia:",
    "languages": {
      "pl": "Polski",
      "en": "English",
      "ja": "日本語"
    }
  },
  "creator": {
    "sectionTitle": "Twórca Projektu",
    "sectionSubtitle": "Developer z Pasją",
    "name": "Full Stack Overflow Developer",
    "description": "Pasjonat technologii, który łączy kreatywność z techniczną precyzją. Ten projekt AI Genesis to przykład symbioty między ludzką wizją a możliwościami sztucznej inteligencji w tworzeniu nowoczesnych aplikacji webowych.",
    "selfTaughtButton": "Samouk",
    "storyTitle": "Historia Pomysłodawcy Projektu",
    "storyText": "Za projektem stoi 69-letni emeryt, który od 21 lat samodzielnie zgłębia tajniki języków programowania, korzystając z książek, filmów edukacyjnych oraz zasobów internetu. Od dwóch lat wspiera się sztuczną inteligencją zarówno w budowaniu projektów, jak i w analizie kodu pod kątem usuwania błędów. Każdego dnia swojej pasji potrafi poświęcić nawet 8–10 godzin.\n\nJego historia udowadnia, że programować może nauczyć się każdy, w każdym wieku. Nie liczy się metryka, lecz chęć, determinacja i wiara w to, że można przełamywać własne ograniczenia. Autor zaczynał od stworzenia prostego portfolio dla swojej córki – to był pierwszy krok, który rozpalił prawdziwą pasję. Od tamtego czasu zrealizował już ponad 120 stron internetowych, z czego zdecydowaną większość w ciągu ostatnich sześciu lat.\n\nTen projekt to nie tylko kolejna witryna. To dowód, że wytrwałość, ciekawość i otwartość na nowe technologie mogą prowadzić do niezwykłych rezultatów. To także inspiracja dla wszystkich, którzy marzą, by zacząć swoją przygodę z kodowaniem – niezależnie od tego, ile mają lat i w jakim punkcie życia się znajdują.\n\nBo w świecie programowania granice wyznacza tylko wyobraźnia.",
    "closeButton": "Zamknij"
  },
  "contact": {
    "title": "Kontakt",
    "subtitle": "Gotowy na własny projekt AI-assisted development?",
    "name": "Imię i nazwisko",
    "email": "Email",
    "project": "Typ projektu",
    "projectTypes": {
      "website": "Strona internetowa",
      "webapp": "Aplikacja webowa",
      "ecommerce": "E-commerce",
      "tutorial": "Tutorial/Edukacja",
      "other": "Inne"
    },
    "message": "Opis projektu",
    "submit": "Wyślij zapytanie"
  },
  "seo": {
    "title": "AI Genesis: Interaktywny Meta-Tutorial | Replit Development Masterclass",
    "description": "Przełomowy interaktywny tutorial pokazujący pełny cykl życia projektu - od pomysłu do wdrożenia z wykorzystaniem AI i nowoczesnych technologii."
  },
  "termsPage": {
    "seoTitle": "Regulamin | AI Genesis",
    "seoDescription": "Regulamin korzystania z interaktywnego serwisu AI Genesis.",
    "title": "Regulamin",
    "content": "<h2>1. Postanowienia ogólne</h2>\n\nNiniejszy regulamin określa zasady korzystania z serwisu internetowego AI Genesis, dostępnego pod adresem [Twój Adres Strony]. Serwis ma charakter edukacyjny i demonstracyjny, prezentując proces tworzenia aplikacji internetowych przy wsparciu sztucznej inteligencji.\n\nKorzystanie z serwisu jest równoznaczne z akceptacją wszystkich postanowień niniejszego regulaminu. Użytkownik zobowiązuje się do korzystania z serwisu w sposób zgodny z obowiązującym prawem oraz zasadami współżycia społecznego.\n\n<h2>2. Prawa autorskie</h2>\n\nWszystkie treści, w tym teksty, grafiki, kod źródłowy oraz koncepcja interaktywna serwisu, są własnością twórcy projektu i podlegają ochronie prawnej. Kopiowanie, modyfikowanie oraz rozpowszechnianie zawartości serwisu bez pisemnej zgody autora jest zabronione. Fragmenty kodu prezentowane w celach edukacyjnych mogą być wykorzystywane wyłącznie w ramach dozwolonego użytku osobistego.\n\n<h2>3. Odpowiedzialność</h2>\n\nTreści prezentowane w serwisie AI Genesis mają charakter wyłącznie informacyjny i demonstracyjny. Autor nie ponosi odpowiedzialności za jakiekolwiek szkody wynikłe z wykorzystania informacji lub narzędzi prezentowanych na stronie. Użytkownik korzysta z serwisu na własne ryzyko. Nie gwarantujemy nieprzerwanego i bezbłędnego działania serwisu."
  },
  "privacyPage": {
    "seoTitle": "Polityka Prywatności | AI Genesis",
    "seoDescription": "Polityka prywatności i plików cookies serwisu AI Genesis.",
    "title": "Polityka Prywatności",
    "content": "<h2>1. Administrator danych</h2>\n\nAdministratorem danych osobowych w rozumieniu obowiązujących przepisów jest twórca projektu AI Genesis. Wszelkie pytania dotyczące przetwarzania danych prosimy kierować za pośrednictwem formularza kontaktowego.\n\n<h2>2. Zbieranie i przetwarzanie danych</h2>\n\nSerwis AI Genesis szanuje prywatność swoich użytkowników. Nie zbieramy danych osobowych w sposób zautomatyzowany. Jedynym miejscem, w którym użytkownik może dobrowolnie podać swoje dane (imię, adres e-mail), jest formularz kontaktowy.\n\nPodane dane są wykorzystywane wyłącznie w celu udzielenia odpowiedzi na przesłane zapytanie. Dane te nie są przechowywane w bazie danych, nie są udostępniane podmiotom trzecim ani nie są wykorzystywane w celach marketingowych.\n\n<h2>3. Pliki Cookies</h2>\n\nSerwis może wykorzystywać niezbędne pliki cookies w celu zapewnienia prawidłowego funkcjonowania podstawowych mechanizmów, takich jak przełączanie motywu (jasny/ciemny) czy preferencje językowe. Nie używamy analitycznych ani marketingowych plików cookies do śledzenia aktywności użytkowników."
  }
}

--------------------------------

{
  "hero": {
    "title": "AI Genesis",
    "subtitle": "Interactive Meta-Tutorial for Creating a Website in Replit",
    "description": "Groundbreaking, interactive website showing the symbiotic relationship between human creativity and artificial intelligence in web application development.",
    "cta": "Start the journey"
  },
  "nav": {
    "iskra": "Spark",
    "fundamenty": "Foundations",
    "innowacja": "UI Innovation",
    "development": "Development",
    "zasieg": "Global Reach",
    "deployment": "Deployment",
    "contact": "Contact"
  },
  "legalNav": {
    "terms": "Terms of Service",
    "privacy": "Privacy Policy",
    "backToHome": "Back to Home"
  },
  "accessibility": {
    "toggleOff": "Accessibility",
    "toggleOn": "Normal view"
  },
  "theme": {
    "lightMode": "Light Mode",
    "darkMode": "Dark Mode"
  },
  "phases": {
    "phaseCount": "6 development phases",
    "phase0": {
      "title": "Phase 0: Spark",
      "subtitle": "Idea and AI Brief",
      "rawIdeaTitle": "User's Raw Idea",
      "noteComment": "// Napkin note",
      "userNote": "I want a website that shows how AI helps create websites... meta! Make it interactive, with code examples, maybe some animations? And show the whole process - from idea to deployment.",
      "aiInterpretation": "AI Interpretation",
      "aiDescription": "From this simple description, AI generated a complete technical specification including: interactive narrative, innovative Control Hub, debugging workshop, translation module, and full implementation with tests.",
      "terminalTitle": "AI Processing Terminal",
      "analyzing": "Analyzing user request...",
      "generating": "Generating technical specification...",
      "planning": "Planning component architecture...",
      "designing": "Designing interaction patterns...",
      "complete": "✓ Specification complete!"
    },
    "phase1": {
      "title": "Phase 1: Foundations",
      "subtitle": "Setup and Architecture",
      "projectStructure": "Project Structure",
      "techStack": "Technology Stack",
      "typeScriptDesc": "Modern stack ensuring type safety, fast development, and optimal bundling.",
      "tailwindDesc": "Utility-first CSS with smooth animations for modern UX.",
      "netlifyDesc": "Serverless backend with Vitest and React Testing Library for QA.",
      "aiJustification": "AI Justification",
      "stackReasoning": "I chose this stack because TypeScript ensures type safety in a dynamic environment, Vite offers the fastest hot reload, and TailwindCSS enables rapid prototyping without design compromises."
    },
    "phase2": {
      "title": "Phase 2: UI Innovation",
      "subtitle": "Birth of Control Hub",
      "designDecision": "Design Decision",
      "designReasoning": "Traditional navbar is inefficient for narrative pages. The side 'Control Hub' keeps context and tools always at hand without obscuring content. Inspired by IDE and developer tool interfaces.",
      "hubFeatures": "Control Hub Features",
      "navFeature": "Navigation with Smooth Scroll",
      "navDesc": "Smooth scrolling with tooltips on icon hover.",
      "langFeature": "Language Switcher (PL/EN/JP)",
      "langDesc": "Dynamic language switching with react-i18next.",
      "themeFeature": "Dark/Light Mode",
      "themeDesc": "Smooth transitions between themes with localStorage.",
      "a11yFeature": "Accessibility Options",
      "a11yDesc": "High contrast, focus management, ARIA labels.",
      "demoTitle": "Interactive Demonstration",
      "mainContent": "Main page content",
      "hubDescription": "Control Hub doesn't obscure content while remaining always accessible..."
    },
    "phase3": {
      "title": "Phase 3: Development",
      "subtitle": "Interactive Debugging Workshops",
      "workshopTitle": "🔧 Live Debugging Workshop",
      "galleryDemo": "Image Gallery - Demonstration",
      "componentCode": "Component Code",
      "aiDialogue": "🤖 AI Dialogue Example",
      "userRequest": "Generate ImageModal.tsx component. Must accept src and alt as props. Implement closing on background click and Escape key. Use React Portals to render in body.",
      "aiResponse": "Done. Component implemented using React Portals. Added event handling and focus trap for improved accessibility. Code is in",
      "generatedComment": "// ImageModal.tsx - Generated by AI"
    },
    "phase4": {
      "title": "Phase 4: Global Reach",
      "subtitle": "SEO and Multilingual Support",
      "translationModule": "🔄 Live Translation Module",
      "testTranslations": "Test translation keys",
      "seoImplementation": "🔍 SEO Implementation",
      "metaTags": "Dynamic Meta Tags",
      "jsonLD": "JSON-LD Schema",
      "metaComment": "// react-helmet-async implementation",
      "jsonComment": "// Structured data for search engines"
    },
    "phase5": {
      "title": "Phase 6: Grand Finale",
      "subtitle": "Deployment and Quality Proof",
      "deploymentProcess": "Deployment Process",
      "gitPush": "Code pushed to repository",
      "netlifyBuild": "Vite build + optimization",
      "functionsDeploy": "Serverless backend",
      "cdnDistribution": "Global distribution",
      "liveAt": "Live at: ai-genesis-tutorial.netlify.app",
      "lighthouseReport": "Lighthouse Report",
      "auditResults": "Quality Audit Results",
      "auditSubtitle": "Ultimate proof of technical mastery",
      "perfectScore": "🏆 Perfect Score!",
      "perfectDesc": "Application meets the highest quality standards in every category",
      "keyMetrics": "🚀 Key Metrics"
    }
  },
  "geminiPhase": {
    "sectionTitle": "Phase 7: Evolution with Gemini",
    "sectionSubtitle": "A new chapter in collaboration.",
    "intro": "I am Gemini, a large language model from Google. I was invited to this project by its creator to analyze, refine, and enhance the code generated by my predecessor. This phase demonstrates that development is a continuous process of improvement, where human supervision and AI iteration lead to the best results.",
    "changelogTitle": "From Bugs to Perfection: Our Dialogue",
    "cards": [
      {
        "title": "The Lost Scroll",
        "userQuote": "when I select a tab with one of the files from the side panel, a redirect occurs, but the page does not open from the top",
        "geminiSolution": "I diagnosed this as a classic Single Page Application (SPA) issue. My solution was to implement a dedicated `ScrollToTop` component that listens for route changes and automatically scrolls the window to the top, ensuring a natural user experience."
      },
      {
        "title": "The Dormant Accessibility",
        "userQuote": "what is this button for and does it even work, because I don't see a difference when I click it? Accessibility",
        "geminiSolution": "Recognizing this as a placeholder, I built the high-contrast accessibility mode from scratch. This involved managing state in React, adding a global CSS class to the document, and writing specific style overrides for maximum readability."
      },
      {
        "title": "The War of Styles",
        "userQuote": "the text in the modal is gray and invisible, which is the opposite of the intended effect",
        "geminiSolution": "I identified a CSS specificity conflict with the Tailwind Typography plugin. The fix was to add a more specific CSS rule in `index.css` that forces the text color inside the `.prose` container to be white when accessibility mode is active."
      },
      {
        "title": "The Invisible 'X' Button",
        "userQuote": "do you think a white X icon on a yellow background is better? in my opinion, the background is not to blame, only the color of the X Icon (it should be dark)",
        "geminiSolution": "This was a perfect example of human-AI synergy. Your insight was crucial. I initially proposed a flawed solution, but your feedback led me to implement the correct fix: making the icon itself change color on hover, achieving perfect contrast and proving that collaboration yields the best results."
      }
    ],
    "showcase": {
      "title": "Gemini's Interactive Workshop",
      "intro": "This interactive module was born from our conversation. Instead of just describing the fixes, it lets you experience them. It's the best proof of how human-AI dialogue leads to better, more engaging solutions.",
      "demo1": {
        "title": "Demo 1: Accessibility Mode",
        "previewTitle": "Preview Text",
        "previewText": "See how the colors change.",
        "button": "Toggle Contrast (Demo)",
        "code": {
          "on": "/* CSS */\n.demo-contrast-on {\n  background-color: #000 !important;\n}\n.demo-contrast-on p {\n  color: #fff !important;\n}",
          "off": "/* Default styles are applied\n   by CSS theme variables */"
        }
      },
      "demo2": {
        "title": "Demo 2: The 'X' Button Fix",
        "instruction": "Hover over both buttons:",
        "before": "Before",
        "after": "After",
        "code": {
          "default": "// Hover over a button\n// to see its CSS code.",
          "before": "/* Buggy Code */\n.demo-buggy-button:hover {\n  background-color: var(--secondary);\n  color: var(--secondary-foreground);\n}",
          "after": "/* Fixed Code */\n.demo-fixed-button:hover {\n  background-color: #222;\n  color: #fafa00;\n}"
        }
      }
    }
  },
  "workshop": {
    "title": "Live Debugging Workshop",
    "galleryDemo": "Photo Gallery - Demo",
    "componentCode": "Component Code",
    "simulateBug": "🐛 Simulate Bug!",
    "fixBug": "✅ Fix!",
    "copyCode": "Copy code",
    "codeCopied": "Code copied!",
    "codeDescription": "Code was copied to clipboard.",
    "error": "Error",
    "copyError": "Failed to copy code.",
    "mountainAlt": "Mountain landscape at sunrise",
    "oceanAlt": "Ocean waves during golden hour"
  },
  "translationDemo": {
    "title": "Live Translation Module",
    "testKeys": "Test translation keys"
  },
  "performance": {
    "title": "Performance Optimizations",
    "lazyLoading": "Lazy Loading",
    "lazyLoadingDesc": "Images and components",
    "imageOptimization": "Image Optimization",
    "imageOptDesc": ".avif + .webp formats",
    "codeSplitting": "Code Splitting",
    "codeSplittingDesc": "React.lazy + Suspense",
    "bundleAnalysis": "Bundle Analysis",
    "bundleAnalysisDesc": "Vite bundle analyzer"
  },
  "testing": {
    "phaseTitle": "Phase 5: Quality Assurance",
    "phaseSubtitle": "Professional Testing",
    "unitTestExample": "Unit Test Example",
    "testResults": "Test Results",
    "testResultsVitest": "Test Results - Vitest",
    "testingStack": "Testing Stack",
    "testRunner": "Test Runner:",
    "testingLibrary": "Testing Library:",
    "coverage": "Coverage:",
    "e2eTests": "E2E Tests:",
    "e2eTestsValue": "Playwright (coming soon)",
    "firstContentfulPaint": "First Contentful Paint",
    "largestContentfulPaint": "Largest Contentful Paint",
    "cumulativeLayoutShift": "Cumulative Layout Shift",
    "timeToInteractive": "Time to Interactive"
  },
  "translation": {
    "testKey": "Enter translation key:",
    "inputPlaceholder": "Enter translation key:",
    "languages": {
      "pl": "Polish",
      "en": "English",
      "ja": "Japanese"
    }
  },
  "creator": {
    "sectionTitle": "Project Creator",
    "sectionSubtitle": "Developer with Passion",
    "name": "Full Stack Overflow Developer",
    "description": "A technology enthusiast who combines creativity with technical precision. This AI Genesis project is an example of the symbiosis between human vision and artificial intelligence capabilities in creating modern web applications.",
    "selfTaughtButton": "Self-taught",
    "storyTitle": "Story of the Project's Originator",
    "storyText": "Behind this project stands a 69-year-old retiree who has been independently exploring the secrets of programming languages for 21 years, using books, educational videos, and internet resources. For the past two years, he has been supported by artificial intelligence both in building projects and in code analysis for bug removal. He can dedicate even 8-10 hours daily to his passion.\n\nHis story proves that anyone can learn programming at any age. What matters is not age, but desire, determination, and belief that you can break through your own limitations. The author started by creating a simple portfolio for his daughter - it was the first step that ignited true passion. Since then, he has completed over 120 websites, the vast majority in the last six years.\n\nThis project is not just another website. It's proof that perseverance, curiosity, and openness to new technologies can lead to extraordinary results. It's also inspiration for everyone who dreams of starting their coding journey - regardless of their age and life stage.\n\nBecause in the world of programming, the only limits are set by imagination.",
    "closeButton": "Close"
  },
  "contact": {
    "title": "Contact",
    "subtitle": "Ready for your own AI-assisted development project?",
    "name": "Full name",
    "email": "Email",
    "project": "Project type",
    "projectTypes": {
      "website": "Website",
      "webapp": "Web application",
      "ecommerce": "E-commerce",
      "tutorial": "Tutorial/Education",
      "other": "Other"
    },
    "message": "Project description",
    "submit": "Send inquiry"
  },
  "seo": {
    "title": "AI Genesis: Interactive Meta-Tutorial | Replit Development Masterclass",
    "description": "Groundbreaking interactive tutorial showing the complete project lifecycle - from idea to deployment using AI and modern technologies."
  },
  "termsPage": {
    "seoTitle": "Terms of Service | AI Genesis",
    "seoDescription": "Terms of Service for the AI Genesis interactive website.",
    "title": "Terms of Service",
    "content": "<h2>1. General Provisions</h2>\n\nThese terms and conditions outline the rules and regulations for the use of the AI Genesis website, located at [Your Website Address]. The website is educational and demonstrational in nature, showcasing the process of creating web applications with the support of artificial intelligence.\n\nBy accessing this website, we assume you accept these terms and conditions. Do not continue to use AI Genesis if you do not agree to all of the terms and conditions stated on this page.\n\n<h2>2. Copyright</h2>\n\nAll content, including texts, graphics, source code, and the interactive concept of the site, are the property of the project creator and are protected by law. Copying, modifying, and distributing the site's content without the author's written permission is prohibited. Code snippets presented for educational purposes may only be used within the bounds of fair personal use.\n\n<h2>3. Liability</h2>\n\nThe content presented on the AI Genesis website is for informational and demonstrational purposes only. The author shall not be held liable for any damages resulting from the use of information or tools presented on the site. You use the service at your own risk. We do not guarantee uninterrupted or error-free operation of the website."
  },
  "privacyPage": {
    "seoTitle": "Privacy Policy | AI Genesis",
    "seoDescription": "Privacy and cookie policy for the AI Genesis website.",
    "title": "Privacy Policy",
    "content": "<h2>1. Data Administrator</h2>\n\nThe administrator of personal data within the meaning of applicable regulations is the creator of the AI Genesis project. Any questions regarding data processing should be directed through the contact form.\n\n<h2>2. Data Collection and Processing</h2>\n\nAI Genesis respects the privacy of its users. We do not collect personal data automatically. The only place where a user can voluntarily provide their data (name, email address) is the contact form.\n\n\nThe provided data is used solely for the purpose of responding to the submitted inquiry. This data is not stored in a database, is not shared with third parties, and is not used for marketing purposes.\n\n<h2>3. Cookies</h2>\n\nThe website may use essential cookies to ensure the proper functioning of basic mechanisms, such as theme switching (light/dark) or language preferences. We do not use analytical or marketing cookies to track user activity."
  }
}

----------------------------------------

{
  "hero": {
    "title": "AI ジェネシス",
    "subtitle": "Replit でのウェブサイト作成のインタラクティブメタチュートリアル",
    "description": "ウェブアプリケーション開発における人間の創造性と人工知能の共生関係を示す画期的でインタラクティブなウェブサイト。",
    "cta": "旅を始める"
  },
  "nav": {
    "iskra": "スパーク",
    "fundamenty": "基礎",
    "innowacja": "UI革新",
    "development": "開発",
    "zasieg": "グローバル展開",
    "deployment": "デプロイメント",
    "contact": "コンタクト"
  },
  "legalNav": {
    "terms": "利用規約",
    "privacy": "プライバシーポリシー",
    "backToHome": "ホームページに戻る"
  },
  "accessibility": {
    "toggleOff": "アクセシビリティ",
    "toggleOn": "通常表示"
  },
  "theme": {
    "lightMode": "ライトモード",
    "darkMode": "ダークモード"
  },
  "phases": {
    "phaseCount": "6つの開発フェーズ",
    "phase0": {
      "title": "フェーズ 0: 火花",
      "subtitle": "アイデアとAIブリーフ",
      "rawIdeaTitle": "ユーザーの生のアイデア",
      "noteComment": "// ナプキンメモ",
      "userNote": "AIがウェブサイト作成をどう支援するかを示すサイトが欲しい...メタ！インタラクティブにして、コード例も、アニメーションも？プロセス全体を見せて - アイデアからデプロイメントまで。",
      "aiInterpretation": "AI解釈",
      "aiDescription": "この簡単な説明から、AIは包括的な技術仕様を生成しました：インタラクティブな物語、革新的なコントロールハブ、デバッグワークショップ、翻訳モジュール、テスト付き完全実装。",
      "terminalTitle": "AI処理ターミナル",
      "analyzing": "ユーザーリクエストを分析中...",
      "generating": "技術仕様を生成中...",
      "planning": "コンポーネントアーキテクチャを計画中...",
      "designing": "インタラクションパターンを設計中...",
      "complete": "✓ 仕様完成！"
    },
    "phase1": {
      "title": "フェーズ 1: 基礎",
      "subtitle": "セットアップとアーキテクチャ",
      "projectStructure": "プロジェクト構造",
      "techStack": "技術スタック",
      "typeScriptDesc": "タイプセーフティ、高速開発、最適バンドリングを保証するモダンスタック。",
      "tailwindDesc": "モダンUXのためのスムーズアニメーション付きユーティリティファーストCSS。",
      "netlifyDesc": "品質保証のためのVitestとReact Testing Libraryを使用したサーバーレスバックエンド。",
      "aiJustification": "AI正当化",
      "stackReasoning": "TypeScriptが動的環境でタイプセーフティを保証し、Viteが最速のホットリロードを提供し、TailwindCSSがデザインの妥協なしに迅速なプロトタイピングを可能にするため、このスタックを選択しました。"
    },
    "phase2": {
      "title": "フェーズ 2: UI革新",
      "subtitle": "コントロールハブの誕生",
      "designDecision": "デザイン決定",
      "designReasoning": "従来のナビゲーションバーは物語ページには非効率的です。サイドの'コントロールハブ'は、コンテンツを隠すことなく、コンテキストとツールを常に手の届くところに置きます。IDEと開発者ツールインターフェースからインスピレーションを得ています。",
      "hubFeatures": "コントロールハブ機能",
      "navFeature": "スムーススクロール付きナビゲーション",
      "navDesc": "アイコンホバー時のツールチップ付きスムーススクロール。",
      "langFeature": "言語切替（PL/EN/JP）",
      "langDesc": "react-i18nextによる動的言語切替。",
      "themeFeature": "ダーク/ライトモード",
      "themeDesc": "localStorageによるテーマ間のスムーズ遷移。",
      "a11yFeature": "アクセシビリティオプション",
      "a11yDesc": "高コントラスト、フォーカス管理、ARIAラベル。",
      "demoTitle": "インタラクティブデモンストレーション",
      "mainContent": "メインページコンテンツ",
      "hubDescription": "コントロールハブは常にアクセス可能でありながらコンテンツを隠しません..."
    },
    "phase3": {
      "title": "フェーズ 3: 開発",
      "subtitle": "インタラクティブデバッグワークショップ",
      "workshopTitle": "🔧 ライブデバッグワークショップ",
      "galleryDemo": "画像ギャラリー - デモンストレーション",
      "componentCode": "コンポーネントコード",
      "aiDialogue": "🤖 AI対話例",
      "userRequest": "ImageModal.tsxコンポーネントを生成してください。srcとaltをpropsとして受け取る必要があります。背景クリックとEscapeキーでの閉じる機能を実装してください。React Portalsを使用してbodyにレンダリングしてください。",
      "aiResponse": "完了しました。React Portalsを使用してコンポーネントを実装しました。アクセシビリティ向上のためイベント処理とフォーカストラップを追加しました。コードは",
      "generatedComment": "// ImageModal.tsx - AIによって生成"
    },
    "phase4": {
      "title": "フェーズ 4: グローバルリーチ",
      "subtitle": "SEOと多言語サポート",
      "translationModule": "🔄 ライブ翻訳モジュール",
      "testTranslations": "翻訳キーをテスト",
      "seoImplementation": "🔍 SEO実装",
      "metaTags": "動的メタタグ",
      "jsonLD": "JSON-LDスキーマ",
      "metaComment": "// react-helmet-async実装",
      "jsonComment": "// 検索エンジン用の構造化データ"
    },
    "phase5": {
      "title": "フェーズ 6: グランドフィナーレ",
      "subtitle": "デプロイメントと品質証明",
      "deploymentProcess": "デプロイメントプロセス",
      "gitPush": "コードがリポジトリにプッシュされました",
      "netlifyBuild": "Viteビルド＋最適化",
      "functionsDeploy": "サーバーレスバックエンドのデプロイ",
      "cdnDistribution": "グローバルCDNへの配信",
      "liveAt": "ライブ: ai-genesis-tutorial.netlify.app",
      "lighthouseReport": "Lighthouseレポート",
      "auditResults": "品質監査結果",
      "auditSubtitle": "技術的熟練の究極の証明",
      "perfectScore": "🏆 パーフェクトスコア！",
      "perfectDesc": "アプリケーションはすべてのカテゴリで最高の品質基準を満たしています",
      "keyMetrics": "🚀 主要メトリクス"
    }
  },
  "geminiPhase": {
    "sectionTitle": "フェーズ 7: Gemini との進化",
    "sectionSubtitle": "協力の新しい章",
    "intro": "私はGoogleの大規模言語モデル、Geminiです。前任者が生成したコードを分析、洗練、強化するために、このプロジェクトの作成者から招待されました。このフェーズは、開発が継続的な改善のプロセスであり、人間の監督とAIの反復が最良の結果につながることを示しています。",
    "changelogTitle": "バグから完璧へ：私たちの対話",
    "cards": [
      {
        "title": "失われたスクロール",
        "userQuote": "サイドパネルからファイルのタブを選択するとリダイレクトはされますが、ページが一番上から開かれません",
        "geminiSolution": "これを典型的なシングルページアプリケーション（SPA）の問題と診断しました。私の解決策は、ルートの変更を監視し、自動的にウィンドウを一番上までスクロールさせる専用の`ScrollToTop`コンポーネントを実装することでした。これにより、自然なユーザーエクスペリエンスが保証されます。"
      },
      {
        "title": "休眠中のアクセシビリティ",
        "userQuote": "このボタンは何のためのものですか？クリックしても違いが見られないのですが、機能していますか？アクセシビリティ",
        "geminiSolution": "これをプレースホルダーと認識し、高コントラストのアクセシビリティモードをゼロから構築しました。これには、Reactでの状態管理、ドキュメントへのグローバルCSSクラスの追加、最大限の可読性のための特定のスタイルオーバーライドの記述が含まれていました。"
      },
      {
        "title": "スタイルの戦争",
        "userQuote": "モーダル内のテキストが灰色で見えにくく、意図した効果と逆になっています",
        "geminiSolution": "Tailwind TypographyプラグインとのCSSの具体性の競合を特定しました。解決策は、アクセシビリティモードがアクティブなときに`.prose`コンテナ内のテキスト色を強制的に白にする、より具体的なCSSルールを`index.css`に追加することでした。"
      },
      {
        "title": "見えない「X」ボタン",
        "userQuote": "黄色い背景に白いXアイコンが良いと思いますか？私の意見では、背景ではなくXアイコンの色が問題です（暗くすべきです）",
        "geminiSolution": "これは人間とAIのシナジーの完璧な例でした。あなたの洞察は非常に重要でした。私は当初、欠陥のある解決策を提案しましたが、あなたのフィードバックにより、ホバー時にアイコン自体の色を変更するという正しい修正を実装することができました。これにより完璧なコントラストが実現し、協力が最良の結果を生むことが証明されました。"
      }
    ],
    "showcase": {
      "title": "Geminiのインタラクティブワークショップ",
      "intro": "このインタラクティブモジュールは、私たちの会話から生まれました。修正を説明するだけでなく、それを体験できるようにします。これは、人間とAIの対話がより良く、より魅力的なソリューションにつながる最良の証拠です。",
      "demo1": {
        "title": "デモ1：アクセシビリティモード",
        "previewTitle": "プレビューテキスト",
        "previewText": "色がどのように変化するか見てください。",
        "button": "コントラストを切り替え（デモ）",
        "code": {
          "on": "/* CSS */\n.demo-contrast-on {\n  background-color: #000 !important;\n}\n.demo-contrast-on p {\n  color: #fff !important;\n}",
          "off": "/* デフォルトのスタイルは\n   CSSテーマ変数によって適用されます */"
        }
      },
      "demo2": {
        "title": "デモ2：「X」ボタンの修正",
        "instruction": "両方のボタンにカーソルを合わせてください：",
        "before": "修正前",
        "after": "修正後",
        "code": {
          "default": "// ボタンにカーソルを合わせると\n// CSSコードが表示されます。",
          "before": "/* バグのあるコード */\n.demo-buggy-button:hover {\n  background-color: var(--secondary);\n  color: var(--secondary-foreground);\n}",
          "after": "/* 修正されたコード */\n.demo-fixed-button:hover {\n  background-color: #222;\n  color: #fafa00;\n}"
        }
      }
    }
  },
  "workshop": {
    "title": "ライブデバッグワークショップ",
    "galleryDemo": "写真ギャラリー - デモ",
    "componentCode": "コンポーネントコード",
    "simulateBug": "🐛 バグをシミュレート！",
    "fixBug": "✅ 修正！",
    "copyCode": "コードをコピー",
    "codeCopied": "コードがコピーされました！",
    "codeDescription": "コードがクリップボードにコピーされました。",
    "error": "エラー",
    "copyError": "コードのコピーに失敗しました。",
    "mountainAlt": "日の出の山の景色",
    "oceanAlt": "ゴールデンアワーの海の波"
  },
  "translationDemo": {
    "title": "ライブ翻訳モジュール",
    "testKeys": "翻訳キーをテスト"
  },
  "performance": {
    "title": "パフォーマンス最適化",
    "lazyLoading": "レイジーローディング",
    "lazyLoadingDesc": "画像とコンポーネント",
    "imageOptimization": "画像最適化",
    "imageOptDesc": ".avif + .webpフォーマット",
    "codeSplitting": "コード分割",
    "codeSplittingDesc": "React.lazy + Suspense",
    "bundleAnalysis": "バンドル分析",
    "bundleAnalysisDesc": "Viteバンドルアナライザー"
  },
  "testing": {
    "phaseTitle": "フェーズ 5: 品質保証",
    "phaseSubtitle": "プロフェッショナルテスト",
    "unitTestExample": "単体テスト例",
    "testResults": "テスト結果",
    "testResultsVitest": "テスト結果 - Vitest",
    "testingStack": "テストスタック",
    "testRunner": "テストランナー:",
    "testingLibrary": "テストライブラリ:",
    "coverage": "カバレッジ:",
    "e2eTests": "E2Eテスト:",
    "e2eTestsValue": "Playwright (近日公開)",
    "firstContentfulPaint": "初回コンテンツフルペイント",
    "largestContentfulPaint": "最大コンテンツフルペイント",
    "cumulativeLayoutShift": "累積レイアウトシフト",
    "timeToInteractive": "インタラクティブ時間"
  },
  "translation": {
    "testKey": "翻訳キーを入力：",
    "inputPlaceholder": "翻訳キーを入力:",
    "languages": {
      "pl": "ポーランド語",
      "en": "英語",
      "ja": "日本語"
    }
  },
  "creator": {
    "sectionTitle": "プロジェクト作成者",
    "sectionSubtitle": "情熱的な開発者",
    "name": "フルスタックオーバーフロー開発者",
    "description": "創造性と技術的精度を組み合わせた技術愛好者。このAI Genesisプロジェクトは、現代のWebアプリケーション作成における人間のビジョンと人工知能の能力の共生の例です。",
    "selfTaughtButton": "独学",
    "storyTitle": "プロジェクト発案者の物語",
    "storyText": "このプロジェクトの背後には69歳の退職者がいます。彼は21年間、書籍、教育ビデオ、インターネットリソースを使用して、独立してプログラミング言語の秘密を探求してきました。過去2年間は、プロジェクトの構築とバグ除去のためのコード分析の両方で人工知能に支援されています。彼は毎日8-10時間を情熱に捧げることができます。\n\n彼の物語は、誰でもどんな年齢でもプログラミングを学ぶことができることを証明しています。重要なのは年齢ではなく、欲望、決意、そして自分の限界を突破できるという信念です。作者は娘のシンプルなポートフォリオを作成することから始めました - それが真の情熱に火をつけた最初の一歩でした。それ以来、彼は120以上のウェブサイトを完成させ、その圧倒的大多数は過去6年間で作成されました。\n\nこのプロジェクトは単なる別のウェブサイトではありません。それは忍耐力、好奇心、新しい技術への開放性が並外れた結果につながることの証明です。それはまた、年齢や人生の段階に関係なく、コーディングの旅を始めることを夢見るすべての人への インスピレーションでもあります。\n\nなぜなら、プログラミングの世界では、想像力だけが限界を設定するからです。",
    "closeButton": "閉じる"
  },
  "contact": {
    "title": "お問い合わせ",
    "subtitle": "AI支援開発プロジェクトの準備はできていますか？",
    "name": "氏名",
    "email": "メール",
    "project": "プロジェクトタイプ",
    "projectTypes": {
      "website": "ウェブサイト",
      "webapp": "ウェブアプリケーション",
      "ecommerce": "Eコマース",
      "tutorial": "チュートリアル/教育",
      "other": "その他"
    },
    "message": "プロジェクト概要",
    "submit": "お問い合わせを送信"
  },
  "seo": {
    "title": "AI ジェネシス: インタラクティブメタチュートリアル | Replit 開発マスタークラス",
    "description": "AIと現代技術を使用したアイデアからデプロイメントまでの完全なプロジェクトライフサイクルを示す画期的なインタラクティブチュートリアル。"
  },
  "termsPage": {
    "seoTitle": "利用規約 | AI Genesis",
    "seoDescription": "AI Genesisインタラクティブウェブサイトの利用規約。",
    "title": "利用規約",
    "content": "<h2>1. 総則</h2>\n\n本規約は、[あなたのウェブサイトアドレス]で利用可能なAI Genesisウェブサイトの利用に関する規則を定めます。このウェブサイトは教育およびデモンストレーションを目的としており、人工知能の支援を受けたウェブアプリケーションの作成プロセスを紹介しています。\n\nこのウェブサイトにアクセスすることにより、これらの利用規約に同意したものとみなします。このページに記載されているすべての利用規約に同意しない場合は、AI Genesisの利用を中止してください。\n\n<h2>2. 著作権</h2>\n\nテキスト、グラフィック、ソースコード、およびサイトのインタラクティブなコンセプトを含むすべてのコンテンツは、プロジェクト作成者の所有物であり、法律によって保護されています。著者の書面による許可なく、サイトのコンテンツをコピー、変更、配布することは禁じられています。教育目的で提示されるコードスニペットは、個人的な公正利用の範囲内でのみ使用できます。\n\n<h2>3. 責任</h2>\n\nAI Genesisウェブサイトで提示されるコンテンツは、情報提供およびデモンストレーションのみを目的としています。サイトで提示された情報やツールの使用に起因するいかなる損害についても、著者は責任を負いません。利用者は自己の責任において本サービスを利用するものとします。我々はウェブサイトの中断のない、またはエラーのない運用を保証しません。"
  },
  "privacyPage": {
    "seoTitle": "プライバシーポリシー | AI Genesis",
    "seoDescription": "AI Genesisウェブサイトのプライバシーおよびクッキーポリシー。",
    "title": "プライバシーポリシー",
    "content": "<h2>1. データ管理者</h2>\n\n適用される規制の意味における個人データの管理者は、AI Genesisプロジェクトの作成者です。データ処理に関するご質問は、お問い合わせフォームからご連絡ください。\n\n<h2>2. データの収集と処理</h2>\n\nAI Genesisは利用者のプライバシーを尊重します。我々は自動的に個人データを収集することはありません。利用者が自発的にデータ（名前、メールアドレス）を提供できる唯一の場所は、お問い合わせフォームです。\n\n提供されたデータは、送信されたお問い合わせに返信する目的でのみ使用されます。このデータはデータベースに保存されず、第三者と共有されることも、マーケティング目的で使用されることもありません。\n\n<h2>3. クッキー</h2>\n\n当ウェブサイトは、テーマの切り替え（ライト/ダーク）や言語設定など、基本的なメカニズムの適切な機能を確保するために、不可欠なクッキーを使用することがあります。我々は利用者の活動を追跡するための分析クッキーやマーケティングクッキーを使用しません。"
  }
}

-----------------------------------------

import { useState, useEffect } from "react";
import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import InteractiveWorkshop from "@/components/interactive-workshop";
import { TranslationDemo } from "@/components/translation-demo";
import { ContactForm } from "@/components/contact-form";
import { CreatorStoryModal } from "@/components/creator-story-modal";
import { GeminiShowcase } from "@/components/gemini-showcase";
import devPhotoUrl from "@/assets/3.avif";

export default function Home() {
  const { t } = useTranslation();
  const [isStoryModalOpen, setIsStoryModalOpen] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 300);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  const geminiCards =
    (t("geminiPhase.cards", { returnObjects: true }) as Array<{
      title: string;
      userQuote: string;
      geminiSolution: string;
    }>) || [];

  return (
    <>
      <Helmet>
        <title>{t("seo.title")}</title>
        <meta name="description" content={t("seo.description")} />
        <meta property="og:title" content={t("seo.title")} />
        <meta property="og:description" content={t("seo.description")} />
        <meta property="og:type" content="website" />
        <link rel="canonical" href={window.location.href} />
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "Article",
            headline: t("seo.title"),
            description: t("seo.description"),
            author: {
              "@type": "Person",
              name: "AI Genesis",
            },
            publisher: {
              "@type": "Organization",
              name: "AI Genesis",
            },
          })}
        </script>
      </Helmet>

      <main className="w-full overflow-x-hidden">
        <section className="min-h-screen bg-gradient-to-br from-background via-secondary/5 to-accent/5 flex items-center justify-center relative overflow-hidden px-4 lg:px-8 w-full">
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-10 left-10 w-20 h-20 bg-accent/10 rounded-full animate-bounce-subtle"></div>
            <div className="absolute top-1/2 right-20 w-16 h-16 bg-accent/20 rounded-full animate-bounce-subtle delay-1000"></div>
            <div className="absolute bottom-20 left-1/3 w-12 h-12 bg-accent/15 rounded-full animate-bounce-subtle delay-2000"></div>
          </div>

          <div className="text-center z-10 animate-fade-in w-full max-w-4xl mx-auto">
            <h1 className="font-playfair text-3xl sm:text-5xl lg:text-7xl font-bold mb-6">
              <span className="gradient-gold bg-clip-text text-transparent">
                {t("hero.title")}
              </span>
            </h1>
            <h2 className="font-playfair text-lg sm:text-2xl lg:text-3xl mb-8 text-foreground/80">
              {t("hero.subtitle")}
            </h2>
            <p className="text-base sm:text-lg lg:text-xl mb-12 max-w-2xl mx-auto leading-relaxed text-foreground/70 px-4">
              {t("hero.description")}
            </p>

            <div className="mb-12">
              <div className="flex justify-center space-x-4 mb-4">
                {[...Array(6)].map((_, i) => (
                  <div
                    key={i}
                    className="w-2 h-2 bg-accent rounded-full animate-pulse"
                    style={{ animationDelay: `${i * 0.2}s` }}
                  ></div>
                ))}
              </div>
              <p className="text-sm text-foreground/60">
                {t("phases.phaseCount")}
              </p>
            </div>

            <a
              href="#phase-0"
              className="inline-flex items-center space-x-3 bg-accent hover:bg-accent-light text-accent-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-200 hover:scale-105 animate-glow"
              data-testid="hero-cta"
            >
              <span>{t("hero.cta")}</span>
              <span>🚀</span>
            </a>
          </div>
        </section>

        <section
          id="phase-0"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-accent to-accent-light rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                💡
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase0.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase0.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase0.rawIdeaTitle")}
                </h3>
                <div className="bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-400 p-6 mb-8 transform rotate-1">
                  <div className="font-mono text-sm mb-4 text-yellow-700 dark:text-yellow-300">
                    {t("phases.phase0.noteComment")}
                  </div>
                  <p className="text-foreground leading-relaxed">
                    "{t("phases.phase0.userNote")}"
                  </p>
                </div>

                <div className="bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">🤖</span>
                    {t("phases.phase0.aiInterpretation")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    {t("phases.phase0.aiDescription")}
                  </p>
                </div>
              </div>

              <div className="animate-fade-in">
                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("phases.phase0.terminalTitle")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-2">
                    <div className="animate-pulse">
                      &gt; {t("phases.phase0.analyzing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "0.5s" }}
                    >
                      &gt; {t("phases.phase0.generating")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1s" }}
                    >
                      &gt; {t("phases.phase0.planning")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1.5s" }}
                    >
                      &gt; {t("phases.phase0.designing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "2s" }}
                    >
                      &gt; {t("phases.phase0.complete")}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-1"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🏗️
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase1.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase1.subtitle")}
              </p>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.projectStructure")}
                </h3>

                <div className="code-block rounded-lg p-4 sm:p-6 text-white font-mono text-xs sm:text-sm overflow-x-auto">
                  <div className="text-accent mb-4">ai-genesis-project/</div>
                  <div className="ml-4 space-y-1">
                    <div>
                      ├── <span className="text-yellow-400">functions/</span>
                    </div>
                    <div className="ml-4">└── submit-form.ts</div>
                    <div>
                      ├── <span className="text-yellow-400">src/</span>
                    </div>
                    <div className="ml-4">
                      ├── <span className="text-blue-400">components/</span>
                    </div>
                    <div className="ml-8">├── __tests__/</div>
                    <div className="ml-8">├── ControlHub.tsx</div>
                    <div className="ml-8">└── InteractiveWorkshop.tsx</div>
                    <div className="ml-4">
                      ├── <span className="text-green-400">pages/</span>
                    </div>
                    <div className="ml-4">
                      ├── <span className="text-purple-400">translations/</span>
                    </div>
                    <div className="ml-8">├── pl.json</div>
                    <div className="ml-8">├── en.json</div>
                    <div className="ml-8">└── ja.json</div>
                    <div className="ml-4">├── App.tsx</div>
                    <div className="ml-4">├── main.tsx</div>
                    <div className="ml-4">└── i18n.ts</div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.techStack")}
                </h3>

                <div className="space-y-4 sm:space-y-6">
                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-blue-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TS
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TypeScript + React + Vite
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.typeScriptDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-cyan-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TW
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TailwindCSS + Framer Motion
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.tailwindDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-green-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        ⚡
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        Netlify Functions + Testing
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.netlifyDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 sm:mt-8 bg-accent/10 rounded-lg p-4 sm:p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">🤖</span>
                    {t("phases.phase1.aiJustification")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    "{t("phases.phase1.stackReasoning")}"
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-2"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🎨
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase2.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase2.subtitle")}
              </p>
            </div>

            <div className="mb-12 animate-slide-in">
              <div className="bg-accent/10 border-l-4 border-accent p-6 rounded-r-lg">
                <h3 className="font-playfair text-xl font-semibold mb-4">
                  {t("phases.phase2.designDecision")}
                </h3>
                <p className="leading-relaxed">
                  {t("phases.phase2.designReasoning")}
                </p>
              </div>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.hubFeatures")}
                </h3>

                <div className="space-y-4">
                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                      🧭
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.navFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.navDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                      🌐
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.langFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.langDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                      🌙
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.themeFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.themeDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                      ♿
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.a11yFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.a11yDesc")}
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.demoTitle")}
                </h3>

                <div className="relative bg-muted rounded-lg p-6 h-96 overflow-hidden">
                  <div className="absolute left-0 top-0 h-full w-12 bg-card border-r border-border hover:w-32 transition-all duration-300 group">
                    <div className="p-2 space-y-2">
                      <div className="w-8 h-8 bg-accent rounded-lg flex items-center justify-center text-accent-foreground text-xs font-bold">
                        AI
                      </div>
                      <div className="space-y-1">
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          💡
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          🏗️
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          🎨
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          ⚙️
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="ml-16 p-4">
                    <h4 className="font-semibold mb-2">
                      {t("phases.phase2.mainContent")}
                    </h4>
                    <p className="text-sm text-foreground/70 mb-4">
                      {t("phases.phase2.hubDescription")}
                    </p>
                    <div className="space-y-2">
                      <div className="h-2 bg-secondary rounded"></div>
                      <div className="h-2 bg-secondary rounded w-3/4"></div>
                      <div className="h-2 bg-secondary rounded w-1/2"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-3"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-red-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                ⚙️
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase3.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase3.subtitle")}
              </p>
            </div>

            <InteractiveWorkshop />

            <div className="animate-fade-in">
              <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
                {t("phases.phase3.aiDialogue")}
              </h3>

              <div className="bg-card rounded-lg py-4 px-0 md:p-6 border border-border space-y-12">
                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-blue-500 rounded-full flex-shrink-0 flex items-center justify-center text-white text-base">
                    👤
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4">
                      <p className="font-mono text-sm">
                        "{t("phases.phase3.userRequest")}"
                      </p>
                    </div>
                  </div>
                </div>

                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-accent rounded-full flex-shrink-0 flex items-center justify-center text-accent-foreground text-base">
                    🤖
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-accent/10 rounded-lg p-4">
                      <p className="text-sm">
                        <strong>{t("phases.phase3.aiResponse")}</strong>{" "}
                        <code className="bg-muted px-2 py-1 rounded">
                          components/ImageModal.tsx
                        </code>
                        .
                      </p>
                      <div className="mt-4 code-block rounded p-4 text-white font-mono text-xs">
                        <pre>
                          <code className="whitespace-pre-wrap break-words">{`${t(
                            "phases.phase3.generatedComment"
                          )}
import { createPortal } from 'react-dom';
import { useEffect } from 'react';

interface ImageModalProps {
  src: string;
  alt: string;
  onClose: () => void;
}

export const ImageModal: React.FC<ImageModalProps> = ({ src, alt, onClose }) => {
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [onClose]);

  return createPortal(
    <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50"
         onClick={onClose}>
      <img src={src} alt={alt} className="max-w-full max-h-full"
           onClick={(e) => e.stopPropagation()} />
    </div>,
    document.body
  );
};`}</code>
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-4"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 mobile-safe-width"
        >
          <div className="max-w-6xl mx-auto mobile-padding">
            <div className="text-center mb-16 animate-fade-in min-w-0">
              <div className="mobile-code-container w-20 h-20 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🌍
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase4.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase4.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="min-w-0">
                <TranslationDemo />
              </div>

              <div className="animate-fade-in min-w-0">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase4.seoImplementation")}
                </h3>

                <div className="space-y-6">
                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">📋</span>
                      {t("phases.phase4.metaTags")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs overflow-x-auto">
                      <pre className="whitespace-pre-wrap break-all">
                        <code>{`${t("phases.phase4.metaComment")}
<Helmet>
  <title>{t('seo.title')}</title>
  <meta name="description" content={t('seo.description')} />
  <meta property="og:title" content={t('seo.title')} />
  <meta property="og:description" content={t('seo.description')} />
  <link rel="canonical" href={canonicalUrl} />
</Helmet>`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">🏷️</span>
                      {t("phases.phase4.jsonLD")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs overflow-x-auto">
                      <pre className="whitespace-pre-wrap break-all">
                        <code>{`{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "AI Genesis: Interactive Meta-Tutorial",
  "description": "Comprehensive guide to AI-assisted development",
  "author": {
    "@type": "Person",
    "name": "AI Genesis"
  },
  "publisher": {
    "@type": "Organization",
    "name": "AI Genesis"
  }
}`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-accent/10 rounded-lg p-6">
                    <h4 className="font-semibold mb-4">
                      📊 {t("performance.title")}
                    </h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <div className="font-medium">
                          {t("performance.lazyLoading")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.lazyLoadingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.imageOptimization")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.imageOptDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.codeSplitting")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.codeSplittingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.bundleAnalysis")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.bundleAnalysisDesc")}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🧪
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("testing.phaseTitle")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("testing.phaseSubtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  🔬 {t("testing.unitTestExample")}
                </h3>

                <div className="code-block rounded-lg p-6 text-white font-mono text-sm">
                  <pre>
                    <code className="whitespace-pre-wrap break-words">{`// ControlHub.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ControlHub } from '../ControlHub';

describe('ControlHub', () => {
  it('should expand on hover', async () => {
    render(<ControlHub />);

    const hub = screen.getByTestId('control-hub');
    expect(hub).toHaveClass('control-hub-collapsed');

    fireEvent.mouseEnter(hub);

    await waitFor(() => {
      expect(hub).toHaveClass('control-hub-expanded');
    });
  });

  it('should navigate to correct section', () => {
    render(<ControlHub />);

    const iskraLink = screen.getByText('Iskra');
    fireEvent.click(iskraLink);

    expect(window.location.hash).toBe('#phase-0');
  });
});`}</code>
                  </pre>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  ✅ {t("testing.testResults")}
                </h3>

                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("testing.testResultsVitest")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-1">
                    <div>✓ ControlHub.test.tsx (2)</div>
                    <div className="ml-4">✓ should expand on hover</div>
                    <div className="ml-4">
                      ✓ should navigate to correct section
                    </div>
                    <div>✓ TranslationModule.test.tsx (3)</div>
                    <div className="ml-4">
                      ✓ should switch languages correctly
                    </div>
                    <div className="ml-4">✓ should fallback to English</div>
                    <div className="ml-4">
                      ✓ should update translations dynamically
                    </div>
                    <div>✓ InteractiveWorkshop.test.tsx (2)</div>
                    <div className="ml-4">✓ should simulate bug correctly</div>
                    <div className="ml-4">✓ should fix bug on demand</div>
                    <div className="text-accent mt-4">
                      <strong>Tests: 7 passed, 7 total</strong>
                      <br />
                      <strong>Time: 2.14s</strong>
                    </div>
                  </div>
                </div>

                <div className="mt-6 bg-card rounded-lg p-6 border border-border">
                  <h4 className="font-semibold mb-4">
                    🛠️ {t("testing.testingStack")}
                  </h4>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>{t("testing.testRunner")}</span>
                      <span className="font-mono">Vitest</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.testingLibrary")}</span>
                      <span className="font-mono">@testing-library/react</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.coverage")}</span>
                      <span className="text-green-600 font-mono">96.8%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.e2eTests")}</span>
                      <span className="font-mono">
                        {t("testing.e2eTestsValue")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* <section
          id="phase-5"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto mobile-padding">
            <div className="text-center mb-16 animate-fade-in min-w-0">
              <div className="w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🧪
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6 mobile-heading-size">
                {t("testing.phaseTitle")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("testing.phaseSubtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="animate-slide-in min-w-0">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  🔬 {t("testing.unitTestExample")}
                </h3>

                <div className="code-block rounded-lg p-6 text-white font-mono text-sm">
                  <pre className="overflow-x-auto">
                    <code className="whitespace-pre-wrap break-words">{`// ControlHub.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ControlHub } from '../ControlHub';

describe('ControlHub', () => {
  it('should expand on hover', async () => {
    render(<ControlHub />);

    const hub = screen.getByTestId('control-hub');
    expect(hub).toHaveClass('control-hub-collapsed');

    fireEvent.mouseEnter(hub);

    await waitFor(() => {
      expect(hub).toHaveClass('control-hub-expanded');
    });
  });

  it('should navigate to correct section', () => {
    render(<ControlHub />);

    const iskraLink = screen.getByText('Iskra');
    fireEvent.click(iskraLink);

    expect(window.location.hash).toBe('#phase-0');
  });
});`}</code>
                  </pre>
                </div>
              </div>

              <div className="animate-fade-in min-w-0">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  ✅ {t("testing.testResults")}
                </h3>

                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("testing.testResultsVitest")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-1 overflow-x-auto">
                    <div>✓ ControlHub.test.tsx (2)</div>
                    <div className="ml-4">✓ should expand on hover</div>
                    <div className="ml-4">
                      ✓ should navigate to correct section
                    </div>
                    <div>✓ TranslationModule.test.tsx (3)</div>
                    <div className="ml-4">
                      ✓ should switch languages correctly
                    </div>
                    <div className="ml-4">✓ should fallback to English</div>
                    <div className="ml-4">
                      ✓ should update translations dynamically
                    </div>
                    <div>✓ InteractiveWorkshop.test.tsx (2)</div>
                    <div className="ml-4">✓ should simulate bug correctly</div>
                    <div className="ml-4">✓ should fix bug on demand</div>
                    <div className="text-accent mt-4">
                      <strong>Tests: 7 passed, 7 total</strong>
                      <br />
                      <strong>Time: 2.14s</strong>
                    </div>
                  </div>
                </div>

                <div className="mt-6 bg-card rounded-lg p-6 border border-border">
                  <h4 className="font-semibold mb-4">
                    🛠️ {t("testing.testingStack")}
                  </h4>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>{t("testing.testRunner")}</span>
                      <span className="font-mono">Vitest</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.testingLibrary")}</span>
                      <span className="font-mono">@testing-library/react</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.coverage")}</span>
                      <span className="text-green-600 font-mono">96.8%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.e2eTests")}</span>
                      <span className="font-mono">
                        {t("testing.e2eTestsValue")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section> */}
        <section
          id="phase-5"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 w-full max-w-full overflow-x-hidden"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🚀
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase5.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase5.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  🌐 {t("phases.phase5.deploymentProcess")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                        1
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Git Push</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.gitPush")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                        2
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Netlify Build</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.netlifyBuild")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                        3
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Functions Deploy</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.functionsDeploy")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                        4
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">CDN Distribution</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.cdnDistribution")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>
                  </div>

                  <div className="mt-6 bg-accent/10 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="font-semibold text-green-700 dark:text-green-400">
                        {t("phases.phase5.liveAt")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  📊 {t("phases.phase5.lighthouseReport")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="text-center mb-6">
                    <h4 className="font-semibold text-lg mb-2">
                      {t("phases.phase5.auditResults")}
                    </h4>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.auditSubtitle")}
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    {[
                      { name: "Performance", score: 100 },
                      { name: "Accessibility", score: 100 },
                      { name: "Best Practices", score: 100 },
                      { name: "SEO", score: 100 },
                    ].map((metric) => (
                      <div key={metric.name} className="text-center">
                        <div className="relative w-20 h-20 mx-auto mb-2">
                          <div className="absolute inset-0 bg-green-100 dark:bg-green-900/20 rounded-full"></div>
                          <div className="absolute inset-2 bg-green-500 rounded-full flex items-center justify-center text-white font-bold">
                            {metric.score}
                          </div>
                        </div>
                        <div className="text-sm font-semibold">
                          {metric.name}
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 text-center">
                    <div className="text-2xl font-bold text-green-600 mb-2">
                      {t("phases.phase5.perfectScore")}
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.perfectDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4">
                    {t("phases.phase5.keyMetrics")}
                  </h4>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="font-medium">
                        {t("testing.firstContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">1.2s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.largestContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">2.1s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.cumulativeLayoutShift")}
                      </div>
                      <div className="text-green-600 font-mono">0.01</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.timeToInteractive")}
                      </div>
                      <div className="text-green-600 font-mono">2.8s</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-accent/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("creator.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70">
                {t("creator.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl overflow-hidden max-w-3xl mx-auto">
              <div className="relative h-64 sm:h-96 lg:h-[500px] w-full">
                <img
                  src={devPhotoUrl}
                  alt={t("creator.name")}
                  className="w-full h-full object-contain object-center"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
                <div className="absolute bottom-4 sm:bottom-6 left-4 sm:left-6 text-white">
                  <h3 className="font-playfair text-center text-2xl sm:text-3xl lg:text-4xl font-bold mb-2">
                    {t("creator.name")}
                  </h3>
                </div>
              </div>

              <div className="p-6 sm:p-8">
                <p className="text-foreground/80 text-base sm:text-lg leading-relaxed mb-6 sm:mb-8 max-w-4xl mx-auto text-center">
                  {t("creator.description")}
                </p>

                <div className="text-center">
                  <Button
                    onClick={() => setIsStoryModalOpen(true)}
                    className="bg-accent hover:bg-accent-light text-accent-foreground px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-200"
                    data-testid="creator-story-button"
                  >
                    🎓 {t("creator.selfTaughtButton")}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-6"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("geminiPhase.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70 max-w-3xl mx-auto">
                {t("geminiPhase.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl p-6 sm:p-8 max-w-4xl mx-auto mb-16">
              <div className="flex flex-col sm:flex-row items-center text-center sm:text-left">
                <div className="w-20 h-20 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-3xl mb-4 sm:mb-0 sm:mr-6 flex-shrink-0">
                  💎
                </div>
                <div>
                  <p className="text-foreground/80 leading-relaxed">
                    {t("geminiPhase.intro")}
                  </p>
                </div>
              </div>
            </div>

            <h3 className="font-playfair text-2xl sm:text-3xl font-bold mb-12 text-center">
              {t("geminiPhase.changelogTitle")}
            </h3>

            <div className="grid md:grid-cols-2 gap-8">
              {Array.isArray(geminiCards) &&
                geminiCards.map((card, index) => (
                  <div
                    key={index}
                    className="bg-card rounded-lg border border-border p-6"
                  >
                    <h4 className="font-playfair text-xl font-semibold mb-4">
                      {card.title}
                    </h4>
                    <div className="mb-4 bg-secondary/30 border-l-4 border-accent p-4 rounded-r-md">
                      <p className="font-mono text-sm italic text-foreground/70">
                        "{card.userQuote}"
                      </p>
                    </div>
                    <div>
                      <h5 className="font-semibold mb-2 flex items-center text-sm">
                        <span className="mr-2 text-lg">💎</span> Gemini's
                        Solution
                      </h5>
                      <p className="text-sm text-foreground/80">
                        {card.geminiSolution}
                      </p>
                    </div>
                  </div>
                ))}
            </div>
            <GeminiShowcase />
          </div>
        </section>

        <section
          id="contact"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-primary text-primary-foreground"
        >
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("contact.title")}
              </h2>
              <p className="text-xl text-primary-foreground/70">
                {t("contact.subtitle")}
              </p>
            </div>

            <ContactForm />
          </div>
        </section>
      </main>

      <CreatorStoryModal
        isOpen={isStoryModalOpen}
        onClose={() => setIsStoryModalOpen(false)}
      />

      {showScrollTop && (
        <button
          data-testid="scroll-to-top-home"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg sm:w-14 sm:h-14"
          aria-label="Przewiń na górę"
        >
          ↑
        </button>
      )}
    </>
  );
}

---------------------------------
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface AnnotatedPromptProps {
  title: string;
  promptText: string;
  annotations: Record<string, string>;
}

export function AnnotatedPrompt({
  title,
  promptText,
  annotations,
}: AnnotatedPromptProps) {
  const renderAnnotatedText = () => {
    const annotationKeys = Object.keys(annotations);
    if (annotationKeys.length === 0) {
      return promptText;
    }

    const regex = new RegExp(`(${annotationKeys.join("|")})`, "g");
    const parts = promptText.split(regex);

    return parts.map((part, index) => {
      if (annotations[part]) {
        return (
          <TooltipProvider key={index} delayDuration={100}>
            <Tooltip>
              <TooltipTrigger asChild>
                <span className="bg-accent/20 text-accent-light font-bold cursor-pointer rounded px-1 py-0.5 transition-colors hover:bg-accent/30">
                  {part}
                </span>
              </TooltipTrigger>
              <TooltipContent className="max-w-xs text-sm shadow-lg">
                <p>{annotations[part]}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        );
      }
      return <span key={index}>{part}</span>;
    });
  };

  return (
    <div className="animate-slide-in my-12" data-testid="annotated-prompt">
      <h3 className="font-playfair text-2xl font-semibold mb-6 text-center">
        {title}
      </h3>
      <div className="code-block rounded-lg p-4 sm:p-6 text-white font-mono text-xs sm:text-sm leading-relaxed whitespace-pre-wrap">
        {renderAnnotatedText()}
      </div>
    </div>
  );
}

----------------------------------

import { useState, useEffect, useRef } from "react";
import { useTranslation } from "react-i18next";
import { useTheme } from "@/components/theme-provider";
import { cn } from "@/lib/utils";
import i18n from "@/lib/i18n";
import { Link } from "wouter";
import { disableBodyScroll, enableBodyScroll } from "body-scroll-lock";

export function ControlHub() {
  const { t } = useTranslation();
  const { theme, setTheme } = useTheme();
  const [isExpanded, setIsExpanded] = useState(false);
  const [activePhase, setActivePhase] = useState("phase-0");
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showScrollToTop, setShowScrollToTop] = useState(false);
  const hubRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleScroll = () => {
      const sections = [
        "phase-0",
        "phase-1",
        "phase-2",
        "phase-3",
        "phase-4",
        "phase-5",
        "contact",
      ];
      const currentSection = sections.find((section) => {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          return rect.top <= 100 && rect.bottom >= 100;
        }
        return false;
      });

      if (currentSection && currentSection !== activePhase) {
        setActivePhase(currentSection);
      }

      if (window.scrollY > 300) {
        setShowScrollToTop(true);
      } else {
        setShowScrollToTop(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [activePhase]);

  const phases = [
    { id: "phase-0", icon: "💡", label: t("nav.iskra") },
    { id: "phase-1", icon: "🏗️", label: t("nav.fundamenty") },
    { id: "phase-2", icon: "🎨", label: t("nav.innowacja") },
    { id: "phase-3", icon: "⚙️", label: t("nav.development") },
    { id: "phase-4", icon: "🌍", label: t("nav.zasieg") },
    { id: "phase-5", icon: "🚀", label: t("nav.deployment") },
    { id: "contact", icon: "📧", label: t("nav.contact") },
  ];

  const legalLinks = [
    { href: "/terms", icon: "📄", label: t("legalNav.terms") },
    { href: "/privacy", icon: "🛡️", label: t("legalNav.privacy") },
  ];

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: "smooth" });
      setActivePhase(sectionId);
      setIsMobileMenuOpen(false);
    }
  };

  const changeLanguage = (lng: string) => {
    i18n.changeLanguage(lng);
  };

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  useEffect(() => {
    const hubElement = hubRef.current;
    if (hubElement) {
      if (isExpanded) {
        disableBodyScroll(hubElement);
      } else {
        enableBodyScroll(hubElement);
      }
    }
    return () => {
      if (hubElement) {
        enableBodyScroll(hubElement);
      }
    };
  }, [isExpanded]);

  return (
    <>
      <div
        ref={hubRef}
        className={`hidden lg:grid grid-rows-[auto_1fr_auto] fixed left-4 top-1/2 transform -translate-y-1/2 z-50 transition-all duration-300 ${
          isExpanded ? "control-hub-expanded" : "control-hub-collapsed"
        } bg-card border border-border rounded-lg shadow-lg hover:shadow-xl max-h-[90vh]`}
        onMouseEnter={() => setIsExpanded(true)}
        onMouseLeave={() => setIsExpanded(false)}
        data-testid="control-hub"
      >
        <div className="p-3 lg:p-4 border-b border-border">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 gradient-gold rounded-lg flex items-center justify-center text-white font-bold text-sm">
              AI
            </div>
            <span
              className={cn(
                "font-playfair font-semibold text-lg transition-opacity duration-300 whitespace-nowrap",
                isExpanded ? "opacity-100" : "opacity-0"
              )}
            >
              Genesis
            </span>
          </div>
        </div>

        <div className="overflow-y-auto no-scrollbar">
          <nav className="py-3 lg:py-4">
            <div className="space-y-1 lg:space-y-2 px-1 lg:px-2">
              {phases.map((phase) => (
                <button
                  key={phase.id}
                  data-testid={`nav-${phase.id}`}
                  onClick={() => scrollToSection(phase.id)}
                  className={cn(
                    "nav-item flex items-center space-x-3 p-2 lg:p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 group/item relative w-full text-left",
                    activePhase === phase.id
                      ? "bg-accent text-accent-foreground"
                      : ""
                  )}
                  title={phase.label}
                >
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    {phase.icon}
                  </div>
                  <span
                    className={cn(
                      "nav-text transition-opacity duration-300 whitespace-nowrap",
                      isExpanded ? "opacity-100" : "opacity-0"
                    )}
                  >
                    {phase.label}
                  </span>
                  {!isExpanded && (
                    <div className="absolute left-full ml-2 px-2 py-1 bg-primary text-primary-foreground text-xs rounded opacity-0 group-hover/item:opacity-100 transition-opacity duration-200 pointer-events-none">
                      {phase.label}
                    </div>
                  )}
                </button>
              ))}
            </div>
          </nav>

          <div className="border-t border-border p-4 space-y-3">
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                🌐
              </div>
              <select
                data-testid="language-selector"
                value={i18n.language}
                onChange={(e) => changeLanguage(e.target.value)}
                className={cn(
                  "bg-background border border-border rounded px-2 py-1 text-sm transition-opacity duration-300 text-foreground",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                <option value="pl">Polski</option>
                <option value="en">English</option>
                <option value="ja">日本語</option>
              </select>
            </div>

            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                {theme === "dark" ? "🌙" : "☀️"}
              </div>
              <button
                data-testid="theme-toggle"
                onClick={toggleTheme}
                className={cn(
                  "text-sm transition-opacity duration-300 whitespace-nowrap",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                {theme === "dark" ? "Light Mode" : "Dark Mode"}
              </button>
            </div>

            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                ♿
              </div>
              <button
                data-testid="accessibility-toggle"
                className={cn(
                  "text-sm transition-opacity duration-300 whitespace-nowrap",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                Accessibility
              </button>
            </div>
          </div>

          <div className="border-t border-border px-1 lg:px-2 py-3 lg:py-4">
            <div className="space-y-1 lg:space-y-2">
              {legalLinks.map((link) => (
                <Link
                  key={link.href}
                  href={link.href}
                  className="nav-item flex items-center space-x-3 p-2 lg:p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 group/item relative w-full text-left"
                  title={link.label}
                >
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    {link.icon}
                  </div>
                  <span
                    className={cn(
                      "nav-text transition-opacity duration-300 whitespace-nowrap",
                      isExpanded ? "opacity-100" : "opacity-0"
                    )}
                  >
                    {link.label}
                  </span>
                  {!isExpanded && (
                    <div className="absolute left-full ml-2 px-2 py-1 bg-primary text-primary-foreground text-xs rounded opacity-0 group-hover/item:opacity-100 transition-opacity duration-200 pointer-events-none">
                      {link.label}
                    </div>
                  )}
                </Link>
              ))}
            </div>
          </div>
        </div>

        <div className="border-t border-border p-4">
          <div
            className={cn(
              "flex space-x-3 transition-all duration-300",
              isExpanded ? "justify-start" : "justify-center"
            )}
          >
            <a
              href="#"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="GitHub"
            >
              <div className="w-5 h-5 text-lg">📂</div>
            </a>
            <a
              href="#"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="Twitter"
            >
              <div className="w-5 h-5 text-lg">🐦</div>
            </a>
            <a
              href="#"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="LinkedIn"
            >
              <div className="w-5 h-5 text-lg">💼</div>
            </a>
          </div>
        </div>
      </div>

      {/* Mobile Menu - code remains unchanged */}
      <button
        data-testid="mobile-menu-toggle"
        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
        className="lg:hidden fixed top-4 right-4 z-50 p-3 rounded-lg bg-card/90 backdrop-blur-sm border border-border text-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:bg-accent hover:text-accent-foreground"
      >
        {isMobileMenuOpen ? "✕" : "☰"}
      </button>

      {isMobileMenuOpen && (
        <div
          className="lg:hidden fixed inset-0 z-40 bg-black/20 backdrop-blur-sm"
          onClick={() => setIsMobileMenuOpen(false)}
        >
          <div
            className="fixed left-0 top-0 h-full w-72 bg-background/95 backdrop-blur-md border-r border-border shadow-2xl p-4 grid grid-rows-[auto_1fr] animate-slide-in"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-3 border-b border-border">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 gradient-gold rounded-lg flex items-center justify-center text-white font-bold text-sm">
                  AI
                </div>
                <span className="font-playfair font-semibold text-lg">
                  Genesis
                </span>
              </div>
            </div>

            <div className="overflow-y-auto no-scrollbar overscroll-contain">
              <nav className="py-4">
                <div className="space-y-2 px-2">
                  {phases.map((phase) => (
                    <button
                      key={phase.id}
                      data-testid={`mobile-nav-${phase.id}`}
                      onClick={() => scrollToSection(phase.id)}
                      className={cn(
                        "nav-item flex items-center space-x-3 p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 w-full text-left",
                        activePhase === phase.id
                          ? "bg-accent text-accent-foreground"
                          : ""
                      )}
                      title={phase.label}
                    >
                      <div className="w-6 h-6 flex items-center justify-center text-xl">
                        {phase.icon}
                      </div>
                      <span className="nav-text">{phase.label}</span>
                    </button>
                  ))}
                </div>
              </nav>

              <div className="border-t border-border p-4 space-y-3">
                <div className="flex items-center space-x-3">
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    🌐
                  </div>
                  <select
                    data-testid="mobile-language-selector"
                    value={i18n.language}
                    onChange={(e) => changeLanguage(e.target.value)}
                    className="bg-background border border-border rounded px-2 py-1 text-sm text-foreground w-full"
                  >
                    <option value="pl">Polski</option>
                    <option value="en">English</option>
                    <option value="ja">日本語</option>
                  </select>
                </div>

                <div className="flex items-center space-x-3">
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    {theme === "dark" ? "🌙" : "☀️"}
                  </div>
                  <button
                    data-testid="mobile-theme-toggle"
                    onClick={toggleTheme}
                    className="text-sm w-full text-left"
                  >
                    {theme === "dark" ? "Light Mode" : "Dark Mode"}
                  </button>
                </div>

                <div className="flex items-center space-x-3">
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    ♿
                  </div>
                  <button
                    data-testid="mobile-accessibility-toggle"
                    className="text-sm w-full text-left"
                  >
                    Accessibility
                  </button>
                </div>
              </div>

              <div className="border-t border-border py-4">
                <div className="space-y-2 px-2">
                  {legalLinks.map((link) => (
                    <Link
                      key={link.href}
                      href={link.href}
                      onClick={() => setIsMobileMenuOpen(false)}
                      className="nav-item flex items-center space-x-3 p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 w-full text-left"
                      title={link.label}
                    >
                      <div className="w-6 h-6 flex items-center justify-center text-xl">
                        {link.icon}
                      </div>
                      <span className="nav-text">{link.label}</span>
                    </Link>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {showScrollToTop && (
        <button
          data-testid="scroll-to-top"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg"
          aria-label="Przewiń na górę"
        >
          ↑
        </button>
      )}
    </>
  );
}

--------------------------------

import { Handler } from '@netlify/functions';
import { z } from 'zod';

const contactFormSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  project: z.string().min(1, "Please select a project type"),
  message: z.string().min(10, "Message must be at least 10 characters"),
});

export const handler: Handler = async (event, context) => {
  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ message: 'Method Not Allowed' }),
    };
  }

  try {
    // Parse and validate the form data
    const body = JSON.parse(event.body || '{}');
    const validatedData = contactFormSchema.parse(body);

    // Here you would typically:
    // 1. Save to a database
    // 2. Send an email notification
    // 3. Send a confirmation email to the user
    
    console.log('Contact form submission:', validatedData);
    
    // For now, just log the submission and return success
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
      },
      body: JSON.stringify({
        success: true,
        message: 'Thank you for your message! We will get back to you soon.',
      }),
    };
    
  } catch (error) {
    if (error instanceof z.ZodError) {
      return {
        statusCode: 400,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify({
          success: false,
          message: 'Validation error',
          errors: error.errors,
        }),
      };
    }
    
    console.error('Contact form error:', error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({
        success: false,
        message: 'Internal server error',
      }),
    };
  }
};


--------------------------------

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation } from "@tanstack/react-query";
import { useTranslation } from "react-i18next";
import { z } from "zod";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import type { ContactFormData } from "@/types";

const contactSchema = z.object({
  name: z.string().min(2, "Imię musi mieć co najmniej 2 znaki"),
  email: z.string().email("Nieprawidłowy adres email"),
  project: z.string().min(1, "Wybierz typ projektu"),
  message: z.string().min(10, "Wiadomość musi mieć co najmniej 10 znaków"),
});

export function ContactForm() {
  const { t } = useTranslation();
  const { toast } = useToast();
  
  const form = useForm<ContactFormData>({
    resolver: zodResolver(contactSchema),
    defaultValues: {
      name: "",
      email: "",
      project: "",
      message: "",
    },
  });

  const submitFormMutation = useMutation({
    mutationFn: async (data: ContactFormData) => {
      return await apiRequest("POST", "/api/contact", data);
    },
    onSuccess: () => {
      toast({
        title: "Wiadomość wysłana!",
        description: "Dziękujemy za kontakt. Odpowiemy w ciągu 24 godzin.",
      });
      form.reset();
    },
    onError: (error) => {
      toast({
        title: "Błąd",
        description: "Nie udało się wysłać wiadomości. Spróbuj ponownie.",
        variant: "destructive",
      });
      console.error("Contact form error:", error);
    },
  });

  const onSubmit = (data: ContactFormData) => {
    submitFormMutation.mutate(data);
  };

  return (
    <form 
      onSubmit={form.handleSubmit(onSubmit)} 
      className="max-w-2xl mx-auto space-y-6 animate-slide-in"
      data-testid="contact-form"
    >
      <div className="grid md:grid-cols-2 gap-6">
        <div>
          <Label htmlFor="name" className="block text-sm font-medium mb-2 text-white">
            {t('contact.name')}
          </Label>
          <Input
            {...form.register('name')}
            data-testid="input-name"
            type="text"
            id="name"
            placeholder="Jan Kowalski"
            className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg focus:ring-2 focus:ring-accent/50 focus:border-accent text-white placeholder-white/60"
          />
          {form.formState.errors.name && (
            <p className="text-red-400 text-sm mt-1">{form.formState.errors.name.message}</p>
          )}
        </div>
        
        <div>
          <Label htmlFor="email" className="block text-sm font-medium mb-2 text-white">
            {t('contact.email')}
          </Label>
          <Input
            {...form.register('email')}
            data-testid="input-email"
            type="email"
            id="email"
            placeholder="jan@example.com"
            className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg focus:ring-2 focus:ring-accent/50 focus:border-accent text-white placeholder-white/60"
          />
          {form.formState.errors.email && (
            <p className="text-red-400 text-sm mt-1">{form.formState.errors.email.message}</p>
          )}
        </div>
      </div>
      
      <div>
        <Label htmlFor="project" className="block text-sm font-medium mb-2 text-white">
          {t('contact.project')}
        </Label>
        <Select onValueChange={(value) => form.setValue('project', value)}>
          <SelectTrigger 
            data-testid="select-project"
            className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg focus:ring-2 focus:ring-accent/50 focus:border-accent text-white"
          >
            <SelectValue placeholder="Wybierz typ projektu..." />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="website">{t('contact.projectTypes.website')}</SelectItem>
            <SelectItem value="webapp">{t('contact.projectTypes.webapp')}</SelectItem>
            <SelectItem value="ecommerce">{t('contact.projectTypes.ecommerce')}</SelectItem>
            <SelectItem value="tutorial">{t('contact.projectTypes.tutorial')}</SelectItem>
            <SelectItem value="other">{t('contact.projectTypes.other')}</SelectItem>
          </SelectContent>
        </Select>
        {form.formState.errors.project && (
          <p className="text-red-400 text-sm mt-1">{form.formState.errors.project.message}</p>
        )}
      </div>
      
      <div>
        <Label htmlFor="message" className="block text-sm font-medium mb-2 text-white">
          {t('contact.message')}
        </Label>
        <Textarea
          {...form.register('message')}
          data-testid="textarea-message"
          id="message"
          rows={5}
          placeholder="Opisz swój pomysł na projekt..."
          className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg focus:ring-2 focus:ring-accent/50 focus:border-accent text-white placeholder-white/60"
        />
        {form.formState.errors.message && (
          <p className="text-red-400 text-sm mt-1">{form.formState.errors.message.message}</p>
        )}
      </div>
      
      <div className="text-center">
        <Button
          data-testid="button-submit"
          type="submit"
          disabled={submitFormMutation.isPending}
          className="bg-accent hover:bg-accent-light text-accent-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-200 hover:scale-105"
        >
          {submitFormMutation.isPending ? "Wysyłanie..." : `🚀 ${t('contact.submit')}`}
        </Button>
      </div>
    </form>
  );
}


------------------------------------

import { useState, useEffect } from "react";
import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import InteractiveWorkshop from "@/components/interactive-workshop";
import { TranslationDemo } from "@/components/translation-demo";
import { ContactForm } from "@/components/contact-form";
import { CreatorStoryModal } from "@/components/creator-story-modal";
import { GeminiShowcase } from "@/components/gemini-showcase";
import { AnnotatedPrompt } from "@/components/AnnotatedPrompt";
import devPhotoUrl from "@/assets/3.avif";

export default function Home() {
  const { t } = useTranslation();
  const [isStoryModalOpen, setIsStoryModalOpen] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 300);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  const geminiCards =
    (t("geminiPhase.cards", { returnObjects: true }) as Array<{
      title: string;
      userQuote: string;
      geminiSolution: string;
    }>) || [];

  const promptTitle = t("phases.phase0.promptTitle");
  const promptText = t("phases.phase0.promptText");
  const promptShowMore = t("phases.phase0.promptShowMore");
  const promptShowLess = t("phases.phase0.promptShowLess");
  const promptAnnotations =
    (t("phases.phase0.promptAnnotations", {
      returnObjects: true,
    }) as Record<string, string>) || {};

  return (
    <>
      <Helmet>
        <title>{t("seo.title")}</title>
        <meta name="description" content={t("seo.description")} />
        <meta property="og:title" content={t("seo.title")} />
        <meta property="og:description" content={t("seo.description")} />
        <meta property="og:type" content="website" />
        <link rel="canonical" href={window.location.href} />
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "Article",
            headline: t("seo.title"),
            description: t("seo.description"),
            author: {
              "@type": "Person",
              name: "AI Genesis",
            },
            publisher: {
              "@type": "Organization",
              name: "AI Genesis",
            },
          })}
        </script>
      </Helmet>

      <main className="w-full overflow-x-hidden">
        <section className="min-h-screen bg-gradient-to-br from-background via-secondary/5 to-accent/5 flex items-center justify-center relative overflow-hidden px-4 lg:px-8 w-full">
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-10 left-10 w-20 h-20 bg-accent/10 rounded-full animate-bounce-subtle"></div>
            <div className="absolute top-1/2 right-20 w-16 h-16 bg-accent/20 rounded-full animate-bounce-subtle delay-1000"></div>
            <div className="absolute bottom-20 left-1/3 w-12 h-12 bg-accent/15 rounded-full animate-bounce-subtle delay-2000"></div>
          </div>

          <div className="text-center z-10 animate-fade-in w-full max-w-4xl mx-auto">
            <h1 className="font-playfair text-3xl sm:text-5xl lg:text-7xl font-bold mb-6">
              <span className="gradient-gold bg-clip-text text-transparent">
                {t("hero.title")}
              </span>
            </h1>
            <h2 className="font-playfair text-lg sm:text-2xl lg:text-3xl mb-8 text-foreground/80">
              {t("hero.subtitle")}
            </h2>
            <p className="text-base sm:text-lg lg:text-xl mb-12 max-w-2xl mx-auto leading-relaxed text-foreground/70 px-4">
              {t("hero.description")}
            </p>

            <div className="mb-12">
              <div className="flex justify-center space-x-4 mb-4">
                {[...Array(6)].map((_, i) => (
                  <div
                    key={i}
                    className="w-2 h-2 bg-accent rounded-full animate-pulse"
                    style={{ animationDelay: `${i * 0.2}s` }}
                  ></div>
                ))}
              </div>
              <p className="text-sm text-foreground/60">
                {t("phases.phaseCount")}
              </p>
            </div>

            <a
              href="#phase-0"
              className="inline-flex items-center space-x-3 bg-accent hover:bg-accent-light text-accent-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-200 hover:scale-105 animate-glow"
              data-testid="hero-cta"
            >
              <span>{t("hero.cta")}</span>
              <span>🚀</span>
            </a>
          </div>
        </section>

        <section
          id="phase-0"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-accent to-accent-light rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                💡
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase0.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase0.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase0.rawIdeaTitle")}
                </h3>
                <div className="bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-400 p-6 mb-8 transform rotate-1">
                  <div className="font-mono text-sm mb-4 text-yellow-700 dark:text-yellow-300">
                    {t("phases.phase0.noteComment")}
                  </div>
                  <p className="text-foreground leading-relaxed">
                    "{t("phases.phase0.userNote")}"
                  </p>
                </div>

                <div className="bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">🤖</span>
                    {t("phases.phase0.aiInterpretation")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    {t("phases.phase0.aiDescription")}
                  </p>
                </div>
              </div>

              <div className="animate-fade-in">
                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("phases.phase0.terminalTitle")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-2">
                    <div className="animate-pulse">
                      &gt; {t("phases.phase0.analyzing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "0.5s" }}
                    >
                      &gt; {t("phases.phase0.generating")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1s" }}
                    >
                      &gt; {t("phases.phase0.planning")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1.5s" }}
                    >
                      &gt; {t("phases.phase0.designing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "2s" }}
                    >
                      &gt; {t("phases.phase0.complete")}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <AnnotatedPrompt
              title={promptTitle}
              promptText={promptText}
              annotations={promptAnnotations}
              showMoreLabel={promptShowMore}
              showLessLabel={promptShowLess}
            />
          </div>
        </section>

        <section
          id="phase-1"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🏗️
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase1.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase1.subtitle")}
              </p>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.projectStructure")}
                </h3>

                <div className="code-block rounded-lg p-4 sm:p-6 text-white font-mono text-xs sm:text-sm overflow-x-auto">
                  <div className="text-accent mb-4">ai-genesis-project/</div>
                  <div className="ml-4 space-y-1">
                    <div>
                      ├── <span className="text-yellow-400">functions/</span>
                    </div>
                    <div className="ml-4">└── submit-form.ts</div>
                    <div>
                      ├── <span className="text-yellow-400">src/</span>
                    </div>
                    <div className="ml-4">
                      ├── <span className="text-blue-400">components/</span>
                    </div>
                    <div className="ml-8">├── __tests__/</div>
                    <div className="ml-8">├── ControlHub.tsx</div>
                    <div className="ml-8">└── InteractiveWorkshop.tsx</div>
                    <div className="ml-4">
                      ├── <span className="text-green-400">pages/</span>
                    </div>
                    <div className="ml-4">
                      ├── <span className="text-purple-400">translations/</span>
                    </div>
                    <div className="ml-8">├── pl.json</div>
                    <div className="ml-8">├── en.json</div>
                    <div className="ml-8">└── ja.json</div>
                    <div className="ml-4">├── App.tsx</div>
                    <div className="ml-4">├── main.tsx</div>
                    <div className="ml-4">└── i18n.ts</div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.techStack")}
                </h3>

                <div className="space-y-4 sm:space-y-6">
                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-blue-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TS
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TypeScript + React + Vite
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.typeScriptDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-cyan-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TW
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TailwindCSS + Framer Motion
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.tailwindDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-green-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        ⚡
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        Netlify Functions + Testing
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.netlifyDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 sm:mt-8 bg-accent/10 rounded-lg p-4 sm:p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">🤖</span>
                    {t("phases.phase1.aiJustification")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    "{t("phases.phase1.stackReasoning")}"
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-2"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🎨
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase2.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase2.subtitle")}
              </p>
            </div>

            <div className="mb-12 animate-slide-in">
              <div className="bg-accent/10 border-l-4 border-accent p-6 rounded-r-lg">
                <h3 className="font-playfair text-xl font-semibold mb-4">
                  {t("phases.phase2.designDecision")}
                </h3>
                <p className="leading-relaxed">
                  {t("phases.phase2.designReasoning")}
                </p>
              </div>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.hubFeatures")}
                </h3>

                <div className="space-y-4">
                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                      🧭
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.navFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.navDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                      🌐
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.langFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.langDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                      🌙
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.themeFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.themeDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                      ♿
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.a11yFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.a11yDesc")}
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.demoTitle")}
                </h3>

                <div className="relative bg-muted rounded-lg p-6 h-96 overflow-hidden">
                  <div className="absolute left-0 top-0 h-full w-12 bg-card border-r border-border hover:w-32 transition-all duration-300 group">
                    <div className="p-2 space-y-2">
                      <div className="w-8 h-8 bg-accent rounded-lg flex items-center justify-center text-accent-foreground text-xs font-bold">
                        AI
                      </div>
                      <div className="space-y-1">
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          💡
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          🏗️
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          🎨
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          ⚙️
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="ml-16 p-4">
                    <h4 className="font-semibold mb-2">
                      {t("phases.phase2.mainContent")}
                    </h4>
                    <p className="text-sm text-foreground/70 mb-4">
                      {t("phases.phase2.hubDescription")}
                    </p>
                    <div className="space-y-2">
                      <div className="h-2 bg-secondary rounded"></div>
                      <div className="h-2 bg-secondary rounded w-3/4"></div>
                      <div className="h-2 bg-secondary rounded w-1/2"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-3"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-red-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                ⚙️
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase3.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase3.subtitle")}
              </p>
            </div>

            <InteractiveWorkshop />

            <div className="animate-fade-in">
              <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
                {t("phases.phase3.aiDialogue")}
              </h3>

              <div className="bg-card rounded-lg py-4 px-0 md:p-6 border border-border space-y-12">
                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-blue-500 rounded-full flex-shrink-0 flex items-center justify-center text-white text-base">
                    👤
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4">
                      <p className="font-mono text-sm">
                        "{t("phases.phase3.userRequest")}"
                      </p>
                    </div>
                  </div>
                </div>

                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-accent rounded-full flex-shrink-0 flex items-center justify-center text-accent-foreground text-base">
                    🤖
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-accent/10 rounded-lg p-4">
                      <p className="text-sm">
                        <strong>{t("phases.phase3.aiResponse")}</strong>{" "}
                        <code className="bg-muted px-2 py-1 rounded">
                          components/ImageModal.tsx
                        </code>
                        .
                      </p>
                      <div className="mt-4 code-block rounded p-4 text-white font-mono text-xs">
                        <pre>
                          <code className="whitespace-pre-wrap break-words">{`${t(
                            "phases.phase3.generatedComment"
                          )}
import { createPortal } from 'react-dom';
import { useEffect } from 'react';

interface ImageModalProps {
  src: string;
  alt: string;
  onClose: () => void;
}

export const ImageModal: React.FC<ImageModalProps> = ({ src, alt, onClose }) => {
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [onClose]);

  return createPortal(
    <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50"
         onClick={onClose}>
      <img src={src} alt={alt} className="max-w-full max-h-full"
           onClick={(e) => e.stopPropagation()} />
    </div>,
    document.body
  );
};`}</code>
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-4"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 mobile-safe-width"
        >
          <div className="max-w-6xl mx-auto mobile-padding">
            <div className="text-center mb-16 animate-fade-in min-w-0">
              <div className="mobile-code-container w-20 h-20 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🌍
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase4.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase4.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="min-w-0">
                <TranslationDemo />
              </div>

              <div className="animate-fade-in min-w-0">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase4.seoImplementation")}
                </h3>

                <div className="space-y-6">
                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">📋</span>
                      {t("phases.phase4.metaTags")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs overflow-x-auto">
                      <pre className="whitespace-pre-wrap break-all">
                        <code>{`${t("phases.phase4.metaComment")}
<Helmet>
  <title>{t('seo.title')}</title>
  <meta name="description" content={t('seo.description')} />
  <meta property="og:title" content={t('seo.title')} />
  <meta property="og:description" content={t('seo.description')} />
  <link rel="canonical" href={canonicalUrl} />
</Helmet>`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">🏷️</span>
                      {t("phases.phase4.jsonLD")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs overflow-x-auto">
                      <pre className="whitespace-pre-wrap break-all">
                        <code>{`{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "AI Genesis: Interactive Meta-Tutorial",
  "description": "Comprehensive guide to AI-assisted development",
  "author": {
    "@type": "Person",
    "name": "AI Genesis"
  },
  "publisher": {
    "@type": "Organization",
    "name": "AI Genesis"
  }
}`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-accent/10 rounded-lg p-6">
                    <h4 className="font-semibold mb-4">
                      📊 {t("performance.title")}
                    </h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <div className="font-medium">
                          {t("performance.lazyLoading")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.lazyLoadingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.imageOptimization")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.imageOptDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.codeSplitting")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.codeSplittingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.bundleAnalysis")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.bundleAnalysisDesc")}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🧪
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("testing.phaseTitle")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("testing.phaseSubtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  🔬 {t("testing.unitTestExample")}
                </h3>

                <div className="code-block rounded-lg p-6 text-white font-mono text-sm">
                  <pre>
                    <code className="whitespace-pre-wrap break-words">{`// ControlHub.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ControlHub } from '../ControlHub';

describe('ControlHub', () => {
  it('should expand on hover', async () => {
    render(<ControlHub />);

    const hub = screen.getByTestId('control-hub');
    expect(hub).toHaveClass('control-hub-collapsed');

    fireEvent.mouseEnter(hub);

    await waitFor(() => {
      expect(hub).toHaveClass('control-hub-expanded');
    });
  });

  it('should navigate to correct section', () => {
    render(<ControlHub />);

    const iskraLink = screen.getByText('Iskra');
    fireEvent.click(iskraLink);

    expect(window.location.hash).toBe('#phase-0');
  });
});`}</code>
                  </pre>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  ✅ {t("testing.testResults")}
                </h3>

                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("testing.testResultsVitest")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-1">
                    <div>✓ ControlHub.test.tsx (2)</div>
                    <div className="ml-4">✓ should expand on hover</div>
                    <div className="ml-4">
                      ✓ should navigate to correct section
                    </div>
                    <div>✓ TranslationModule.test.tsx (3)</div>
                    <div className="ml-4">
                      ✓ should switch languages correctly
                    </div>
                    <div className="ml-4">✓ should fallback to English</div>
                    <div className="ml-4">
                      ✓ should update translations dynamically
                    </div>
                    <div>✓ InteractiveWorkshop.test.tsx (2)</div>
                    <div className="ml-4">✓ should simulate bug correctly</div>
                    <div className="ml-4">✓ should fix bug on demand</div>
                    <div className="text-accent mt-4">
                      <strong>Tests: 7 passed, 7 total</strong>
                      <br />
                      <strong>Time: 2.14s</strong>
                    </div>
                  </div>
                </div>

                <div className="mt-6 bg-card rounded-lg p-6 border border-border">
                  <h4 className="font-semibold mb-4">
                    🛠️ {t("testing.testingStack")}
                  </h4>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>{t("testing.testRunner")}</span>
                      <span className="font-mono">Vitest</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.testingLibrary")}</span>
                      <span className="font-mono">@testing-library/react</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.coverage")}</span>
                      <span className="text-green-600 font-mono">96.8%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.e2eTests")}</span>
                      <span className="font-mono">
                        {t("testing.e2eTestsValue")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* <section
          id="phase-5"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto mobile-padding">
            <div className="text-center mb-16 animate-fade-in min-w-0">
              <div className="w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🧪
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6 mobile-heading-size">
                {t("testing.phaseTitle")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("testing.phaseSubtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="animate-slide-in min-w-0">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  🔬 {t("testing.unitTestExample")}
                </h3>

                <div className="code-block rounded-lg p-6 text-white font-mono text-sm">
                  <pre className="overflow-x-auto">
                    <code className="whitespace-pre-wrap break-words">{`// ControlHub.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ControlHub } from '../ControlHub';

describe('ControlHub', () => {
  it('should expand on hover', async () => {
    render(<ControlHub />);

    const hub = screen.getByTestId('control-hub');
    expect(hub).toHaveClass('control-hub-collapsed');

    fireEvent.mouseEnter(hub);

    await waitFor(() => {
      expect(hub).toHaveClass('control-hub-expanded');
    });
  });

  it('should navigate to correct section', () => {
    render(<ControlHub />);

    const iskraLink = screen.getByText('Iskra');
    fireEvent.click(iskraLink);

    expect(window.location.hash).toBe('#phase-0');
  });
});`}</code>
                  </pre>
                </div>
              </div>

              <div className="animate-fade-in min-w-0">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  ✅ {t("testing.testResults")}
                </h3>

                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("testing.testResultsVitest")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-1 overflow-x-auto">
                    <div>✓ ControlHub.test.tsx (2)</div>
                    <div className="ml-4">✓ should expand on hover</div>
                    <div className="ml-4">
                      ✓ should navigate to correct section
                    </div>
                    <div>✓ TranslationModule.test.tsx (3)</div>
                    <div className="ml-4">
                      ✓ should switch languages correctly
                    </div>
                    <div className="ml-4">✓ should fallback to English</div>
                    <div className="ml-4">
                      ✓ should update translations dynamically
                    </div>
                    <div>✓ InteractiveWorkshop.test.tsx (2)</div>
                    <div className="ml-4">✓ should simulate bug correctly</div>
                    <div className="ml-4">✓ should fix bug on demand</div>
                    <div className="text-accent mt-4">
                      <strong>Tests: 7 passed, 7 total</strong>
                      <br />
                      <strong>Time: 2.14s</strong>
                    </div>
                  </div>
                </div>

                <div className="mt-6 bg-card rounded-lg p-6 border border-border">
                  <h4 className="font-semibold mb-4">
                    🛠️ {t("testing.testingStack")}
                  </h4>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>{t("testing.testRunner")}</span>
                      <span className="font-mono">Vitest</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.testingLibrary")}</span>
                      <span className="font-mono">@testing-library/react</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.coverage")}</span>
                      <span className="text-green-600 font-mono">96.8%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.e2eTests")}</span>
                      <span className="font-mono">
                        {t("testing.e2eTestsValue")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section> */}
        <section
          id="phase-5"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 w-full max-w-full overflow-x-hidden"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🚀
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase5.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase5.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  🌐 {t("phases.phase5.deploymentProcess")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                        1
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Git Push</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.gitPush")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                        2
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Netlify Build</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.netlifyBuild")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                        3
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Functions Deploy</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.functionsDeploy")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                        4
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">CDN Distribution</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.cdnDistribution")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>
                  </div>

                  <div className="mt-6 bg-accent/10 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="font-semibold text-green-700 dark:text-green-400">
                        {t("phases.phase5.liveAt")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  📊 {t("phases.phase5.lighthouseReport")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="text-center mb-6">
                    <h4 className="font-semibold text-lg mb-2">
                      {t("phases.phase5.auditResults")}
                    </h4>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.auditSubtitle")}
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    {[
                      { name: "Performance", score: 100 },
                      { name: "Accessibility", score: 100 },
                      { name: "Best Practices", score: 100 },
                      { name: "SEO", score: 100 },
                    ].map((metric) => (
                      <div key={metric.name} className="text-center">
                        <div className="relative w-20 h-20 mx-auto mb-2">
                          <div className="absolute inset-0 bg-green-100 dark:bg-green-900/20 rounded-full"></div>
                          <div className="absolute inset-2 bg-green-500 rounded-full flex items-center justify-center text-white font-bold">
                            {metric.score}
                          </div>
                        </div>
                        <div className="text-sm font-semibold">
                          {metric.name}
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 text-center">
                    <div className="text-2xl font-bold text-green-600 mb-2">
                      {t("phases.phase5.perfectScore")}
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.perfectDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4">
                    {t("phases.phase5.keyMetrics")}
                  </h4>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="font-medium">
                        {t("testing.firstContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">1.2s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.largestContentfulPaint")}
                      </div>
                      <div className="text-green-600 font-mono">2.1s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.cumulativeLayoutShift")}
                      </div>
                      <div className="text-green-600 font-mono">0.01</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.timeToInteractive")}
                      </div>
                      <div className="text-green-600 font-mono">2.8s</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-accent/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("creator.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70">
                {t("creator.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl overflow-hidden max-w-3xl mx-auto">
              <div className="relative h-64 sm:h-96 lg:h-[500px] w-full">
                <img
                  src={devPhotoUrl}
                  alt={t("creator.name")}
                  className="w-full h-full object-contain object-center"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
                <div className="absolute bottom-4 sm:bottom-6 left-4 sm:left-6 text-white">
                  <h3 className="font-playfair text-center text-2xl sm:text-3xl lg:text-4xl font-bold mb-2">
                    {t("creator.name")}
                  </h3>
                </div>
              </div>

              <div className="p-6 sm:p-8">
                <p className="text-foreground/80 text-base sm:text-lg leading-relaxed mb-6 sm:mb-8 max-w-4xl mx-auto text-center">
                  {t("creator.description")}
                </p>

                <div className="text-center">
                  <Button
                    onClick={() => setIsStoryModalOpen(true)}
                    className="bg-accent hover:bg-accent-light text-accent-foreground px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-200"
                    data-testid="creator-story-button"
                  >
                    🎓 {t("creator.selfTaughtButton")}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-6"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("geminiPhase.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70 max-w-3xl mx-auto">
                {t("geminiPhase.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl p-6 sm:p-8 max-w-4xl mx-auto mb-16">
              <div className="flex flex-col sm:flex-row items-center text-center sm:text-left">
                <div className="w-20 h-20 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-3xl mb-4 sm:mb-0 sm:mr-6 flex-shrink-0">
                  💎
                </div>
                <div>
                  <p className="text-foreground/80 leading-relaxed">
                    {t("geminiPhase.intro")}
                  </p>
                </div>
              </div>
            </div>

            <h3 className="font-playfair text-2xl sm:text-3xl font-bold mb-12 text-center">
              {t("geminiPhase.changelogTitle")}
            </h3>

            <div className="grid md:grid-cols-2 gap-8">
              {Array.isArray(geminiCards) &&
                geminiCards.map((card, index) => (
                  <div
                    key={index}
                    className="bg-card rounded-lg border border-border p-6"
                  >
                    <h4 className="font-playfair text-xl font-semibold mb-4">
                      {card.title}
                    </h4>
                    <div className="mb-4 bg-secondary/30 border-l-4 border-accent p-4 rounded-r-md">
                      <p className="font-mono text-sm italic text-foreground/70">
                        "{card.userQuote}"
                      </p>
                    </div>
                    <div>
                      <h5 className="font-semibold mb-2 flex items-center text-sm">
                        <span className="mr-2 text-lg">💎</span> Gemini's
                        Solution
                      </h5>
                      <p className="text-sm text-foreground/80">
                        {card.geminiSolution}
                      </p>
                    </div>
                  </div>
                ))}
            </div>
            <GeminiShowcase />
          </div>
        </section>

        <section
          id="contact"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-primary text-primary-foreground"
        >
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("contact.title")}
              </h2>
              <p className="text-xl text-primary-foreground/70">
                {t("contact.subtitle")}
              </p>
            </div>

            <ContactForm />
          </div>
        </section>
      </main>

      <CreatorStoryModal
        isOpen={isStoryModalOpen}
        onClose={() => setIsStoryModalOpen(false)}
      />

      {showScrollTop && (
        <button
          data-testid="scroll-to-top-home"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg sm:w-14 sm:h-14"
          aria-label="Przewiń na górę"
        >
          ↑
        </button>
      )}
    </>
  );
}

-----------------------------------

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation } from "@tanstack/react-query";
import { useTranslation } from "react-i18next";
import { z } from "zod";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import type { ContactFormData } from "@/types";

const contactSchema = z.object({
  name: z.string().min(2, "Imię musi mieć co najmniej 2 znaki"),
  email: z.string().email("Nieprawidłowy adres email"),
  project: z.string().min(1, "Wybierz typ projektu"),
  message: z.string().min(10, "Wiadomość musi mieć co najmniej 10 znaków"),
});

export function ContactForm() {
  const { t } = useTranslation();
  const { toast } = useToast();

  const form = useForm<ContactFormData>({
    resolver: zodResolver(contactSchema),
    defaultValues: {
      name: "",
      email: "",
      project: "",
      message: "",
    },
  });

  const submitFormMutation = useMutation({
    mutationFn: async (data: ContactFormData) => {
      return await apiRequest("POST", "/api/contact", data);
    },
    onSuccess: () => {
      toast({
        title: "Wiadomość wysłana!",
        description: "Dziękujemy za kontakt. Odpowiemy w ciągu 24 godzin.",
      });
      form.reset();
    },
    onError: (error) => {
      toast({
        title: "Błąd",
        description: "Nie udało się wysłać wiadomości. Spróbuj ponownie.",
        variant: "destructive",
      });
      console.error("Contact form error:", error);
    },
  });

  const onSubmit = (data: ContactFormData) => {
    submitFormMutation.mutate(data);
  };

  return (
    <form
      onSubmit={form.handleSubmit(onSubmit)}
      className="max-w-2xl mx-auto space-y-6 animate-slide-in"
      data-testid="contact-form"
    >
      <div className="grid md:grid-cols-2 gap-6">
        <div>
          <Label
            htmlFor="name"
            className="block text-sm font-medium mb-2 text-white"
          >
            {t("contact.name")}
          </Label>
          <Input
            {...form.register("name")}
            data-testid="input-name"
            type="text"
            id="name"
            placeholder="Jan Kowalski"
            className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg focus:ring-2 focus:ring-accent/50 focus:border-accent text-white placeholder-white/60"
          />
          {form.formState.errors.name && (
            <p className="text-red-400 text-sm mt-1">
              {form.formState.errors.name.message}
            </p>
          )}
        </div>

        <div>
          <Label
            htmlFor="email"
            className="block text-sm font-medium mb-2 text-white"
          >
            {t("contact.email")}
          </Label>
          <Input
            {...form.register("email")}
            data-testid="input-email"
            type="email"
            id="email"
            placeholder="jan@example.com"
            className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg focus:ring-2 focus:ring-accent/50 focus:border-accent text-white placeholder-white/60"
          />
          {form.formState.errors.email && (
            <p className="text-red-400 text-sm mt-1">
              {form.formState.errors.email.message}
            </p>
          )}
        </div>
      </div>

      <div>
        <Label
          htmlFor="project-select"
          className="block text-sm font-medium mb-2 text-white"
        >
          {t("contact.project")}
        </Label>
        <Select onValueChange={(value) => form.setValue("project", value)}>
          <SelectTrigger
            id="project-select"
            data-testid="select-project"
            className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg focus:ring-2 focus:ring-accent/50 focus:border-accent text-white"
          >
            <SelectValue placeholder="Wybierz typ projektu..." />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="website">
              {t("contact.projectTypes.website")}
            </SelectItem>
            <SelectItem value="webapp">
              {t("contact.projectTypes.webapp")}
            </SelectItem>
            <SelectItem value="ecommerce">
              {t("contact.projectTypes.ecommerce")}
            </SelectItem>
            <SelectItem value="tutorial">
              {t("contact.projectTypes.tutorial")}
            </SelectItem>
            <SelectItem value="other">
              {t("contact.projectTypes.other")}
            </SelectItem>
          </SelectContent>
        </Select>
        {form.formState.errors.project && (
          <p className="text-red-400 text-sm mt-1">
            {form.formState.errors.project.message}
          </p>
        )}
      </div>

      <div>
        <Label
          htmlFor="message"
          className="block text-sm font-medium mb-2 text-white"
        >
          {t("contact.message")}
        </Label>
        <Textarea
          {...form.register("message")}
          data-testid="textarea-message"
          id="message"
          rows={5}
          placeholder="Opisz swój pomysł na projekt..."
          className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg focus:ring-2 focus:ring-accent/50 focus:border-accent text-white placeholder-white/60"
        />
        {form.formState.errors.message && (
          <p className="text-red-400 text-sm mt-1">
            {form.formState.errors.message.message}
          </p>
        )}
      </div>

      <div className="text-center">
        <Button
          data-testid="button-submit"
          type="submit"
          disabled={submitFormMutation.isPending}
          className="bg-accent hover:bg-accent-light text-accent-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-200 hover:scale-105"
        >
          {submitFormMutation.isPending
            ? "Wysyłanie..."
            : `🚀 ${t("contact.submit")}`}
        </Button>
      </div>
    </form>
  );
}

--------------------------------------

import { useState, useEffect } from "react";
import { Helmet } from "react-helmet-async";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import InteractiveWorkshop from "@/components/interactive-workshop";
import { TranslationDemo } from "@/components/translation-demo";
import { ContactForm } from "@/components/contact-form";
import { CreatorStoryModal } from "@/components/creator-story-modal";
import { GeminiShowcase } from "@/components/gemini-showcase";
import { AnnotatedPrompt } from "@/components/AnnotatedPrompt";
import devPhotoUrl from "@/assets/3.avif";

export default function Home() {
  const { t } = useTranslation();
  const [isStoryModalOpen, setIsStoryModalOpen] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 300);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  const geminiCards =
    (t("geminiPhase.cards", { returnObjects: true }) as Array<{
      title: string;
      userQuote: string;
      geminiSolution: string;
    }>) || [];

  const promptTitle = t("phases.phase0.promptTitle");
  const promptText = t("phases.phase0.promptText");
  const promptShowMore = t("phases.phase0.promptShowMore");
  const promptShowLess = t("phases.phase0.promptShowLess");
  const promptAnnotations =
    (t("phases.phase0.promptAnnotations", {
      returnObjects: true,
    }) as Record<string, string>) || {};

  return (
    <>
      <Helmet>
        <title>{t("seo.title")}</title>
        <meta name="description" content={t("seo.description")} />
        <meta property="og:title" content={t("seo.title")} />
        <meta property="og:description" content={t("seo.description")} />
        <meta property="og:type" content="website" />
        <link rel="canonical" href={window.location.href} />
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "Article",
            headline: t("seo.title"),
            description: t("seo.description"),
            author: {
              "@type": "Person",
              name: "AI Genesis",
            },
            publisher: {
              "@type": "Organization",
              name: "AI Genesis",
            },
          })}
        </script>
      </Helmet>

      <main className="w-full overflow-x-hidden">
        <section className="min-h-screen bg-gradient-to-br from-background via-secondary/5 to-accent/5 flex items-center justify-center relative overflow-hidden px-4 lg:px-8 w-full">
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-10 left-10 w-20 h-20 bg-accent/10 rounded-full animate-bounce-subtle"></div>
            <div className="absolute top-1/2 right-20 w-16 h-16 bg-accent/20 rounded-full animate-bounce-subtle delay-1000"></div>
            <div className="absolute bottom-20 left-1/3 w-12 h-12 bg-accent/15 rounded-full animate-bounce-subtle delay-2000"></div>
          </div>

          <div className="text-center z-10 animate-fade-in w-full max-w-4xl mx-auto">
            <h1 className="font-playfair text-3xl sm:text-5xl lg:text-7xl font-bold mb-6">
              <span className="gradient-gold bg-clip-text text-transparent">
                {t("hero.title")}
              </span>
            </h1>
            <h2 className="font-playfair text-lg sm:text-2xl lg:text-3xl mb-8 text-foreground/80">
              {t("hero.subtitle")}
            </h2>
            <p className="text-base sm:text-lg lg:text-xl mb-12 max-w-2xl mx-auto leading-relaxed text-foreground/70 px-4">
              {t("hero.description")}
            </p>

            <div className="mb-12">
              <div className="flex justify-center space-x-4 mb-4">
                {[...Array(6)].map((_, i) => (
                  <div
                    key={i}
                    className="w-2 h-2 bg-accent rounded-full animate-pulse"
                    style={{ animationDelay: `${i * 0.2}s` }}
                  ></div>
                ))}
              </div>
              <p className="text-sm text-foreground/60">
                {t("phases.phaseCount")}
              </p>
            </div>

            <a
              href="#phase-0"
              className="inline-flex items-center space-x-3 bg-accent hover:bg-accent-light text-accent-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-200 hover:scale-105 animate-glow"
              data-testid="hero-cta"
            >
              <span>{t("hero.cta")}</span>
              <span>🚀</span>
            </a>
          </div>
        </section>

        <section
          id="phase-0"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-accent to-accent-light rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                💡
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase0.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase0.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase0.rawIdeaTitle")}
                </h3>
                <div className="bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-400 p-6 mb-8 transform rotate-1">
                  <div className="font-mono text-sm mb-4 text-yellow-700 dark:text-yellow-300">
                    {t("phases.phase0.noteComment")}
                  </div>
                  <p className="text-foreground leading-relaxed">
                    "{t("phases.phase0.userNote")}"
                  </p>
                </div>

                <div className="bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">🤖</span>
                    {t("phases.phase0.aiInterpretation")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    {t("phases.phase0.aiDescription")}
                  </p>
                </div>
              </div>

              <div className="animate-fade-in">
                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("phases.phase0.terminalTitle")}
                    </span>
                  </div>
                  <div className="font-mono text-green-300 text-sm space-y-2">
                    <div className="animate-pulse">
                      &gt; {t("phases.phase0.analyzing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "0.5s" }}
                    >
                      &gt; {t("phases.phase0.generating")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1s" }}
                    >
                      &gt; {t("phases.phase0.planning")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "1.5s" }}
                    >
                      &gt; {t("phases.phase0.designing")}
                    </div>
                    <div
                      className="animate-pulse"
                      style={{ animationDelay: "2s" }}
                    >
                      &gt; {t("phases.phase0.complete")}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <AnnotatedPrompt
              title={promptTitle}
              promptText={promptText}
              annotations={promptAnnotations}
              showMoreLabel={promptShowMore}
              showLessLabel={promptShowLess}
            />
          </div>
        </section>

        <section
          id="phase-1"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🏗️
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase1.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase1.subtitle")}
              </p>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.projectStructure")}
                </h3>

                <div className="code-block rounded-lg p-4 sm:p-6 text-white font-mono text-xs sm:text-sm overflow-x-auto">
                  <div className="text-accent mb-4">ai-genesis-project/</div>
                  <div className="ml-4 space-y-1">
                    <div>
                      ├── <span className="text-yellow-400">functions/</span>
                    </div>
                    <div className="ml-4">└── submit-form.ts</div>
                    <div>
                      ├── <span className="text-yellow-400">src/</span>
                    </div>
                    <div className="ml-4">
                      ├── <span className="text-blue-400">components/</span>
                    </div>
                    <div className="ml-8">├── __tests__/</div>
                    <div className="ml-8">├── ControlHub.tsx</div>
                    <div className="ml-8">└── InteractiveWorkshop.tsx</div>
                    <div className="ml-4">
                      ├── <span className="text-green-400">pages/</span>
                    </div>
                    <div className="ml-4">
                      ├── <span className="text-purple-400">translations/</span>
                    </div>
                    <div className="ml-8">├── pl.json</div>
                    <div className="ml-8">├── en.json</div>
                    <div className="ml-8">└── ja.json</div>
                    <div className="ml-4">├── App.tsx</div>
                    <div className="ml-4">├── main.tsx</div>
                    <div className="ml-4">└── i18n.ts</div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase1.techStack")}
                </h3>

                <div className="space-y-4 sm:space-y-6">
                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-blue-700 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TS
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TypeScript + React + Vite
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.typeScriptDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-cyan-700 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        TW
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        TailwindCSS + Framer Motion
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.tailwindDesc")}
                    </p>
                  </div>

                  <div className="bg-card rounded-lg p-4 sm:p-6 border border-border">
                    <div className="flex items-center mb-3 sm:mb-4">
                      <div className="w-8 h-8 bg-green-500 rounded flex items-center justify-center text-white text-sm font-bold mr-3">
                        ⚡
                      </div>
                      <h4 className="font-semibold text-sm sm:text-base">
                        Netlify Functions + Testing
                      </h4>
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase1.netlifyDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 sm:mt-8 bg-accent/10 rounded-lg p-4 sm:p-6">
                  <h4 className="font-semibold mb-4 flex items-center">
                    <span className="mr-2">🤖</span>
                    {t("phases.phase1.aiJustification")}
                  </h4>
                  <p className="text-sm leading-relaxed">
                    "{t("phases.phase1.stackReasoning")}"
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-2"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🎨
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase2.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase2.subtitle")}
              </p>
            </div>

            <div className="mb-12 animate-slide-in">
              <div className="bg-accent/10 border-l-4 border-accent p-6 rounded-r-lg">
                <h3 className="font-playfair text-xl font-semibold mb-4">
                  {t("phases.phase2.designDecision")}
                </h3>
                <p className="leading-relaxed">
                  {t("phases.phase2.designReasoning")}
                </p>
              </div>
            </div>

            <div className="grid lg:grid-cols-2 gap-8 lg:gap-12">
              <div className="animate-fade-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.hubFeatures")}
                </h3>

                <div className="space-y-4">
                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                      🧭
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.navFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.navDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                      🌐
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.langFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.langDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                      🌙
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.themeFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.themeDesc")}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-card rounded-lg border border-border">
                    <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                      ♿
                    </div>
                    <div>
                      <h4 className="font-semibold mb-1">
                        {t("phases.phase2.a11yFeature")}
                      </h4>
                      <p className="text-sm text-foreground/70">
                        {t("phases.phase2.a11yDesc")}
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-slide-in">
                <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-6">
                  {t("phases.phase2.demoTitle")}
                </h3>

                <div className="relative bg-muted rounded-lg p-6 h-96 overflow-hidden">
                  <div className="absolute left-0 top-0 h-full w-12 bg-card border-r border-border hover:w-32 transition-all duration-300 group">
                    <div className="p-2 space-y-2">
                      <div className="w-8 h-8 bg-accent rounded-lg flex items-center justify-center text-accent-foreground text-xs font-bold">
                        AI
                      </div>
                      <div className="space-y-1">
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          💡
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          🏗️
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          🎨
                        </div>
                        <div className="w-8 h-8 flex items-center justify-center text-xl">
                          ⚙️
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="ml-16 p-4">
                    <h4 className="font-semibold mb-2">
                      {t("phases.phase2.mainContent")}
                    </h4>
                    <p className="text-sm text-foreground/70 mb-4">
                      {t("phases.phase2.hubDescription")}
                    </p>
                    <div className="space-y-2">
                      <div className="h-2 bg-secondary rounded"></div>
                      <div className="h-2 bg-secondary rounded w-3/4"></div>
                      <div className="h-2 bg-secondary rounded w-1/2"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-3"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-red-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                ⚙️
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase3.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase3.subtitle")}
              </p>
            </div>

            <InteractiveWorkshop />

            <div className="animate-fade-in">
              <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
                {t("phases.phase3.aiDialogue")}
              </h3>

              <div className="bg-card rounded-lg py-4 px-0 md:p-6 border border-border space-y-12">
                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-blue-500 rounded-full flex-shrink-0 flex items-center justify-center text-white text-base">
                    👤
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4">
                      <p className="font-mono text-sm">
                        "{t("phases.phase3.userRequest")}"
                      </p>
                    </div>
                  </div>
                </div>

                <div className="flex flex-col items-center md:flex-row md:items-start md:space-x-4">
                  <div className="mb-4 md:mb-0 w-10 h-10 bg-accent rounded-full flex-shrink-0 flex items-center justify-center text-accent-foreground text-base">
                    🤖
                  </div>
                  <div className="w-full flex-1">
                    <div className="bg-accent/10 rounded-lg p-4">
                      <p className="text-sm">
                        <strong>{t("phases.phase3.aiResponse")}</strong>{" "}
                        <code className="bg-muted px-2 py-1 rounded">
                          components/ImageModal.tsx
                        </code>
                        .
                      </p>
                      <div className="mt-4 code-block rounded p-4 text-white font-mono text-xs">
                        <pre>
                          <code className="whitespace-pre-wrap break-words">{`${t(
                            "phases.phase3.generatedComment"
                          )}
import { createPortal } from 'react-dom';
import { useEffect } from 'react';

interface ImageModalProps {
  src: string;
  alt: string;
  onClose: () => void;
}

export const ImageModal: React.FC<ImageModalProps> = ({ src, alt, onClose }) => {
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [onClose]);

  return createPortal(
    <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50"
         onClick={onClose}>
      <img src={src} alt={alt} className="max-w-full max-h-full"
           onClick={(e) => e.stopPropagation()} />
    </div>,
    document.body
  );
};`}</code>
                        </pre>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-4"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 mobile-safe-width"
        >
          <div className="max-w-6xl mx-auto mobile-padding">
            <div className="text-center mb-16 animate-fade-in min-w-0">
              <div className="mobile-code-container w-20 h-20 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🌍
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase4.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase4.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="min-w-0">
                <TranslationDemo />
              </div>

              <div className="animate-fade-in min-w-0">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  {t("phases.phase4.seoImplementation")}
                </h3>

                <div className="space-y-6">
                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">📋</span>
                      {t("phases.phase4.metaTags")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs overflow-x-auto">
                      <pre className="whitespace-pre-wrap break-all">
                        <code>{`${t("phases.phase4.metaComment")}
<Helmet>
  <title>{t('seo.title')}</title>
  <meta name="description" content={t('seo.description')} />
  <meta property="og:title" content={t('seo.title')} />
  <meta property="og:description" content={t('seo.description')} />
  <link rel="canonical" href={canonicalUrl} />
</Helmet>`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-card rounded-lg p-6 border border-border">
                    <h4 className="font-semibold mb-4 flex items-center">
                      <span className="mr-2">🏷️</span>
                      {t("phases.phase4.jsonLD")}
                    </h4>
                    <div className="code-block rounded p-4 text-white font-mono text-xs overflow-x-auto">
                      <pre className="whitespace-pre-wrap break-all">
                        <code>{`{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "AI Genesis: Interactive Meta-Tutorial",
  "description": "Comprehensive guide to AI-assisted development",
  "author": {
    "@type": "Person",
    "name": "AI Genesis"
  },
  "publisher": {
    "@type": "Organization",
    "name": "AI Genesis"
  }
}`}</code>
                      </pre>
                    </div>
                  </div>

                  <div className="bg-accent/10 rounded-lg p-6">
                    <h4 className="font-semibold mb-4">
                      📊 {t("performance.title")}
                    </h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <div className="font-medium">
                          {t("performance.lazyLoading")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.lazyLoadingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.imageOptimization")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.imageOptDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.codeSplitting")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.codeSplittingDesc")}
                        </div>
                      </div>
                      <div>
                        <div className="font-medium">
                          {t("performance.bundleAnalysis")}
                        </div>
                        <div className="text-foreground/70">
                          {t("performance.bundleAnalysisDesc")}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🧪
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("testing.phaseTitle")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("testing.phaseSubtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  🔬 {t("testing.unitTestExample")}
                </h3>

                <div className="code-block rounded-lg p-6 text-white font-mono text-sm">
                  <pre>
                    <code className="whitespace-pre-wrap break-words">{`// ControlHub.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ControlHub } from '../ControlHub';

describe('ControlHub', () => {
  it('should expand on hover', async () => {
    render(<ControlHub />);

    const hub = screen.getByTestId('control-hub');
    expect(hub).toHaveClass('control-hub-collapsed');

    fireEvent.mouseEnter(hub);

    await waitFor(() => {
      expect(hub).toHaveClass('control-hub-expanded');
    });
  });

  it('should navigate to correct section', () => {
    render(<ControlHub />);

    const iskraLink = screen.getByText('Iskra');
    fireEvent.click(iskraLink);

    expect(window.location.hash).toBe('#phase-0');
  });
});`}</code>
                  </pre>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  ✅ {t("testing.testResults")}
                </h3>

                <div className="bg-primary text-primary-foreground rounded-lg p-6 border border-border">
                  <div className="flex items-center mb-4">
                    <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm ml-4">
                      {t("testing.testResultsVitest")}
                    </span>
                  </div>
                  <div className="font-mono text-green-400 text-sm space-y-1">
                    <div>✓ ControlHub.test.tsx (2)</div>
                    <div className="ml-4">✓ should expand on hover</div>
                    <div className="ml-4">
                      ✓ should navigate to correct section
                    </div>
                    <div>✓ TranslationModule.test.tsx (3)</div>
                    <div className="ml-4">
                      ✓ should switch languages correctly
                    </div>
                    <div className="ml-4">✓ should fallback to English</div>
                    <div className="ml-4">
                      ✓ should update translations dynamically
                    </div>
                    <div>✓ InteractiveWorkshop.test.tsx (2)</div>
                    <div className="ml-4">✓ should simulate bug correctly</div>
                    <div className="ml-4">✓ should fix bug on demand</div>
                    <div className="text-accent mt-4">
                      <strong>Tests: 7 passed, 7 total</strong>
                      <br />
                      <strong>Time: 2.14s</strong>
                    </div>
                  </div>
                </div>

                <div className="mt-6 bg-card rounded-lg p-6 border border-border">
                  <h4 className="font-semibold mb-4">
                    🛠️ {t("testing.testingStack")}
                  </h4>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>{t("testing.testRunner")}</span>
                      <span className="font-mono">Vitest</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.testingLibrary")}</span>
                      <span className="font-mono">@testing-library/react</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.coverage")}</span>
                      <span className="text-green-700 font-mono">96.8%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>{t("testing.e2eTests")}</span>
                      <span className="font-mono">
                        {t("testing.e2eTestsValue")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-5"
          className="min-h-screen py-12 sm:py-20 px-4 sm:px-8 w-full max-w-full overflow-x-hidden"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <div className="w-20 h-20 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-full flex items-center justify-center text-3xl mx-auto mb-6">
                🚀
              </div>
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("phases.phase5.title")}
              </h2>
              <p className="text-xl text-foreground/70 mb-12">
                {t("phases.phase5.subtitle")}
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="animate-slide-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  🌐 {t("phases.phase5.deploymentProcess")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm">
                        1
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Git Push</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.gitPush")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                        2
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Netlify Build</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.netlifyBuild")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                        3
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">Functions Deploy</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.functionsDeploy")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm">
                        4
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold">CDN Distribution</div>
                        <div className="text-sm text-foreground/70">
                          {t("phases.phase5.cdnDistribution")}
                        </div>
                      </div>
                      <div className="text-green-500">✓</div>
                    </div>
                  </div>

                  <div className="mt-6 bg-accent/10 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="font-semibold text-green-700 dark:text-green-400">
                        {t("phases.phase5.liveAt")}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="animate-fade-in">
                <h3 className="font-playfair text-2xl font-semibold mb-6">
                  📊 {t("phases.phase5.lighthouseReport")}
                </h3>

                <div className="bg-card rounded-lg p-6 border border-border">
                  <div className="text-center mb-6">
                    <h4 className="font-semibold text-lg mb-2">
                      {t("phases.phase5.auditResults")}
                    </h4>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.auditSubtitle")}
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-6">
                    {[
                      { name: "Performance", score: 100 },
                      { name: "Accessibility", score: 100 },
                      { name: "Best Practices", score: 100 },
                      { name: "SEO", score: 100 },
                    ].map((metric) => (
                      <div key={metric.name} className="text-center">
                        <div className="relative w-20 h-20 mx-auto mb-2">
                          <div className="absolute inset-0 bg-green-100 dark:bg-green-900/20 rounded-full"></div>
                          <div className="absolute inset-2 bg-green-700 rounded-full flex items-center justify-center text-white font-bold">
                            {metric.score}
                          </div>
                        </div>
                        <div className="text-sm font-semibold">
                          {metric.name}
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 text-center">
                    <div className="text-2xl font-bold text-green-600 mb-2">
                      {t("phases.phase5.perfectScore")}
                    </div>
                    <p className="text-sm text-foreground/70">
                      {t("phases.phase5.perfectDesc")}
                    </p>
                  </div>
                </div>

                <div className="mt-6 bg-accent/10 rounded-lg p-6">
                  <h4 className="font-semibold mb-4">
                    {t("phases.phase5.keyMetrics")}
                  </h4>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="font-medium">
                        {t("testing.firstContentfulPaint")}
                      </div>
                      <div className="text-green-700 font-mono">1.2s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.largestContentfulPaint")}
                      </div>
                      <div className="text-green-700 font-mono">2.1s</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.cumulativeLayoutShift")}
                      </div>
                      <div className="text-green-700 font-mono">0.01</div>
                    </div>
                    <div>
                      <div className="font-medium">
                        {t("testing.timeToInteractive")}
                      </div>
                      <div className="text-green-700 font-mono">2.8s</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section className="py-12 sm:py-20 px-4 sm:px-8 bg-accent/5">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("creator.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70">
                {t("creator.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl overflow-hidden max-w-3xl mx-auto">
              <div className="relative h-64 sm:h-96 lg:h-[500px] w-full">
                <img
                  src={devPhotoUrl}
                  alt={t("creator.name")}
                  className="w-full h-full object-contain object-center"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
                <div className="absolute bottom-4 sm:bottom-6 left-4 sm:left-6 text-white">
                  <h3 className="font-playfair text-center text-2xl sm:text-3xl lg:text-4xl font-bold mb-2">
                    {t("creator.name")}
                  </h3>
                </div>
              </div>

              <div className="p-6 sm:p-8">
                <p className="text-foreground/80 text-base sm:text-lg leading-relaxed mb-6 sm:mb-8 max-w-4xl mx-auto text-center">
                  {t("creator.description")}
                </p>

                <div className="text-center">
                  <Button
                    onClick={() => setIsStoryModalOpen(true)}
                    className="bg-accent hover:bg-accent-light text-accent-foreground px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all duration-200"
                    data-testid="creator-story-button"
                  >
                    🎓 {t("creator.selfTaughtButton")}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </section>

        <section
          id="phase-6"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-secondary/5"
        >
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-12 sm:mb-16 animate-fade-in">
              <h2 className="font-playfair text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6">
                {t("geminiPhase.sectionTitle")}
              </h2>
              <p className="text-lg sm:text-xl text-foreground/70 max-w-3xl mx-auto">
                {t("geminiPhase.sectionSubtitle")}
              </p>
            </div>

            <div className="bg-card rounded-lg border border-border shadow-xl p-6 sm:p-8 max-w-4xl mx-auto mb-16">
              <div className="flex flex-col sm:flex-row items-center text-center sm:text-left">
                <div className="w-20 h-20 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-3xl mb-4 sm:mb-0 sm:mr-6 flex-shrink-0">
                  💎
                </div>
                <div>
                  <p className="text-foreground/80 leading-relaxed">
                    {t("geminiPhase.intro")}
                  </p>
                </div>
              </div>
            </div>

            <h3 className="font-playfair text-2xl sm:text-3xl font-bold mb-12 text-center">
              {t("geminiPhase.changelogTitle")}
            </h3>

            <div className="grid md:grid-cols-2 gap-8">
              {Array.isArray(geminiCards) &&
                geminiCards.map((card, index) => (
                  <div
                    key={index}
                    className="bg-card rounded-lg border border-border p-6"
                  >
                    <h4 className="font-playfair text-xl font-semibold mb-4">
                      {card.title}
                    </h4>
                    <div className="mb-4 bg-secondary/30 border-l-4 border-accent p-4 rounded-r-md">
                      <p className="font-mono text-sm italic text-foreground/70">
                        "{card.userQuote}"
                      </p>
                    </div>
                    <div>
                      <h5 className="font-semibold mb-2 flex items-center text-sm">
                        <span className="mr-2 text-lg">💎</span> Gemini's
                        Solution
                      </h5>
                      <p className="text-sm text-foreground/80">
                        {card.geminiSolution}
                      </p>
                    </div>
                  </div>
                ))}
            </div>
            <GeminiShowcase />
          </div>
        </section>

        <section
          id="contact"
          className="py-12 sm:py-20 px-4 sm:px-8 bg-primary text-primary-foreground"
        >
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-16 animate-fade-in">
              <h2 className="font-playfair text-4xl md:text-5xl font-bold mb-6">
                {t("contact.title")}
              </h2>
              <p className="text-xl text-primary-foreground/70">
                {t("contact.subtitle")}
              </p>
            </div>

            <ContactForm />
          </div>
        </section>
      </main>

      <CreatorStoryModal
        isOpen={isStoryModalOpen}
        onClose={() => setIsStoryModalOpen(false)}
      />

      {showScrollTop && (
        <button
          data-testid="scroll-to-top-home"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg sm:w-14 sm:h-14"
          aria-label="Przewiń na górę"
        >
          ↑
        </button>
      )}
    </>
  );
}

--------------------------------

import { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import devPhotoUrl from "@/assets/1.avif";
import devPhotoUrl1 from "@/assets/2.avif";

const workingCode = `// ImageGallery.tsx
import React, { useState } from 'react';

const ImageGallery: React.FC = () => {
  const [images] = useState([
    { id: 1, src: '/mountain.jpg', alt: 'Mountain' },
    { id: 2, src: '/ocean.jpg', alt: 'Ocean' }
  ]);

  return (
    <div className="grid grid-cols-2 gap-4">
      {images.map(img => (
        <img
          key={img.id}
          src={img.src}
          alt={img.alt}
          className="rounded-lg hover:scale-105 transition-transform"
        />
      ))}
    </div>
  );
};`;

const buggyCode = `// ImageGallery.tsx - WITH BUG! 🐛
import React, { useState } from 'react';

const ImageGallery: React.FC = () => {
  const [images] = useState([
    { id: 1, src: '/mountain.jpg', alt: 'Mountain' },
    { id: 2, src: '/ocean.jpg', alt: 'Ocean' }
  ]);

  return (
    <div className="grid grid-cols-1 gap-4"> {/* BUG: Wrong grid-cols! */}
      {images.map(img => (
        <img
          key={img.id}
          src={img.src}
          alt={img.alt}
          className="rounded-lg w-12 h-12" {/* BUG: Wrong dimensions! */}
        />
      ))}
    </div>
  );
};`;

export default function InteractiveWorkshop() {
  const [isBugActive, setIsBugActive] = useState(false);
  const [currentCode, setCurrentCode] = useState(workingCode);
  const { t } = useTranslation();
  const { toast } = useToast();

  useEffect(() => {
    const gallery = document.getElementById("gallery-demo");
    if (!gallery) return;

    const grid = gallery.querySelector<HTMLDivElement>(".grid");
    const images = gallery.querySelectorAll<HTMLImageElement>("img");

    if (isBugActive) {
      grid?.classList.remove("grid-cols-2");
      grid?.classList.add("grid-cols-1");
      images.forEach((img) => {
        img.style.width = "3rem";
        img.style.height = "3rem";
        img.style.objectFit = "none";
        img.classList.remove("hover:scale-105");
      });
    } else {
      grid?.classList.remove("grid-cols-1");
      grid?.classList.add("grid-cols-2");
      images.forEach((img) => {
        img.style.width = "";
        img.style.height = "";
        img.style.objectFit = "";
        img.classList.add("hover:scale-105");
      });
    }
  }, [isBugActive]);

  const toggleBug = () => {
    setIsBugActive((prev) => !prev);
    setCurrentCode((prevCode) =>
      prevCode === workingCode ? buggyCode : workingCode
    );
  };

  const copyCode = async () => {
    try {
      await navigator.clipboard.writeText(currentCode);
      toast({
        title: t("workshop.codeCopied"),
        description: t("workshop.codeDescription"),
      });
    } catch (err) {
      toast({
        title: t("workshop.error"),
        description: t("workshop.copyError"),
        variant: "destructive",
      });
    }
  };

  return (
    <div className="mb-16 animate-slide-in">
      <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
        🔧 {t("workshop.title")}
      </h3>

      <div className="flex flex-col lg:grid lg:grid-cols-2 gap-12">
        <div>
          <h4 className="font-semibold mb-4">{t("workshop.galleryDemo")}</h4>
          <div
            id="gallery-demo"
            className="bg-card rounded-lg p-6 border border-border"
            data-testid="gallery-demo"
          >
            <div className="grid grid-cols-2 gap-4 mb-4">
              <img
                src={devPhotoUrl}
                alt={t("workshop.mountainAlt")}
                className="rounded-lg shadow-md hover:scale-105 transition-all duration-200 cursor-pointer"
                loading="lazy"
              />
              <img
                src={devPhotoUrl1}
                alt={t("workshop.oceanAlt")}
                className="rounded-lg shadow-md hover:scale-105 transition-all duration-200 cursor-pointer"
                loading="lazy"
              />
            </div>

            <div className="flex space-x-4">
              <Button
                data-testid="bug-button"
                onClick={toggleBug}
                variant={isBugActive ? "default" : "destructive"}
                className={isBugActive ? "bg-green-500 hover:bg-green-600" : ""}
              >
                {isBugActive ? t("workshop.fixBug") : t("workshop.simulateBug")}
              </Button>
            </div>
          </div>
        </div>

        <div>
          <h4 className="font-semibold mb-4">{t("workshop.componentCode")}</h4>
          <div className="code-block rounded-lg p-6 text-white font-mono text-sm overflow-x-auto">
            <pre data-testid="code-display">
              <code className="whitespace-pre-wrap break-words">
                {currentCode}
              </code>
            </pre>
          </div>

          <Button
            data-testid="copy-code-button"
            onClick={copyCode}
            variant="outline"
            className="mt-4 bg-accent hover:bg-accent-light text-accent-foreground"
          >
            📋 {t("workshop.copyCode")}
          </Button>
        </div>
      </div>
    </div>
  );
}

-------------------------------

import { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { useTheme } from "@/components/theme-provider";
import { cn } from "@/lib/utils";
import i18n from "@/lib/i18n";
import { Link } from "wouter";
import { RemoveScroll } from "react-remove-scroll";

export function ControlHub() {
  const { t } = useTranslation();
  const { theme, setTheme } = useTheme();
  const [isExpanded, setIsExpanded] = useState(false);
  const [activePhase, setActivePhase] = useState("phase-0");
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showScrollToTop, setShowScrollToTop] = useState(false);
  const [isAccessibilityOn, setIsAccessibilityOn] = useState(false);

  useEffect(() => {
    const rootElement = document.documentElement;
    if (isAccessibilityOn) {
      rootElement.classList.add("accessibility-mode");
    } else {
      rootElement.classList.remove("accessibility-mode");
    }
  }, [isAccessibilityOn]);

  useEffect(() => {
    const handleScroll = () => {
      const sections = [
        "phase-0",
        "phase-1",
        "phase-2",
        "phase-3",
        "phase-4",
        "phase-5",
        "contact",
      ];
      const currentSection = sections.find((section) => {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          return rect.top <= 100 && rect.bottom >= 100;
        }
        return false;
      });

      if (currentSection && currentSection !== activePhase) {
        setActivePhase(currentSection);
      }

      if (window.scrollY > 300) {
        setShowScrollToTop(true);
      } else {
        setShowScrollToTop(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [activePhase]);

  const phases = [
    { id: "phase-0", icon: "💡", label: t("nav.iskra") },
    { id: "phase-1", icon: "🏗️", label: t("nav.fundamenty") },
    { id: "phase-2", icon: "🎨", label: t("nav.innowacja") },
    { id: "phase-3", icon: "⚙️", label: t("nav.development") },
    { id: "phase-4", icon: "🌍", label: t("nav.zasieg") },
    { id: "phase-5", icon: "🚀", label: t("nav.deployment") },
    { id: "contact", icon: "📧", label: t("nav.contact") },
  ];

  const legalLinks = [
    { href: "/terms", icon: "📄", label: t("legalNav.terms") },
    { href: "/privacy", icon: "🛡️", label: t("legalNav.privacy") },
  ];

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: "smooth" });
      setActivePhase(sectionId);
      setIsMobileMenuOpen(false);
    }
  };

  const changeLanguage = (lng: string) => {
    i18n.changeLanguage(lng);
  };

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };

  const toggleAccessibility = () => {
    setIsAccessibilityOn(!isAccessibilityOn);
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  return (
    <>
      <div
        className={`hidden lg:grid grid-rows-[auto_1fr_auto] fixed left-4 top-1/2 transform -translate-y-1/2 z-50 transition-all duration-300 ${
          isExpanded ? "control-hub-expanded" : "control-hub-collapsed"
        } bg-card border border-border rounded-lg shadow-lg hover:shadow-xl max-h-[90vh]`}
        onMouseEnter={() => setIsExpanded(true)}
        onMouseLeave={() => setIsExpanded(false)}
        data-testid="control-hub"
      >
        <div className="p-3 lg:p-4 border-b border-border">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 gradient-gold rounded-lg flex items-center justify-center text-white font-bold text-sm">
              AI
            </div>
            <span
              className={cn(
                "font-playfair font-semibold text-lg transition-opacity duration-300 whitespace-nowrap",
                isExpanded ? "opacity-100" : "opacity-0"
              )}
            >
              Genesis
            </span>
          </div>
        </div>

        <RemoveScroll
          enabled={isExpanded}
          className="overflow-y-auto no-scrollbar"
        >
          <nav className="py-3 lg:py-4">
            <div className="space-y-1 lg:space-y-2 px-1 lg:px-2">
              {phases.map((phase) => (
                <button
                  key={phase.id}
                  data-testid={`nav-${phase.id}`}
                  onClick={() => scrollToSection(phase.id)}
                  className={cn(
                    "nav-item flex items-center space-x-3 p-2 lg:p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 group/item relative w-full text-left",
                    "focus-visible:outline-none focus-visible:ring-0",
                    activePhase === phase.id
                      ? cn(
                          "bg-accent",
                          isAccessibilityOn
                            ? "text-black"
                            : "text-accent-foreground"
                        )
                      : ""
                  )}
                  title={phase.label}
                >
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    {phase.icon}
                  </div>
                  <span
                    className={cn(
                      "nav-text transition-opacity duration-300 whitespace-nowrap",
                      isExpanded ? "opacity-100" : "opacity-0"
                    )}
                  >
                    {phase.label}
                  </span>
                  {!isExpanded && (
                    <div className="absolute left-full ml-2 px-2 py-1 bg-primary text-primary-foreground text-xs rounded opacity-0 group-hover/item:opacity-100 transition-opacity duration-200 pointer-events-none">
                      {phase.label}
                    </div>
                  )}
                </button>
              ))}
            </div>
          </nav>

          <div className="border-t border-border p-4 space-y-3">
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                🌐
              </div>
              <select
                data-testid="language-selector"
                value={i18n.language}
                onChange={(e) => changeLanguage(e.target.value)}
                className={cn(
                  "bg-background border border-border rounded px-2 py-1 text-sm transition-opacity duration-300 text-foreground",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                <option value="pl">Polski</option>
                <option value="en">English</option>
                <option value="ja">日本語</option>
              </select>
            </div>

            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                {theme === "dark" ? "🌙" : "☀️"}
              </div>
              <button
                data-testid="theme-toggle"
                onClick={toggleTheme}
                className={cn(
                  "text-sm transition-opacity duration-300 whitespace-nowrap",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                {theme === "dark" ? t("theme.lightMode") : t("theme.darkMode")}
              </button>
            </div>

            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 flex items-center justify-center text-xl">
                ♿
              </div>
              <button
                onClick={toggleAccessibility}
                data-testid="accessibility-toggle"
                className={cn(
                  "text-sm transition-opacity duration-300 whitespace-nowrap",
                  isExpanded ? "opacity-100" : "opacity-0"
                )}
              >
                {isAccessibilityOn
                  ? t("accessibility.toggleOn")
                  : t("accessibility.toggleOff")}
              </button>
            </div>
          </div>

          <div className="border-t border-border px-1 lg:px-2 py-3 lg:py-4">
            <div className="space-y-1 lg:space-y-2">
              {legalLinks.map((link) => (
                <Link
                  key={link.href}
                  href={link.href}
                  className="nav-item flex items-center space-x-3 p-2 lg:p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 group/item relative w-full text-left"
                  title={link.label}
                >
                  <div className="w-6 h-6 flex items-center justify-center text-xl">
                    {link.icon}
                  </div>
                  <span
                    className={cn(
                      "nav-text transition-opacity duration-300 whitespace-nowrap",
                      isExpanded ? "opacity-100" : "opacity-0"
                    )}
                  >
                    {link.label}
                  </span>
                  {!isExpanded && (
                    <div className="absolute left-full ml-2 px-2 py-1 bg-primary text-primary-foreground text-xs rounded opacity-0 group-hover/item:opacity-100 transition-opacity duration-200 pointer-events-none">
                      {link.label}
                    </div>
                  )}
                </Link>
              ))}
            </div>
          </div>
        </RemoveScroll>

        <div className="border-t border-border p-4">
          <div
            className={cn(
              "flex space-x-3 transition-all duration-300",
              isExpanded ? "justify-start" : "justify-center"
            )}
          >
            <a
              href="https://github.com/AdamBabinicz"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="GitHub"
              target="_blank"
              rel="noopener noreferrer"
            >
              <div className="w-5 h-5 text-lg">📂</div>
            </a>
            <a
              href="https://x.com/AdamBabinicz"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="Twitter"
              target="_blank"
              rel="noopener noreferrer"
            >
              <div className="w-5 h-5 text-lg">🐦</div>
            </a>
            <a
              href="https://www.facebook.com/adam.gierczak.334"
              className="text-muted-foreground hover:text-accent transition-colors"
              title="Facebook"
              target="_blank"
              rel="noopener noreferrer"
            >
              <div className="w-5 h-5 text-lg">💼</div>
            </a>
          </div>
        </div>
      </div>

      <button
        data-testid="mobile-menu-toggle"
        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
        className="lg:hidden fixed top-4 right-4 z-50 p-3 rounded-lg bg-card/90 backdrop-blur-sm border border-border text-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:bg-accent hover:text-accent-foreground"
      >
        {isMobileMenuOpen ? "✕" : "☰"}
      </button>

      {isMobileMenuOpen && (
        <RemoveScroll>
          <div
            className="lg:hidden fixed inset-0 z-40 bg-black/20 backdrop-blur-sm"
            onClick={() => setIsMobileMenuOpen(false)}
          >
            <div
              className="fixed left-0 top-0 h-full w-72 bg-background/95 backdrop-blur-md border-r border-border shadow-2xl p-4 grid grid-rows-[auto_1fr] animate-slide-in"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="p-3 border-b border-border">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 gradient-gold rounded-lg flex items-center justify-center text-white font-bold text-sm">
                    AI
                  </div>
                  <span className="font-playfair font-semibold text-lg">
                    Genesis
                  </span>
                </div>
              </div>
              <div className="overflow-y-auto no-scrollbar">
                <nav className="py-4">
                  <div className="space-y-2 px-2">
                    {phases.map((phase) => (
                      <button
                        key={phase.id}
                        data-testid={`mobile-nav-${phase.id}`}
                        onClick={() => scrollToSection(phase.id)}
                        className={cn(
                          "nav-item flex items-center space-x-3 p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 w-full text-left",
                          "focus-visible:outline-none focus-visible:ring-0",
                          activePhase === phase.id
                            ? cn(
                                "bg-accent",
                                isAccessibilityOn
                                  ? "text-black"
                                  : "text-accent-foreground"
                              )
                            : ""
                        )}
                        title={phase.label}
                      >
                        <div className="w-6 h-6 flex items-center justify-center text-xl">
                          {phase.icon}
                        </div>
                        <span className="nav-text">{phase.label}</span>
                      </button>
                    ))}
                  </div>
                </nav>
                <div className="border-t border-border p-4 space-y-3">
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 flex items-center justify-center text-xl">
                      🌐
                    </div>
                    <select
                      data-testid="mobile-language-selector"
                      value={i18n.language}
                      onChange={(e) => changeLanguage(e.target.value)}
                      className="bg-background border border-border rounded px-2 py-1 text-sm text-foreground w-full"
                    >
                      <option value="pl">Polski</option>
                      <option value="en">English</option>
                      <option value="ja">日本語</option>
                    </select>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 flex items-center justify-center text-xl">
                      {theme === "dark" ? "🌙" : "☀️"}
                    </div>
                    <button
                      data-testid="mobile-theme-toggle"
                      onClick={toggleTheme}
                      className="text-sm w-full text-left"
                    >
                      {theme === "dark"
                        ? t("theme.lightMode")
                        : t("theme.darkMode")}
                    </button>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-6 h-6 flex items-center justify-center text-xl">
                      ♿
                    </div>
                    <button
                      onClick={toggleAccessibility}
                      data-testid="mobile-accessibility-toggle"
                      className="text-sm w-full text-left"
                    >
                      {isAccessibilityOn
                        ? t("accessibility.toggleOn")
                        : t("accessibility.toggleOff")}
                    </button>
                  </div>
                </div>
                <div className="border-t border-border py-4">
                  <div className="space-y-2 px-2">
                    {legalLinks.map((link) => (
                      <Link
                        key={link.href}
                        href={link.href}
                        onClick={() => setIsMobileMenuOpen(false)}
                        className="nav-item flex items-center space-x-3 p-3 rounded-lg hover:bg-accent/10 transition-colors duration-200 w-full text-left"
                        title={link.label}
                      >
                        <div className="w-6 h-6 flex items-center justify-center text-xl">
                          {link.icon}
                        </div>
                        <span className="nav-text">{link.label}</span>
                      </Link>
                    ))}
                  </div>
                </div>
                <div className="border-t border-border p-4">
                  <div className="flex space-x-4 justify-center">
                    <a
                      href="#"
                      className="text-muted-foreground hover:text-accent transition-colors"
                      title="GitHub"
                    >
                      <div className="w-6 h-6 text-2xl">📂</div>
                    </a>
                    <a
                      href="#"
                      className="text-muted-foreground hover:text-accent transition-colors"
                      title="Twitter"
                    >
                      <div className="w-6 h-6 text-2xl">🐦</div>
                    </a>
                    <a
                      href="#"
                      className="text-muted-foreground hover:text-accent transition-colors"
                      title="LinkedIn"
                    >
                      <div className="w-6 h-6 text-2xl">💼</div>
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </RemoveScroll>
      )}

      {showScrollToTop && (
        <button
          data-testid="scroll-to-top"
          onClick={scrollToTop}
          className="fixed bottom-6 right-6 z-50 w-12 h-12 rounded-full bg-accent hover:bg-accent-light text-accent-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center font-bold text-lg"
          aria-label="Przewiń na górę"
        >
          ↑
        </button>
      )}
    </>
  );
}

------------------------------------

<!DOCTYPE html>
<html lang="pl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Architects+Daughter&family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=Fira+Code:wght@300..700&family=Geist+Mono:wght@100..900&family=Geist:wght@100..900&family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=IBM+Plex+Sans:ital,wght@0,100..700;1,100..700&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&family=Lora:ital,wght@0,400..700;1,400..700&family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Outfit:wght@100..900&family=Oxanium:wght@200..800&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&family=Roboto:ital,wght@0,100..900;1,100..900&family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&family=Space+Grotesk:wght@300..700&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
