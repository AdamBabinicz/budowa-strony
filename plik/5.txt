import { useState } from "react";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";

const workingCode = `// ImageGallery.tsx
import React, { useState } from 'react';

const ImageGallery: React.FC = () => {
  const [images] = useState([
    { id: 1, src: '/mountain.jpg', alt: 'Mountain' },
    { id: 2, src: '/ocean.jpg', alt: 'Ocean' }
  ]);

  return (
    <div className="grid grid-cols-2 gap-4">
      {images.map(img => (
        <img 
          key={img.id}
          src={img.src}
          alt={img.alt}
          className="rounded-lg hover:scale-105 transition-transform"
        />
      ))}
    </div>
  );
};`;

const buggyCode = `// ImageGallery.tsx - WITH BUG! üêõ
import React, { useState } from 'react';

const ImageGallery: React.FC = () => {
  const [images] = useState([
    { id: 1, src: '/mountain.jpg', alt: 'Mountain' },
    { id: 2, src: '/ocean.jpg', alt: 'Ocean' }
  ]);

  return (
    <div className="grid grid-cols-1 gap-4"> {/* BUG: Wrong grid-cols! */}
      {images.map(img => (
        <img 
          key={img.id}
          src={img.src}
          alt={img.alt}
          className="rounded-lg w-12 h-12" {/* BUG: Wrong dimensions! */}
        />
      ))}
    </div>
  );
};`;

export function InteractiveWorkshop() {
  const [isBugActive, setIsBugActive] = useState(false);
  const [currentCode, setCurrentCode] = useState(workingCode);
  const { t } = useTranslation();
  const { toast } = useToast();

  const simulateBug = () => {
    if (!isBugActive) {
      setIsBugActive(true);
      setCurrentCode(buggyCode);
      
      // Apply visual bug
      const gallery = document.getElementById('gallery-demo');
      if (gallery) {
        const grid = gallery.querySelector('.grid');
        if (grid) {
          grid.classList.remove('grid-cols-2');
          grid.classList.add('grid-cols-1');
        }
        
        gallery.querySelectorAll('img').forEach(img => {
          img.classList.add('w-12', 'h-12', 'object-none');
          img.classList.remove('hover:scale-105');
        });
      }
    } else {
      setIsBugActive(false);
      setCurrentCode(workingCode);
      
      // Fix visual bug
      const gallery = document.getElementById('gallery-demo');
      if (gallery) {
        const grid = gallery.querySelector('.grid');
        if (grid) {
          grid.classList.remove('grid-cols-1');
          grid.classList.add('grid-cols-2');
        }
        
        gallery.querySelectorAll('img').forEach(img => {
          img.classList.remove('w-12', 'h-12', 'object-none');
          img.classList.add('hover:scale-105');
        });
      }
    }
  };

  const copyCode = async () => {
    try {
      await navigator.clipboard.writeText(currentCode);
      toast({
        title: t('workshop.codeCopied'),
        description: t('workshop.codeDescription'),
      });
    } catch (err) {
      toast({
        title: t('workshop.error'),
        description: t('workshop.copyError'),
        variant: "destructive",
      });
    }
  };

  return (
    <div className="mb-16 animate-slide-in">
      <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
        üîß {t('workshop.title')}
      </h3>
      
      <div className="grid md:grid-cols-2 gap-12">
        {/* Live Component Demo */}
        <div>
          <h4 className="font-semibold mb-4">{t('workshop.galleryDemo')}</h4>
          <div 
            id="gallery-demo" 
            className="bg-card rounded-lg p-6 border border-border"
            data-testid="gallery-demo"
          >
            {/* Working gallery component */}
            <div className="grid grid-cols-2 gap-4 mb-4">
              <img 
                src="https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300" 
                alt={t('workshop.mountainAlt')} 
                className="rounded-lg shadow-md hover:scale-105 transition-transform duration-200 cursor-pointer"
                loading="lazy"
              />
              <img 
                src="https://images.unsplash.com/photo-1505142468610-359e7d316be0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300" 
                alt={t('workshop.oceanAlt')} 
                className="rounded-lg shadow-md hover:scale-105 transition-transform duration-200 cursor-pointer"
                loading="lazy"
              />
            </div>
            
            <div className="flex space-x-4">
              <Button
                data-testid="bug-button"
                onClick={simulateBug}
                variant={isBugActive ? "default" : "destructive"}
                className={isBugActive ? "bg-green-500 hover:bg-green-600" : ""}
              >
                {isBugActive ? t('workshop.fixBug') : t('workshop.simulateBug')}
              </Button>
            </div>
          </div>
        </div>
        
        {/* Code Display */}
        <div>
          <h4 className="font-semibold mb-4">{t('workshop.componentCode')}</h4>
          <div className="code-block rounded-lg p-6 text-white font-mono text-sm overflow-x-auto">
            <pre data-testid="code-display">
              <code>{currentCode}</code>
            </pre>
          </div>
          
          <Button
            data-testid="copy-code-button"
            onClick={copyCode}
            variant="outline"
            className="mt-4 bg-accent hover:bg-accent-light text-accent-foreground"
          >
            üìã {t('workshop.copyCode')}
          </Button>
        </div>
      </div>
    </div>
  );
}

-----------------------------------

import { useState } from "react";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";
import mountainImg from "@/assets/1.avif";
import oceanImg from "@/assets/2.avif";

const images = [
  { src: mountainImg, alt: "Mountain landscape at sunrise" },
  { src: oceanImg, alt: "Ocean waves during golden hour" },
];

const codeBefore = `
<div className="grid grid-cols-2 gap-4">
  {images.map((img) => (
    <img
      key={img.src}
      src={img.src}
      alt={img.alt}
      className="rounded-lg"
    />
  ))}
</div>
`;

const codeAfter = `
<div className="grid grid-cols-2 gap-4">
  {images.map((img) => (
    <img
      key={img.src}
      src={img.src}
      alt={t(img.alt)} // Corrected line
      className="rounded-lg object-cover h-48 w-full"
    />
  ))}
</div>
`;

export default function InteractiveWorkshop() {
  const { t } = useTranslation();
  const [isBugged, setIsBugged] = useState(false);
  const [showBuggyCode, setShowBuggyCode] = useState(false);
  const { toast } = useToast();

  const handleCopyCode = () => {
    const codeToCopy = showBuggyCode ? codeBefore : codeAfter;
    navigator.clipboard.writeText(codeToCopy.trim());
    toast({
      title: t("workshop.codeCopied"),
      description: t("workshop.codeDescription"),
    });
  };

  return (
    <div className="mb-16">
      <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
        {t("workshop.title")}
      </h3>
      <div className="grid lg:grid-cols-2 gap-8">
        <div className="animate-slide-in">
          <h4 className="font-semibold mb-4">{t("workshop.galleryDemo")}</h4>
          <div
            className={cn(
              "p-4 border rounded-lg",
              isBugged ? "border-destructive" : "border-border"
            )}
          >
            <div className="grid grid-cols-2 gap-4">
              {images.map((img) => (
                <img
                  key={img.src}
                  src={img.src}
                  alt={isBugged ? img.alt : t(img.alt, { ns: "workshop" })}
                  className={cn(
                    "rounded-lg",
                    !isBugged && "object-cover h-48 w-full"
                  )}
                />
              ))}
            </div>
          </div>
          <div className="mt-4 flex space-x-2">
            <Button
              onClick={() => {
                setIsBugged(!isBugged);
                setShowBuggyCode(!isBugged);
              }}
              className={cn(
                "w-full",
                isBugged
                  ? "bg-primary text-primary-foreground"
                  : "bg-red-700 text-white hover:bg-red-800"
              )}
              data-testid="bug-button"
            >
              {isBugged
                ? `‚úÖ ${t("workshop.fixBug")}`
                : `üêõ ${t("workshop.simulateBug")}`}
            </Button>
          </div>
        </div>
        <div className="animate-fade-in">
          <h4 className="font-semibold mb-4">{t("workshop.componentCode")}</h4>
          <div className="code-block rounded-lg p-4 text-white font-mono text-xs">
            <pre>
              <code>
                {showBuggyCode ? codeBefore.trim() : codeAfter.trim()}
              </code>
            </pre>
          </div>
          <div className="mt-4">
            <Button
              onClick={handleCopyCode}
              variant="secondary"
              className="w-full"
              data-testid="copy-code-button"
            >
              üìã {t("workshop.copyCode")}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

------------------dobry kod--------------------

import { useState } from "react";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import mountainImg from "@/assets/1.avif";
import oceanImg from "@/assets/2.avif";

const workingCode = `// ImageGallery.tsx
import React, { useState } from 'react';

const ImageGallery: React.FC = () => {
  const [images] = useState([
    { id: 1, src: '/mountain.jpg', alt: 'Mountain' },
    { id: 2, src: '/ocean.jpg', alt: 'Ocean' }
  ]);

  return (
    <div className="grid grid-cols-2 gap-4">
      {images.map(img => (
        <img
          key={img.id}
          src={img.src}
          alt={img.alt}
          className="rounded-lg hover:scale-105 transition-transform"
        />
      ))}
    </div>
  );
};`;

const buggyCode = `// ImageGallery.tsx - WITH BUG! üêõ
import React, { useState } from 'react';

const ImageGallery: React.FC = () => {
  const [images] = useState([
    { id: 1, src: '/mountain.jpg', alt: 'Mountain' },
    { id: 2, src: '/ocean.jpg', alt: 'Ocean' }
  ]);

  return (
    <div className="grid grid-cols-1 gap-4"> {/* BUG: Wrong grid-cols! */}
      {images.map(img => (
        <img
          key={img.id}
          src={img.src}
          alt={img.alt}
          className="rounded-lg w-12 h-12" {/* BUG: Wrong dimensions! */}
        />
      ))}
    </div>
  );
};`;

export function InteractiveWorkshop() {
  const [isBugActive, setIsBugActive] = useState(false);
  const [currentCode, setCurrentCode] = useState(workingCode);
  const { t } = useTranslation();
  const { toast } = useToast();

  const simulateBug = () => {
    if (!isBugActive) {
      setIsBugActive(true);
      setCurrentCode(buggyCode);

      // Apply visual bug
      const gallery = document.getElementById("gallery-demo");
      if (gallery) {
        const grid = gallery.querySelector(".grid");
        if (grid) {
          grid.classList.remove("grid-cols-2");
          grid.classList.add("grid-cols-1");
        }

        gallery.querySelectorAll("img").forEach((img) => {
          img.classList.add("w-12", "h-12", "object-none");
          img.classList.remove("hover:scale-105");
        });
      }
    } else {
      setIsBugActive(false);
      setCurrentCode(workingCode);

      // Fix visual bug
      const gallery = document.getElementById("gallery-demo");
      if (gallery) {
        const grid = gallery.querySelector(".grid");
        if (grid) {
          grid.classList.remove("grid-cols-1");
          grid.classList.add("grid-cols-2");
        }

        gallery.querySelectorAll("img").forEach((img) => {
          img.classList.remove("w-12", "h-12", "object-none");
          img.classList.add("hover:scale-105");
        });
      }
    }
  };

  const copyCode = async () => {
    try {
      await navigator.clipboard.writeText(currentCode);
      toast({
        title: t("workshop.codeCopied"),
        description: t("workshop.codeDescription"),
      });
    } catch (err) {
      toast({
        title: t("workshop.error"),
        description: t("workshop.copyError"),
        variant: "destructive",
      });
    }
  };

  return (
    <div className="mb-16 animate-slide-in">
      <h3 className="font-playfair text-2xl font-semibold mb-8 text-center">
        üîß {t("workshop.title")}
      </h3>

      <div className="grid md:grid-cols-2 gap-12">
        {/* Live Component Demo */}
        <div>
          <h4 className="font-semibold mb-4">{t("workshop.galleryDemo")}</h4>
          <div
            id="gallery-demo"
            className="bg-card rounded-lg p-6 border border-border"
            data-testid="gallery-demo"
          >
            {/* Working gallery component */}
            <div className="grid grid-cols-2 gap-4 mb-4">
              <img
                src={mountainImg}
                alt={t("workshop.mountainAlt")}
                className="rounded-lg shadow-md hover:scale-105 transition-transform duration-200 cursor-pointer"
                loading="lazy"
              />
              <img
                src={oceanImg}
                alt={t("workshop.oceanAlt")}
                className="rounded-lg shadow-md hover:scale-105 transition-transform duration-200 cursor-pointer"
                loading="lazy"
              />
            </div>

            <div className="flex space-x-4">
              <Button
                data-testid="bug-button"
                onClick={simulateBug}
                variant={isBugActive ? "default" : "destructive"}
                className={isBugActive ? "bg-green-500 hover:bg-green-600" : ""}
              >
                {isBugActive ? t("workshop.fixBug") : t("workshop.simulateBug")}
              </Button>
            </div>
          </div>
        </div>

        {/* Code Display */}
        <div>
          <h4 className="font-semibold mb-4">{t("workshop.componentCode")}</h4>
          <div className="code-block rounded-lg p-6 text-white font-mono text-sm overflow-x-auto">
            <pre data-testid="code-display">
              <code>{currentCode}</code>
            </pre>
          </div>

          <Button
            data-testid="copy-code-button"
            onClick={copyCode}
            variant="outline"
            className="mt-4 bg-accent hover:bg-accent-light text-accent-foreground"
          >
            üìã {t("workshop.copyCode")}
          </Button>
        </div>
      </div>
    </div>
  );
}

--------------------------------------

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import { fileURLToPath } from "url";
import { dirname, resolve } from "path";

const __dirname = dirname(fileURLToPath(import.meta.url));

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": resolve(__dirname, "client", "src"),
      // usu≈Ñ na razie @assets, ≈ºeby siƒô nie miesza≈Ço
      "@shared": resolve(__dirname, "shared"),
    },
  },
  root: resolve(__dirname, "client"),
  build: {
    outDir: resolve(__dirname, "dist/public"),
    emptyOutDir: true,
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"],
    },
  },
});

--------------------------------

import { useState } from "react";
import { useTranslation } from "react-i18next";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import mountainImg from "@/assets/1.avif";
import oceanImg from "@/assets/2.avif";

const workingCode = `// ImageGallery.tsx
import React, { useState } from 'react';

const ImageGallery: React.FC = () => {
  const [images] = useState([
    { id: 1, src: '/mountain.jpg', alt: 'Mountain' },
    { id: 2, src: '/ocean.jpg', alt: 'Ocean' }
  ]);

  // Zmieniono na responsywnƒÖ siatkƒô: 1 kolumna na mobilnych, 2 na wiƒôkszych ekranach
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
      {images.map(img => (
        <img
          key={img.id}
          src={img.src}
          alt={img.alt}
          className="rounded-lg hover:scale-105 transition-transform"
        />
      ))}
    </div>
  );
};`;

const buggyCode = `// ImageGallery.tsx - WITH BUG! üêõ
import React, { useState } from 'react';

const ImageGallery: React.FC = () => {
  const [images] = useState([
    { id: 1, src: '/mountain.jpg', alt: 'Mountain' },
    { id: 2, src: '/ocean.jpg', alt: 'Ocean' }
  ]);

  return (
    <div className="grid grid-cols-1 gap-4"> {/* BUG: Wrong grid-cols! */}
      {images.map(img => (
        <img
          key={img.id}
          src={img.src}
          alt={img.alt}
          className="rounded-lg w-12 h-12" {/* BUG: Wrong dimensions! */}
        />
      ))}
    </div>
  );
};`;

export function InteractiveWorkshop() {
  const [isBugActive, setIsBugActive] = useState(false);
  const [currentCode, setCurrentCode] = useState(workingCode);
  const { t } = useTranslation();
  const { toast } = useToast();

  const simulateBug = () => {
    const gallery = document.getElementById("gallery-demo");
    if (!gallery) return;
    const grid = gallery.querySelector(".grid");
    if (!grid) return;

    if (!isBugActive) {
      setIsBugActive(true);
      setCurrentCode(buggyCode);

      // Zaktualizowana logika Apply visual bug
      // Usuwamy klasƒô responsywnƒÖ, aby b≈ÇƒÖd (jedna kolumna) by≈Ç widoczny na wszystkich ekranach
      grid.classList.remove("sm:grid-cols-2");
      grid.classList.add("grid-cols-1"); // Upewniamy siƒô, ≈ºe jest jedna kolumna

      gallery.querySelectorAll("img").forEach((img) => {
        img.classList.add("w-12", "h-12", "object-none");
        img.classList.remove("hover:scale-105");
      });
    } else {
      setIsBugActive(false);
      setCurrentCode(workingCode);

      // Zaktualizowana logika Fix visual bug
      // Przywracamy responsywnƒÖ klasƒô
      grid.classList.add("sm:grid-cols-2");

      gallery.querySelectorAll("img").forEach((img) => {
        img.classList.remove("w-12", "h-12", "object-none");
        img.classList.add("hover:scale-105");
      });
    }
  };

  const copyCode = async () => {
    try {
      await navigator.clipboard.writeText(currentCode);
      toast({
        title: t("workshop.codeCopied"),
        description: t("workshop.codeDescription"),
      });
    } catch (err) {
      toast({
        title: t("workshop.error"),
        description: t("workshop.copyError"),
        variant: "destructive",
      });
    }
  };

  return (
    <div className="mb-16 animate-slide-in">
      {/* ZMIANA: Responsywny rozmiar czcionki */}
      <h3 className="font-playfair text-xl sm:text-2xl font-semibold mb-8 text-center">
        üîß {t("workshop.title")}
      </h3>

      {/* ZMIANA: Responsywne odstƒôpy (gap) */}
      <div className="grid md:grid-cols-2 gap-8 md:gap-12">
        {/* Live Component Demo */}
        <div>
          <h4 className="font-semibold mb-4">{t("workshop.galleryDemo")}</h4>
          <div
            id="gallery-demo"
            className="bg-card rounded-lg p-6 border border-border"
            data-testid="gallery-demo"
          >
            {/* ZMIANA: Responsywna siatka dla galerii (1 kolumna na mobilnych) */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
              <img
                src={mountainImg}
                alt={t("workshop.mountainAlt")}
                className="rounded-lg shadow-md hover:scale-105 transition-transform duration-200 cursor-pointer"
                loading="lazy"
              />
              <img
                src={oceanImg}
                alt={t("workshop.oceanAlt")}
                className="rounded-lg shadow-md hover:scale-105 transition-transform duration-200 cursor-pointer"
                loading="lazy"
              />
            </div>

            <div className="flex space-x-4">
              <Button
                data-testid="bug-button"
                onClick={simulateBug}
                variant={isBugActive ? "default" : "destructive"}
                className={isBugActive ? "bg-green-500 hover:bg-green-600" : ""}
              >
                {isBugActive ? t("workshop.fixBug") : t("workshop.simulateBug")}
              </Button>
            </div>
          </div>
        </div>

        {/* Code Display */}
        <div>
          <h4 className="font-semibold mb-4">{t("workshop.componentCode")}</h4>
          <div className="code-block rounded-lg p-6 text-white font-mono text-sm overflow-x-auto">
            <pre data-testid="code-display">
              <code className="whitespace-pre-wrap break-words">
                {currentCode}
              </code>
            </pre>
          </div>

          <Button
            data-testid="copy-code-button"
            onClick={copyCode}
            variant="outline"
            className="mt-4 bg-accent hover:bg-accent-light text-accent-foreground"
          >
            üìã {t("workshop.copyCode")}
          </Button>
        </div>
      </div>
    </div>
  );
}

